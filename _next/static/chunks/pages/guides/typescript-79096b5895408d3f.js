(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[232],{75007:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/typescript",function(){return t(47835)}])},47835:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var o=t(24246),r=t(71670),s=t(3916),i=t(30289);let c=(0,s.A)(i.us.TypeScript);function a(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"usage-with-typescript",children:"Usage with TypeScript"}),"\n",(0,o.jsxs)(n.p,{children:["All ",(0,o.jsx)(n.code,{children:"@mantine/*"})," packages are fully compatible with TypeScript. All examples in the documentation\nare written in TypeScript â€“ you can copy-paste them to your project without any changes."]}),"\n",(0,o.jsxs)(n.p,{children:["This guide will help you get familiar with types that ",(0,o.jsx)(n.code,{children:"@mantine/core"})," package exports."]}),"\n",(0,o.jsx)(n.h2,{id:"components-props-types",children:"Components props types"}),"\n",(0,o.jsxs)(n.p,{children:["Each ",(0,o.jsx)(n.code,{children:"@mantine/"})," package that exports components, exports props types for these components as well.\nYou can import component props types by adding ",(0,o.jsx)(n.code,{children:"Props"})," to the component name,\nfor example, you can import Button and DatePicker components props like so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import type { ButtonProps } from '@mantine/core';\nimport type { DatePickerProps } from '@mantine/dates';\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note that there are two variations of props types: for polymorphic components and for regular components.\nRegular components props types include ",(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<'X'>"}),", where ",(0,o.jsx)(n.code,{children:"X"})," is the root element\ntype, for example ",(0,o.jsx)(n.code,{children:"'div'"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Example of extending regular component props:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { GroupProps, Group } from '@mantine/core';\n\n// Interface includes `React.ComponentPropsWithoutRef<'div'>`\ninterface MyGroupProps extends GroupProps {\n  spacing: number;\n}\n\nfunction MyGroup({ spacing, ...others }: MyGroupProps) {\n  return <Group my={spacing} {...others} />;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"/guides/polymorphic",children:"Polymorphic components"})," props types do not include ",(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef<'X'>"}),"\nbecause their root element depends on the ",(0,o.jsx)(n.code,{children:"component"})," prop value."]}),"\n",(0,o.jsxs)(n.p,{children:["Example of extending ",(0,o.jsx)(n.a,{href:"/guides/polymorphic",children:"polymorphic components"})," props:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { ButtonProps, Button, ElementProps } from '@mantine/core';\n\ninterface MyButtonProps\n  extends ButtonProps,\n    ElementProps<'button', keyof ButtonProps> {\n  height: number;\n}\n\nfunction MyButton({ height, ...others }: MyButtonProps) {\n  return <Button style={{ height }} {...others} />;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"elementprops-type",children:"ElementProps type"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ElementProps"})," is a utility type similar to ",(0,o.jsx)(n.code,{children:"React.ComponentPropsWithoutRef"}),", but with additional\nfeatures. It replaces native elements ",(0,o.jsx)(n.code,{children:"style"})," prop with Mantine ",(0,o.jsx)(n.a,{href:"/styles/style",children:"style prop"})," and\nallows omitting properties that are passed as a second type."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { ElementProps, ButtonProps } from '@mantine/core';\n\n// Equivalent of `React.ComponentPropsWithoutRef<'button'>`\ntype ButtonElementProps = ElementProps<'button'>;\n\n// Equivalent of `Omit<React.ComponentPropsWithoutRef<'button'>, 'color' | 'onClick'>`\ntype OmitColor = ElementProps<'button', 'color' | 'onClick'>;\n\n// Removes all Mantine component props from React component props\n// to avoid props types conflicts\n// Equivalent of `Omit<React.ComponentPropsWithoutRef<'button'>, keyof ButtonProps>`\ntype OmitButtonProps = ElementProps<'button', keyof ButtonProps>;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mantinetheme-type",children:"MantineTheme type"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MantineTheme"})," is a type of ",(0,o.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"}),". You can use it to add types\nto functions that accept theme object as an argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { MantineTheme, useMantineTheme } from '@mantine/core';\n\nfunction getPrimaryColor(theme: MantineTheme) {\n  return theme.colors.blue[5];\n}\n\nfunction Demo() {\n  const theme = useMantineTheme();\n  return <div style={{ color: getPrimaryColor(theme) }} />;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mantinethemeoverride-type",children:"MantineThemeOverride type"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MantineThemeOverride"})," type is a deep partial of ",(0,o.jsx)(n.code,{children:"MantineTheme"}),". It can be used in functions\nthat accept theme override as an argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  MantineThemeOverride,\n  createTheme,\n  mergeThemeOverrides,\n} from '@mantine/core';\n\nconst baseTheme = createTheme({\n  fontFamily: 'Helvetica, sans-serif',\n});\n\nfunction mergeThemes(themes: MantineThemeOverride[]) {\n  return mergeThemeOverrides(baseTheme, ...themes);\n}\n\nconst overrideTheme = createTheme({\n  primaryColor: 'blue',\n});\n\nconst overrideTheme2 = createTheme({\n  cursorType: 'pointer',\n});\n\nconst mergedTheme = mergeThemes([overrideTheme, overrideTheme2]);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mantinecolorscheme-type",children:"MantineColorScheme type"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MantineColorScheme"})," is a union of ",(0,o.jsx)(n.code,{children:"'light' | 'dark' | 'auto'"})," values. You can use to add types\nto function that accept color scheme as an argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  MantineColorScheme,\n  useMantineColorScheme,\n} from '@mantine/core';\n\nfunction getComputedColorScheme(colorScheme: MantineColorScheme) {\n  return colorScheme === 'auto' ? 'light' : colorScheme;\n}\n\nfunction Demo() {\n  const { colorScheme } = useMantineColorScheme();\n  const computed = getComputedColorScheme(colorScheme);\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mantinesize-type",children:"MantineSize type"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MantineSize"})," type is a union of ",(0,o.jsx)(n.code,{children:"'xs' | 'sm' | 'md' | 'lg' | 'xl'"})," values. You can use to add types\nto various props that accept size as an argument, for example, ",(0,o.jsx)(n.code,{children:"radius"}),", ",(0,o.jsx)(n.code,{children:"shadow"}),", ",(0,o.jsx)(n.code,{children:"p"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { MantineSize, Paper } from '@mantine/core';\n\ninterface DemoProps {\n  size: MantineSize;\n  radius: MantineSize | (string & {}) | number;\n  shadow: MantineSize | string;\n}\n\nfunction Demo({ size, radius, shadow }: DemoProps) {\n  return <Paper radius={radius} shadow={shadow} p={size} m={size} />;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"theme-object-declarations",children:"Theme object declarations"}),"\n",(0,o.jsxs)(n.p,{children:["You can change ",(0,o.jsx)(n.code,{children:"theme.other"})," and ",(0,o.jsx)(n.code,{children:"theme.colors"})," types by extending ",(0,o.jsx)(n.code,{children:"MantineTheme"})," interface\nin ",(0,o.jsx)(n.code,{children:".d.ts"})," file. Create ",(0,o.jsx)(n.code,{children:"mantine.d.ts"})," anywhere in your project (must be included in ",(0,o.jsx)(n.code,{children:"tsconfig.json"}),")\nto extend theme object types."]}),"\n",(0,o.jsxs)(n.p,{children:["To override ",(0,o.jsx)(n.code,{children:"theme.other"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// mantine.d.ts\ndeclare module '@mantine/core' {\n  export interface MantineThemeOther {\n    myCustomProperty: string;\n    myCustomFunction: () => void;\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To override ",(0,o.jsx)(n.code,{children:"theme.colors"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import {\n  MantineColorsTuple,\n  DefaultMantineColor,\n} from '@mantine/core';\n\ntype ExtendedCustomColors =\n  | 'primaryColorName'\n  | 'secondaryColorName'\n  | DefaultMantineColor;\n\ndeclare module '@mantine/core' {\n  export interface MantineThemeColorsOverride {\n    colors: Record<ExtendedCustomColors, MantineColorsTuple>;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note that extending theme type is not required, it is only needed if you want to\nmake your theme object types more strict and add autocomplete in your editor."})]})}function p(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(c,{...e,children:(0,o.jsx)(a,{...e})})}}},function(e){e.O(0,[370,5819,2775,9774,2888,179],function(){return e(e.s=75007)}),_N_E=e.O()}]);