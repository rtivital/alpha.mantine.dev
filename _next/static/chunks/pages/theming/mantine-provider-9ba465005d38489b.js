(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6708],{94517:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/theming/mantine-provider",function(){return r(6433)}])},6433:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return l}});var s=r(24246),t=r(71670),o=r(3916),a=r(30289);let i=(0,o.A)(a.us.MantineProvider);function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"mantineprovider",children:"MantineProvider"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MantineProvider"})," provides a ",(0,s.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"})," context value, manages color scheme\nchanges and injects ",(0,s.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables"}),". It must be rendered at the root of your\napplication and should be used only once."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, createTheme } from '@mantine/core';\n\nconst theme = createTheme({\n  /** Your theme override here */\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"mantineprovider-props",children:"MantineProvider props"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MantineProvider"})," supports the following props:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"interface MantineProviderProps {\n  /** Theme override object */\n  theme?: MantineThemeOverride;\n\n  /** Used to retrieve/set color scheme value in external storage, by default uses `window.localStorage` */\n  colorSchemeManager?: MantineColorSchemeManager;\n\n  /** Default color scheme value used when `colorSchemeManager` cannot retrieve value from external storage, `light` by default */\n  defaultColorScheme?: MantineColorScheme;\n\n  /** CSS selector to which CSS variables should be added, `:root` by default */\n  cssVariablesSelector?: string;\n\n  /** Determines whether theme CSS variables should be added to given `cssVariablesSelector`, `true` by default */\n  withCssVariables?: boolean;\n\n  /** Function to resolve root element to set `data-mantine-color-scheme` attribute, must return undefined on server, `() => document.documentElement` by default */\n  getRootElement?(): HTMLElement | undefined;\n\n  /** A prefix for components static classes (for example {selector}-Text-root), `mantine` by default */\n  classNamesPrefix?: string;\n\n  /** Function to generate nonce attribute added to all generated `<style />` tags */\n  getStyleNonce?(): string;\n\n  /** Function to generate CSS variables based on theme object */\n  cssVariablesResolver?: CSSVariablesResolver;\n\n  /** Your application */\n  children?: React.ReactNode;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"theme",children:"theme"}),"\n",(0,s.jsxs)(n.p,{children:["Pass ",(0,s.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"})," override to ",(0,s.jsx)(n.code,{children:"theme"})," prop. It will be merged with the default\ntheme and used in all components."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, createTheme } from '@mantine/core';\n\nconst theme = createTheme({\n  fontFamily: 'Open Sans, sans-serif',\n  primaryColor: 'cyan',\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"colorschememanager",children:"colorSchemeManager"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"colorSchemeManager"})," is used to retrieve and set color scheme value in external storage. By default,\n",(0,s.jsx)(n.code,{children:"MantineProvider"})," uses ",(0,s.jsx)(n.code,{children:"window.localStorage"})," to store color scheme value, but you can pass your own\nimplementation to ",(0,s.jsx)(n.code,{children:"colorSchemeManager"})," prop. You can learn more about color scheme management in the\n",(0,s.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {\n  MantineProvider,\n  localStorageColorSchemeManager,\n} from '@mantine/core';\n\nconst colorSchemeManager = localStorageColorSchemeManager({\n  key: 'my-app-color-scheme',\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider colorSchemeManager={colorSchemeManager}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defaultcolorscheme",children:"defaultColorScheme"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"defaultColorScheme"})," value is used when ",(0,s.jsx)(n.code,{children:"colorSchemeManager"})," cannot retrieve the value from external\nstorage, for example during server side rendering or when the user hasn't selected a preferred color scheme.\nPossible values are ",(0,s.jsx)(n.code,{children:"light"}),", ",(0,s.jsx)(n.code,{children:"dark"})," and ",(0,s.jsx)(n.code,{children:"auto"}),". By default, color scheme value is ",(0,s.jsx)(n.code,{children:"light"}),".\nYou can learn more about color scheme management in the ",(0,s.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider defaultColorScheme=\"dark\">\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cssvariablesselector",children:"cssVariablesSelector"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cssVariablesSelector"})," is a CSS selector to which ",(0,s.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables"})," should be added.\nBy default, it is ",(0,s.jsx)(n.code,{children:":root"}),". ",(0,s.jsx)(n.code,{children:"MantineProvider"})," generates CSS variables based on given ",(0,s.jsx)(n.a,{href:"/theming/theme-object/",children:"theme override"}),"\nand ",(0,s.jsx)(n.code,{children:"cssVariablesResolver"}),", then these variables are rendered into ",(0,s.jsx)(n.code,{children:"<style />"})," tag next to your application.\nYou can learn more about Mantine CSS variables in the ",(0,s.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider cssVariablesSelector=\"html\">\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"withcssvariables",children:"withCssVariables"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"withCssVariables"})," determines whether theme CSS variables should be added to given ",(0,s.jsx)(n.code,{children:"cssVariablesSelector"}),".\nBy default, it is set to ",(0,s.jsx)(n.code,{children:"true"}),", you should not change it unless you want to manage CSS variables\nvia ",(0,s.jsx)(n.code,{children:".css"})," file (Note that in this case you will need to generate all theme tokens\nthat are not a part of the default theme on your side)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider withCssVariables={false}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getrootelement",children:"getRootElement"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getRootElement"})," is a function that returns the root application (usually ",(0,s.jsx)(n.code,{children:"html"}),") element to set ",(0,s.jsx)(n.code,{children:"data-mantine-color-scheme"})," attribute.\nDefault value is ",(0,s.jsx)(n.code,{children:"() => document.documentElement"})," which means that ",(0,s.jsx)(n.code,{children:"data-mantine-color-scheme"}),"\nattribute will be added to ",(0,s.jsx)(n.code,{children:"<html />"})," tag. You can learn more about color scheme management in the\n",(0,s.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nconst getRootElement = () =>\n  typeof window === 'undefined' ? undefined : document.body;\n\nfunction Demo() {\n  return (\n    <MantineProvider getRootElement={getRootElement}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"classnamesprefix",children:"classNamesPrefix"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"classNamesPrefix"})," is a prefix for components static classes (for example ",(0,s.jsx)(n.code,{children:"{selector}-Text-root"}),").\nDefault value is ",(0,s.jsx)(n.code,{children:"mantine"})," – all components will have ",(0,s.jsx)(n.code,{children:"mantine-"})," prefix in their ",(0,s.jsx)(n.strong,{children:"static classes"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Text, MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider>\n      <Text>Just some text</Text>\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this case (default ",(0,s.jsx)(n.code,{children:"classNamesPrefix"}),"), ",(0,s.jsx)(n.a,{href:"/core/text",children:"Text"})," component will have the following classes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mantine-focus-auto"})," – global utility class"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"m-3nrA4eL"})," – component class, usually a random string, with this class library styles are applied"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mantine-Text-root"})," – component static class, part of ",(0,s.jsx)(n.a,{href:"/styles/styles-api",children:"Styles API"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," you can change only ",(0,s.jsx)(n.strong,{children:"static class"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Text, MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider classNamesPrefix=\"app\">\n      <Text>Just some text</Text>\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now ",(0,s.jsx)(n.a,{href:"/core/text",children:"Text"})," component will have the following classes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mantine-focus-auto"})," – ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," does not impact global utility classes – it is static and ",(0,s.jsx)(n.strong,{children:"cannot be changed"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"m-3nrA4eL"})," – ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," does not impact library class – it is static and ",(0,s.jsx)(n.strong,{children:"cannot be changed"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"app-Text-root"})," – component static class has ",(0,s.jsx)(n.code,{children:"classNamesPrefix"})," instead of ",(0,s.jsx)(n.code,{children:"mantine"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getstylenonce",children:"getStyleNonce"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getStyleNonce"})," is a function to generate ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce",children:"nonce"})," attribute added to dynamic generated ",(0,s.jsx)(n.code,{children:"<style />"})," tags."]}),"\n",(0,s.jsx)(n.h3,{id:"cssvariablesresolver",children:"cssVariablesResolver"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cssVariablesResolver"})," is a function to generate CSS variables styles based on the ",(0,s.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"}),".\nYou can learn more about Mantine CSS variables in the ",(0,s.jsx)(n.a,{href:"/styles/css-variables#css-variables-resolver",children:"CSS variables guide"}),"."]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})})}}},function(e){e.O(0,[370,5819,2775,9774,2888,179],function(){return e(e.s=94517)}),_N_E=e.O()}]);