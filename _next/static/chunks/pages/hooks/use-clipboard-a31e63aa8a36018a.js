(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6821],{25840:function(e,o,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-clipboard",function(){return n(92686)}])},92686:function(e,o,n){"use strict";n.r(o),n.d(o,{default:function(){return j}});var i=n(24246),r=n(71670),t=n(3916),c=n(30289),d=n(27378),l=n(8671),s=n(1674);let a=`
import { Button } from '@mantine/core';
import { useClipboard } from '@mantine/hooks';

function Demo() {
  const clipboard = useClipboard({ timeout: 500 });

  return (
    <Button
      color={clipboard.copied ? 'teal' : 'blue'}
      onClick={() => clipboard.copy('Hello, world!')}
    >
      {clipboard.copied ? 'Copied' : 'Copy'}
    </Button>
  );
}`,p={type:"code",code:a,component:function(){let e=(0,s.V)({timeout:500});return d.createElement(l.z,{color:e.copied?"teal":"blue",onClick:()=>e.copy("Hello, world!")},e.copied?"Copied":"Copy")},centered:!0},h=(0,t.A)(c.us.useClipboard);function u(e){let o={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Demo:n}=o;return n||function(e,o){throw Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Demo",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"use-clipboard"})," hook provides interface to work with ",(0,i.jsx)(o.code,{children:"navigator.clipboard"}),":"]}),"\n",(0,i.jsx)(n,{data:p}),"\n",(0,i.jsx)(o.h2,{id:"navigatorclipboard-limitations",children:"navigator.clipboard limitations"}),"\n",(0,i.jsxs)(o.p,{children:["Due to security reasons ",(0,i.jsx)(o.code,{children:"use-clipboard"})," hook will not work in iframes and may not work with local files opened with ",(0,i.jsx)(o.code,{children:"file://"})," protocol\n(hook will work fine with local websites that are using ",(0,i.jsx)(o.code,{children:"http://"})," protocol). You can learn more about ",(0,i.jsx)(o.code,{children:"navigator.clipboard"})," ",(0,i.jsx)(o.a,{href:"https://web.dev/async-clipboard/",children:"here"}),"."]}),"\n",(0,i.jsx)(o.h2,{id:"api",children:"API"}),"\n",(0,i.jsxs)(o.p,{children:[(0,i.jsx)(o.code,{children:"use-clipboard"})," hook accepts one argument ",(0,i.jsx)(o.code,{children:"options"})," in which copied status timeout duration is defined (defaults to ",(0,i.jsx)(o.code,{children:"2000"}),").\nHook returns object with properties:"]}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"copy"})," – function to copy value to the clipboard"]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"copied"})," – value that indicates that ",(0,i.jsx)(o.code,{children:"copy"})," handler was called less than ",(0,i.jsx)(o.code,{children:"options.timeout"})," ms ago"]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"reset"})," – function to clear timeout and reset ",(0,i.jsx)(o.code,{children:"copied"})," to ",(0,i.jsx)(o.code,{children:"false"})]}),"\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"error"})," – contains ",(0,i.jsx)(o.code,{children:"Error"})," object if something goes wrong"]}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-tsx",children:"function useClipboard(\n  options: { timeout: number } = { timeout: 2000 }\n): {\n  copy: (valueToCopy: any) => void;\n  reset: () => void;\n  error: Error;\n  copied: boolean;\n};\n"})})]})}function j(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.jsx)(h,{...e,children:(0,i.jsx)(u,{...e})})}}},function(e){e.O(0,[370,5819,2775,9774,2888,179],function(){return e(e.s=25840)}),_N_E=e.O()}]);