(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5288],{77049:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-focus-trap",function(){return s(61369)}])},61369:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return a}});var o=s(24246),r=s(71670),t=s(3916),c=s(30289);let i=(0,t.A)(c.us.useFocusTrap);function u(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"use-focus-trap"})," traps focus at the given node, for example in modal, drawer or menu.\nNode must include at least one focusable element. When the node unmounts, the focus trap is automatically released."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useFocusTrap } from '@mantine/hooks';\n\nfunction Demo() {\n  const focusTrapRef = useFocusTrap();\n\n  return (\n    <div ref={focusTrapRef}>\n      <input />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.p,{children:"The hook accepts focus trap active state as a single argument:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"useFocusTrap(); // -> focus trap inactive\nuseFocusTrap(true); // -> focus trap active\n\nuseFocusTrap(false); // -> focus trap disabled\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The hook returns ",(0,o.jsx)(n.code,{children:"ref"})," that should be passed to the element:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const focusTrapRef = useFocusTrap();\n\n// With regular element:\n<div ref={focusTrapRef} />\n\n// With Mantine component:\n<Paper ref={focusTrapRef} />\n"})}),"\n",(0,o.jsx)(n.h2,{id:"combine-with-other-ref-based-hooks",children:"Combine with other ref based hooks"}),"\n",(0,o.jsxs)(n.p,{children:["To combine ",(0,o.jsx)(n.code,{children:"use-focus-trap"})," with other ref based hooks, use ",(0,o.jsx)(n.a,{href:"/hooks/use-merged-ref/",children:"use-merged-ref"})," hook:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useRef } from 'react';\nimport {\n  useClickOutside,\n  useFocusTrap,\n  useMergedRef,\n} from '@mantine/hooks';\n\nfunction Demo() {\n  const myRef = useRef();\n  const useClickOutsideRef = useClickOutside(() => {});\n  const focusTrapRef = useFocusTrap();\n  const mergedRef = useMergedRef(\n    myRef,\n    useClickOutsideRef,\n    focusTrapRef\n  );\n\n  return <div ref={mergedRef} />;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"initial-focus",children:"Initial focus"}),"\n",(0,o.jsxs)(n.p,{children:["By default, focus trap will move focus to the first interactive element.\nTo specify the element that should receive initial focus, add ",(0,o.jsx)(n.code,{children:"data-autofocus"})," attribute:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useFocusTrap } from '@mantine/hooks';\n\nfunction Demo() {\n  const focusTrapRef = useFocusTrap();\n\n  return (\n    <div ref={focusTrapRef}>\n      <input />\n      {/* Second input in modal will have initial focus */}\n      <input data-autofocus />\n      <input />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function useFocusTrap(\n  active?: boolean\n): (instance: HTMLElement) => void;\n"})})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(i,{...e,children:(0,o.jsx)(u,{...e})})}}},function(e){e.O(0,[370,5819,2775,9774,2888,179],function(){return e(e.s=77049)}),_N_E=e.O()}]);