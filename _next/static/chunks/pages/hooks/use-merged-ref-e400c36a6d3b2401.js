(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8716],{49465:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-merged-ref",function(){return s(22864)}])},22864:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return u}});var o=s(24246),r=s(71670),i=s(3916),t=s(30289);let c=(0,i.A)(t.us.useMergedRef);function d(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"use-merged-ref"})," accepts any number of refs and returns a function that should be passed to the ",(0,o.jsx)(n.code,{children:"ref"})," prop.\nUse this hook when you need to use more than one ref on a single dom node, for example,\nwhen you want to use ",(0,o.jsx)(n.a,{href:"/hooks/use-click-outside/",children:"use-click-outside"})," and ",(0,o.jsx)(n.a,{href:"/hooks/use-focus-trap/",children:"use-focus-trap"})," hooks and also get a ref for yourself:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useRef } from 'react';\nimport {\n  useClickOutside,\n  useFocusTrap,\n  useMergedRef,\n} from '@mantine/hooks';\n\nfunction Demo() {\n  const myRef = useRef();\n  const useClickOutsideRef = useClickOutside(() => {});\n  const focusTrapRef = useFocusTrap();\n  const mergedRef = useMergedRef(\n    myRef,\n    useClickOutsideRef,\n    focusTrapRef\n  );\n\n  return <div ref={mergedRef} />;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mergerefs-function",children:"mergeRefs function"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"use-merged-ref"})," hooks memoizes refs with ",(0,o.jsx)(n.code,{children:"useCallback"})," hook, but in some cases\nmemoizing is not a valid strategy, for example, when you are working with a list\nof dynamic components React will complain that different number of hooks was called\nacross two renders. To fix that issue, use ",(0,o.jsx)(n.code,{children:"mergeRefs"})," function instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useRef } from 'react';\nimport { useClickOutside, mergeRefs } from '@mantine/hooks';\n\nfunction Demo() {\n  const myRef = useRef();\n  const useClickOutsideRef = useClickOutside(() => {});\n  const mergedRef = mergeRefs(myRef, useClickOutsideRef);\n  return <div ref={mergedRef} />;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"mergeRefs"})," works the same way as ",(0,o.jsx)(n.code,{children:"use-merged-ref"}),", but does not use hooks internally.\nUse it only when you cannot use ",(0,o.jsx)(n.code,{children:"use-merged-ref"}),". Note that ",(0,o.jsx)(n.code,{children:"mergeRefs"})," will not work\ncorrectly with ",(0,o.jsx)(n.a,{href:"/hooks/use-focus-trap/",children:"use-focus-trap"})," hook, you are required to\nuse ",(0,o.jsx)(n.code,{children:"use-merged-ref"})," with it."]}),"\n",(0,o.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function useMergedRef<T = any>(\n  ...refs: React.ForwardedRef<T>[]\n): (node: T) => void;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"set-node-type",children:"Set node type"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"useMergedRef<HTMLDivElement>();\n"})})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(c,{...e,children:(0,o.jsx)(d,{...e})})}}},function(e){e.O(0,[370,5819,2775,9774,2888,179],function(){return e(e.s=49465)}),_N_E=e.O()}]);