(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1760],{43897:function(r,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/form/errors",function(){return n(96768)}])},96768:function(r,e,n){"use strict";n.r(e),n.d(e,{default:function(){return m}});var o=n(24246),s=n(71670),a=n(3916),i=n(30289);let l=(0,a.A)(i.us.formErrors);function t(r){let e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"errors-object",children:"Errors object"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"form.errors"})," is an object of React nodes that contains validation errors:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({\n  initialValues: { firstName: '', lastName: '' },\n  validate: {\n    firstName: (value) =>\n      value.length < 2 ? 'First name is too short' : null,\n    lastName: (value) =>\n      value.length < 2 ? 'Last name is too short' : null,\n  },\n});\n\n// Errors object is empty by default\nform.errors; // -> {}\n\n// Errors will be filled when you call form.validate manually\n// or automatically with form.onSubmit handler\nform.validate();\n\nform.errors; // ->\n// {\n//   firstName: 'First name is too short',\n//   lastName: 'Last name is too short'\n// }\n"})}),"\n",(0,o.jsx)(e.h2,{id:"initial-errors",children:"Initial errors"}),"\n",(0,o.jsxs)(e.p,{children:["Same as with ",(0,o.jsx)(e.a,{href:"/form/values/",children:"initial values"})," you can set initial form errors:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({\n  initialValues: { firstName: '', lastName: '' },\n  initialErrors: {\n    firstName: 'First name is too short',\n    lastName: 'Last name is too short',\n  },\n});\n"})}),"\n",(0,o.jsx)(e.h2,{id:"seterrors-handler",children:"setErrors handler"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm();\nform.setErrors({ firstName: 'Too short', email: 'Invalid email' });\n\nform.errors;\n// -> { firstName: 'Too short', email: 'Invalid email' }\n"})}),"\n",(0,o.jsx)(e.h2,{id:"setfielderror-handler",children:"setFieldError handler"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"form.setFieldError"})," handler sets error of the given field:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({ initialValues: { name: '', email: '' } });\nform.setFieldError('email', 'Invalid email');\n\nform.errors; // -> { email: 'Invalid email' }\n"})}),"\n",(0,o.jsx)(e.h2,{id:"clearerrors-handler",children:"clearErrors handler"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"form.clearErrors"})," handler clear all form errors:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({\n  initialErrors: { name: 'Too short', email: 'Invalid email' },\n});\nform.clearErrors();\n\nconsole.log(form.errors);\n// -> {}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"clearfielderror-handler",children:"clearFieldError handler"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"form.clearFieldError"})," handler clears error of the given field:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({\n  initialErrors: { name: 'Too short', email: 'Invalid email' },\n});\nform.clearFieldError('name');\n\nconsole.log(form.errors);\n// -> { email: 'Invalid email' }\n"})}),"\n",(0,o.jsx)(e.h2,{id:"errors-as-react-node",children:"Errors as react node"}),"\n",(0,o.jsx)(e.p,{children:"You can use any React node as an error message:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({\n  initialValues: { name: '', email: '' },\n  initialErrors: {\n    name: <p>Paragraph error</p>, // -> error as a react element\n    email: 42, // -> error as a number\n  },\n});\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Note that errors that are ",(0,o.jsx)(e.code,{children:"false"}),", ",(0,o.jsx)(e.code,{children:"null"})," or ",(0,o.jsx)(e.code,{children:"undefined"})," will be automatically removed:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm({\n  initialErrors: { name: 'name-error', email: null },\n});\nform.errors; // -> { name: 'name-error' }, email error is not included in errors object\n"})}),"\n",(0,o.jsx)(e.h2,{id:"formerrors-type",children:"FormErrors type"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"form.errors"})," type is ",(0,o.jsx)(e.code,{children:"Record<string, React.ReactNode>"}),", you can import a shorthand ",(0,o.jsx)(e.code,{children:"FormErrors"})," type from ",(0,o.jsx)(e.code,{children:"@mantine/form"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import type { FormErrors } from '@mantine/form';\n"})}),"\n",(0,o.jsxs)(e.p,{children:["You can also get type directly from the ",(0,o.jsx)(e.code,{children:"form"})," instance:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useForm } from '@mantine/form';\n\nconst form = useForm();\n\nconst handleErrors = (errors: typeof form.errors) => {};\n"})})]})}function m(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(l,{...r,children:(0,o.jsx)(t,{...r})})}}},function(r){r.O(0,[370,5819,2775,9774,2888,179],function(){return r(r.s=43897)}),_N_E=r.O()}]);