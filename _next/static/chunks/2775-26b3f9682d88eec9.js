(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2775],{89114:function(e,t,o){"use strict";o.d(t,{O:function(){return r}});var n=o(24246);o(27378);var Text=o(26569);function r(e){let{children:t,...o}=e;return(0,n.jsx)(Text.x,{component:"span","data-docs-inline-code":!0,dangerouslySetInnerHTML:{__html:t.replace(/`([^`]+)`/g,"<code>$1</code>").replace(/!important!/g,"<b>Important</b>")},fz:"sm",...o})}},3916:function(e,t,o){"use strict";o.d(t,{A:function(){return ep}});var n=o(24246),r=o(27378),a=o(56589),i=o(57847),Text=o(26569),d=o(71078),s=o(56695),l=o(53781),c=o(91699),p=o(942),u=o(90878),m=o(49258),f=o(79894),h=o.n(f),y=o(9136),b=o(40624),v=o(1535),g=o.n(v);function w(e){let{label:t,children:o,className:r}=e;return(0,n.jsxs)("div",{className:(0,b.Z)(g().item,r),children:[(0,n.jsx)(Text.x,{className:g().label,fz:"sm",children:t}),o]})}var q=o(85008),S=o.n(q);function C(e){let{label:t,icon:o,children:r,link:a}=e;return(0,n.jsx)(w,{label:t,children:(0,n.jsx)("div",{className:S().wrapper,children:(0,n.jsxs)(y.e,{component:a.startsWith("/")?h():"a",className:S().link,href:a,fz:"sm",children:[(0,n.jsx)("div",{className:S().icon,children:o}),r]})})})}var P=o(11258),D=o.n(P),R=o(99684),x=o(19397),k=o(37127),z=o(1674),I=o(73133),M=o(90576),N=o.n(M);function L(e){let{code:t}=e,o=(0,z.V)(),r=(0,I.a)("(max-width: ".concat((0,d.em)(500),")"));return(0,n.jsx)(w,{label:"Import",className:N().wrapper,children:(0,n.jsx)(R.u,{label:o.copied?"Copied":"Copy code",position:"right",offset:10,disabled:r,children:(0,n.jsx)(x.k,{className:N().copy,type:"button",onClick:()=>o.copy(t),children:(0,n.jsx)(k._,{className:N().code,language:"tsx",styles:{code:{padding:0,margin:0}},code:t})})})})}let O="https://github.com/rtivital/mantine/blob/master",A="".concat(O,"/docs/pages"),E="".concat(O,"/packages");function T(e){let{meta:t}=e,o=Array.isArray(t.props),r=!!(t.import||t.source),f=!!t.title;return!t.hideHeader&&(r||o||t.release||f)?(0,n.jsx)("div",{className:D().wrapper,children:(0,n.jsxs)(a.x,{className:D().header,mod:{"with-tabs":o},children:[(0,n.jsx)(i.D,{className:D().title,children:t.title}),(0,n.jsx)(Text.x,{className:D().description,children:t.description}),t.import&&(0,n.jsx)(L,{code:t.import}),t.polymorphic&&(0,n.jsx)(C,{label:"Polymorphic",icon:(0,n.jsx)(c.Z,{style:{width:(0,d.h)(14),height:(0,d.h)(14)},stroke:1.5}),link:"/guides/polymorphic",children:"Polymorphic component"}),t.source&&(0,n.jsx)(C,{label:"Source",icon:(0,n.jsx)(s.E,{size:14}),link:"".concat(E,"/").concat(t.source),children:"View source code"}),t.date&&t.release&&(0,n.jsx)(C,{label:"Release date",icon:(0,n.jsx)(p.Z,{style:{width:(0,d.h)(14),height:(0,d.h)(14)},stroke:1.5}),link:t.release,children:t.date}),t.release&&(0,n.jsx)(C,{label:"Source code",icon:(0,n.jsx)(s.E,{size:14}),link:t.release,children:"Release on GitHub"}),t.docs&&(0,n.jsx)(C,{label:"Docs",icon:(0,n.jsx)(u.Z,{style:{width:(0,d.h)(14),height:(0,d.h)(14)},stroke:1.5}),link:"".concat(A,"/").concat(t.docs),children:"Edit this page"}),t.package&&(0,n.jsx)(C,{label:"Package",icon:(0,n.jsx)(l._,{size:14}),link:"https://www.npmjs.com/package/".concat(t.package),children:t.package}),t.license&&(0,n.jsx)(C,{label:"License",icon:(0,n.jsx)(m.Z,{style:{width:(0,d.h)(14),height:(0,d.h)(14)},stroke:1.5}),link:"https://github.com/mantinedev/mantine/blob/master/LICENSE",children:"MIT"})]})}):null}var F=o(83601),W=o(86677),j=o(49849),Y=o(47261),B=o(19787),V=o.n(B);function H(e){if(0===e.length)return -1;let t=e.reduce((e,t,o)=>Math.abs(e.position)<Math.abs(t.y)?e:{index:o,position:t.y},{index:0,position:e[0].y});return t.index}function K(e){let{withTabs:t}=e,[o,i]=(0,r.useState)(0),[s,l]=(0,r.useState)([]),c=(0,r.useRef)([]),p=(0,W.useRouter)(),u=s.filter(e=>e.depth>1),m=()=>{i(H(c.current.map(e=>e.getNode().getBoundingClientRect())))};if((0,r.useEffect)(()=>{let e=function(){let e=document.getElementById("mdx");return e?function(e){let t=[];for(let o=0;o<e.length;o+=1){let n=e[o];n.id&&t.push({depth:parseInt(n.getAttribute("data-order"),10),content:n.getAttribute("data-heading")||"",id:n.id,getNode:()=>document.getElementById(n.id)})}return t}(Array.from(e.querySelectorAll("[data-heading]"))):[]}();return c.current=e,l(e),i(H(e.map(e=>e.getNode().getBoundingClientRect()))),window.addEventListener("scroll",m),()=>window.removeEventListener("scroll",m)},[]),0===u.length)return null;let f=u.map((e,t)=>(0,n.jsx)(Text.x,{component:"a",fz:"sm",className:V().link,mod:{active:o===t},href:"#".concat(e.id),__vars:{"--toc-link-offset":"".concat(e.depth-1)},onClick:t=>{t.preventDefault(),p.replace("".concat(p.pathname,"#").concat(e.id))},children:e.content},e.id));return(0,n.jsx)(a.x,{component:"nav",mod:{"with-tabs":t},className:V().wrapper,children:(0,n.jsx)("div",{className:V().inner,children:(0,n.jsxs)("div",{children:[(0,n.jsxs)("div",{className:V().header,children:[(0,n.jsx)(Y.Z,{style:{width:(0,d.h)(20),height:(0,d.h)(20)},stroke:1.5}),(0,n.jsx)(Text.x,{className:V().title,children:"Table of contents"})]}),(0,n.jsx)(j.x.Autosize,{mah:"calc(100vh - ".concat((0,d.h)(140),")"),type:"never",offsetScrollbars:!0,children:(0,n.jsx)("div",{className:V().items,children:f})})]})})})}var _=o(25179),G=o(87393),U=o(4687),X=o(29995),Z=o(30289),J=o(73279),Q=o.n(J);function $(e){let{meta:t}=e,{next:o,prev:r}=function(e){let t=Z.YU.findIndex(t=>t.slug===e),o=Z.YU[t-1],n=Z.YU[t+1];return{prev:o,next:n}}(t.slug);return t.hideSiblings?null:(0,n.jsxs)("div",{className:Q().root,children:[r&&(0,n.jsxs)(h(),{href:r.slug,className:(0,b.Z)(Q().link,X.C.auto),children:[(0,n.jsx)(G.Z,{stroke:1.5,className:Q().icon}),(0,n.jsxs)(a.x,{mod:"prev",className:Q().body,children:[(0,n.jsx)(Text.x,{className:Q().title,children:"Previous"}),(0,n.jsx)(Text.x,{c:"dimmed",className:Q().description,children:r.title})]})]}),o&&(0,n.jsxs)(h(),{href:o.slug,className:(0,b.Z)(Q().link,X.C.auto),children:[(0,n.jsxs)(a.x,{mod:"next",className:Q().body,children:[(0,n.jsx)(Text.x,{className:Q().title,children:"Next"}),(0,n.jsx)(Text.x,{c:"dimmed",className:Q().description,children:o.title})]}),(0,n.jsx)(U.Z,{stroke:1.5,className:Q().icon})]})]})}var ee=o(77093),et=o(62763),eo=o(69684),en=o.n(eo);function er(e){let{children:t,meta:o}=e,a=(0,W.useRouter)(),[i,s]=(0,r.useState)("docs"),l=Array.isArray(o.props),c=Array.isArray(o.styles);return((0,r.useEffect)(()=>{s(window.location.search.replace("?t=","")||"docs")},[]),l||c)?(0,n.jsx)(_._,{children:(0,n.jsxs)(F.m,{variant:"outline",value:i,classNames:{list:en().tabsList,tab:en().tab},keepMounted:!1,onChange:e=>{a.replace("docs"===e?a.pathname:"".concat(a.pathname,"?t=").concat(e)),s(e)},children:[(0,n.jsx)("div",{className:en().tabsWrapper,children:(0,n.jsxs)(F.m.List,{children:[(0,n.jsx)(F.m.Tab,{value:"docs",children:"Documentation"}),l&&(0,n.jsx)(F.m.Tab,{value:"props",children:"Props"}),c&&(0,n.jsx)(F.m.Tab,{value:"styles-api",children:"Styles API"})]})}),(0,n.jsx)(F.m.Panel,{value:"docs",children:(0,n.jsxs)("div",{className:en().tabContent,style:{display:"flex",position:"relative",justifyContent:"space-between"},children:[(0,n.jsxs)("div",{className:en().main,children:[t,(0,n.jsx)($,{meta:o})]}),(0,n.jsx)("div",{className:en().tableOfContents,children:(0,n.jsx)(K,{withTabs:!0})})]})}),(0,n.jsx)(F.m.Panel,{value:"props",children:(0,n.jsx)("div",{style:{maxWidth:(0,d.h)(1178),marginLeft:"auto",marginRight:"auto",marginTop:(0,d.h)(24)},className:en().tabContent,children:(0,n.jsx)(ee.ek,{components:o.props,componentPrefix:o.componentPrefix})})}),(0,n.jsx)(F.m.Panel,{value:"styles-api",children:(0,n.jsx)("div",{style:{maxWidth:(0,d.h)(1178),marginLeft:"auto",marginRight:"auto",marginTop:(0,d.h)(24)},className:en().tabContent,children:(0,n.jsx)(et.D5,{components:o.styles,componentPrefix:o.componentPrefix})})})]})}):null}var ea=o(81026),ei=o.n(ea);function ed(e){let{children:t,meta:o}=e;return(0,n.jsx)(_._,{children:(0,n.jsxs)("div",{className:ei().wrapper,children:[(0,n.jsxs)("div",{className:ei().container,children:[t,(0,n.jsx)($,{meta:o})]}),(0,n.jsx)("div",{className:ei().tableOfContents,children:(0,n.jsx)(K,{withTabs:!1})})]})})}function es(e){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(T,{...e}),Array.isArray(e.meta.props)?(0,n.jsx)(er,{...e}):(0,n.jsx)(ed,{...e})]})}var el=o(93046);function ec(e){let{meta:t,children:o}=e;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(el.y,{title:t.title,description:t.description}),(0,n.jsx)(es,{meta:t,children:o})]})}function ep(e){return t=>{let{children:o}=t;return(0,n.jsx)(ec,{meta:e,children:o})}}},25179:function(e,t,o){"use strict";o.d(t,{_:function(){return d}});var n=o(24246);o(27378);var r=o(71611),a=o(21400),i=o.n(a);function d(e){let{children:t}=e;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:i().content,children:t}),(0,n.jsx)(r.$,{withNavbar:!0})]})}},93046:function(e,t,o){"use strict";o.d(t,{y:function(){return i}});var n=o(24246);o(27378);var r=o(88038),a=o.n(r);function i(e){let{title:t,description:o}=e,r=t?"".concat(t," | Mantine"):"Mantine",i=o||"React components and hooks library with native dark theme support and focus on usability, accessibility and developer experience";return(0,n.jsxs)(a(),{children:[(0,n.jsx)("title",{children:r}),(0,n.jsx)("meta",{name:"description",content:i}),(0,n.jsx)("meta",{name:"og:title",content:r}),(0,n.jsx)("meta",{name:"og:description",content:i}),(0,n.jsx)("meta",{name:"twitter:title",content:r}),(0,n.jsx)("meta",{name:"twitter:description",content:i})]})}},77093:function(e,t,o){"use strict";o.d(t,{ek:function(){return g},iY:function(){return y}});var n=o(24246),r=o(27378),a=o(28862),i=o(26853),Text=o(26569),d=o(74490),s=o(89114),l=o(61461),c=o(60626),p=JSON.parse('{"Accordion":{"props":{"chevron":{"description":"Custom chevron icon that will be used in all items","name":"chevron","required":false,"type":{"name":"React.ReactNode"}},"chevronPosition":{"description":"Position of the chevron relative to the item label, <code>right</code> by default","name":"chevronPosition","required":false,"type":{"name":"AccordionChevronPosition","raw":"AccordionChevronPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"chevronSize":{"description":"Size of the chevron icon container, <code>24</code> by default","name":"chevronSize","required":false,"type":{"name":"string | number"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string | string[] | null"}},"disableChevronRotation":{"description":"Determines whether chevron rotation should be disabled, <code>false</code> by default","name":"disableChevronRotation","required":false,"type":{"name":"boolean"}},"loop":{"description":"Determines whether arrow key presses should loop though items (first to last and last to first), <code>true</code> by default","name":"loop","required":false,"type":{"name":"boolean"}},"multiple":{"description":"Determines whether multiple items can be opened at a time, <code>false</code> by default","name":"multiple","required":false,"type":{"name":"boolean"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: AccordionValue<Multiple>) => void)"}},"order":{"description":"Heading order, has no effect on visuals","name":"order","required":false,"type":{"name":"AccordionHeadingOrder","raw":"AccordionHeadingOrder | undefined","value":[{"value":"undefined"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem. <code>theme.defaultRadius</code> by default.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"transitionDuration":{"description":"Transition duration in ms, <code>200</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"string | string[] | null"}}}},"Accordion.Item":{"props":{"value":{"description":"Value that is used to manage accordion state","name":"value","required":true,"type":{"name":"string"}}}},"Accordion.Panel":{"description":"","props":{}},"Accordion.Control":{"props":{"chevron":{"description":"Custom chevron icon","name":"chevron","required":false,"type":{"name":"React.ReactNode"}},"children":{"description":"Control label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"description":"Disables control button","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"description":"Icon displayed next to the label","name":"icon","required":false,"type":{"name":"React.ReactNode"}}}},"Accordion.Chevron":{"props":{"size":{"description":"Controls <code>width</code> and <code>height</code> of the icon, <code>16</code> by default","name":"size","required":false,"type":{"name":"string | number"}}}},"ActionIcon":{"props":{"children":{"description":"Icon displayed inside the button","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color. Default value is <code>theme.primaryColor</code>.","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"description":"Sets <code>disabled</code> and <code>data-disabled</code> attributes on the button element","name":"disabled","required":false,"type":{"name":"boolean"}},"gradient":{"description":"Gradient data used when <code>variant=\\"gradient\\"</code>, default value is <code>theme.defaultGradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"loaderProps":{"description":"Props added to the <code>Loader</code> component (only visible when <code>loading</code> prop is set)","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"description":"Determines whether <code>Loader</code> component should be displayed instead of the <code>children</code>, <code>false</code> by default","name":"loading","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem. <code>theme.defaultRadius</code> by default.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls width and height of the button. Numbers are converted to rem. <code>\'md\'</code> by default.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Affix":{"props":{"portalProps":{"description":"Props to pass down to the <code>Portal</code> component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Affix position on screen, defaults value is <code>{ bottom: 0, right: 0 }</code>","name":"position","required":false,"type":{"name":"{ top?: string | number; left?: string | number | undefined; bottom?: string | number | undefined; right?: string | number | undefined; } | undefined"}},"withinPortal":{"description":"Determines whether component should be rendered within portal, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Root element <code>z-index</code> property, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Alert":{"props":{"closeButtonLabel":{"description":"Close button <code>aria-label</code>","name":"closeButtonLabel","required":false,"type":{"name":"string"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, default value is <code>theme.primaryColor</code>","name":"color","required":false,"type":{"name":"MantineColor"}},"icon":{"description":"Icon displayed next to the title","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"onClose":{"description":"Called when the close button is clicked","name":"onClose","required":false,"type":{"name":"(() => void)"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"title":{"description":"Alert title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"withCloseButton":{"description":"Determines whether close button should be displayed, <code>false</code> by default","name":"withCloseButton","required":false,"type":{"name":"boolean"}}}},"Anchor":{"props":{"color":{"description":"@deprecated Use <code>c</code> prop instead","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"description":"Gradient configuration, ignored when <code>variant</code> is not <code>gradient</code>, <code>theme.defaultGradient</code> by default","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"inherit":{"description":"Determines whether font properties should be inherited from the parent, <code>false</code> by default","name":"inherit","required":false,"type":{"name":"boolean"}},"inline":{"description":"Sets <code>line-height</code> to 1 for centering, <code>false</code> by default","name":"inline","required":false,"type":{"name":"boolean"}},"lineClamp":{"description":"Number of lines after which Text will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"size":{"description":"Controls <code>font-size</code> and <code>line-height</code>, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"truncate":{"description":"Side on which Text must be truncated, if <code>true</code>, text in truncated from the start","name":"truncate","required":false,"type":{"name":"TextTruncate"}},"underline":{"description":"Determines in which cases link should have <code>text-decoration: underline</code> styles, <code>hover</code> by default","name":"underline","required":false,"type":{"name":"\\"always\\" | \\"hover\\" | \\"never\\"","raw":"\\"always\\" | \\"hover\\" | \\"never\\" | undefined","value":[{"value":"undefined"},{"value":"\\"always\\""},{"value":"\\"hover\\""},{"value":"\\"never\\""}]}}}},"AppShell":{"props":{"aside":{"description":"AppShell.Aside configuration, controls width, breakpoints and collapsed state. Required if you use AppShell.Aside component.","name":"aside","required":false,"type":{"name":"AppShellAsideConfiguration"}},"disabled":{"description":"If set, Navbar, Aside, Header and Footer components be hidden","name":"disabled","required":false,"type":{"name":"boolean"}},"footer":{"description":"AppShell.Footer configuration, controls height, offset and collapsed state. Required if you use AppShell.Footer component.","name":"footer","required":false,"type":{"name":"AppShellFooterConfiguration"}},"header":{"description":"AppShell.Header configuration, controls height, offset and collapsed state. Required if you use AppShell.Header component.","name":"header","required":false,"type":{"name":"AppShellHeaderConfiguration"}},"layout":{"description":"Determines how Navbar/Aside are arranged relative to Header/Footer, <code>default</code> by default","name":"layout","required":false,"type":{"name":"\\"default\\" | \\"alt\\"","raw":"\\"default\\" | \\"alt\\" | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"alt\\""}]}},"navbar":{"description":"AppShell.Navbar configuration, controls width, breakpoints and collapsed state. Required if you use AppShell.Navbar component.","name":"navbar","required":false,"type":{"name":"AppShellNavbarConfiguration"}},"offsetScrollbars":{"description":"Determines whether Header and Footer components should include styles to offset scrollbars. Based on <code>react-remove-scroll</code>. <code>true</code> by default","name":"offsetScrollbars","required":false,"type":{"name":"boolean"}},"padding":{"description":"Controls padding of the main section, <code>0</code> by default. !important!: use <code>padding</code> prop instead of <code>p</code>.","name":"padding","required":false,"type":{"name":"MantineSpacing | AppShellResponsiveSize"}},"transitionDuration":{"description":"Duration of all transitions in ms, <code>200</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"description":"Timing function of all transitions, <code>ease</code> by default","name":"transitionTimingFunction","required":false,"type":{"name":"TransitionTimingFunction"}},"withBorder":{"description":"Determines whether associated components should have a border, <code>true</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"<code>z-index</code> of all associated elements, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"AspectRatio":{"props":{"ratio":{"description":"Aspect ratio, e.g. <code>16 / 9</code>, <code>4 / 3</code>, <code>1920 / 1080</code>, <code>1</code> by default","name":"ratio","required":false,"type":{"name":"number"}}}},"Autocomplete":{"props":{"comboboxProps":{"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"description":"Data used to generate options","name":"data","required":false,"type":{"name":"ComboboxData"}},"defaultDropdownOpened":{"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"filter":{"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"onDropdownClose":{"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"(() => void)"}},"onDropdownOpen":{"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"(() => void)"}},"onOptionSubmit":{"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"((value: string) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"selectFirstOptionOnChange":{"description":"Determines whether the first option should be selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Avatar":{"props":{"alt":{"description":"Image <code>alt</code> attribute, also used as <code>title</code> attribute for placeholder","name":"alt","required":false,"type":{"name":"string"}},"children":{"description":"Avatar placeholder, displayed when <code>src={null}</code> or when the image cannot be loaded","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, default value is <code>theme.primaryColor</code>","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"description":"Gradient configuration used when <code>variant=\\"gradient\\"</code>, default value is <code>theme.defaultGradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"imageProps":{"description":"<code>img</code> tag attributes","name":"imageProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"img\\">"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>\'100%\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Width and height of the avatar, numbers are converted to rem, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"src":{"description":"Image url, if the image cannot be loaded or <code>src={null}</code>, then placeholder is displayed instead","name":"src","required":false,"type":{"name":"string | null"}}}},"BackgroundImage":{"props":{"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>0</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"src":{"description":"Image url","name":"src","required":true,"type":{"name":"string"}}}},"Badge":{"props":{"children":{"description":"Main badge content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"fullWidth":{"description":"Determines whether Badge should take 100% of its parent width, <code>false</code> by default","name":"fullWidth","required":false,"type":{"name":"boolean"}},"gradient":{"description":"Gradient configuration used when <code>variant=\\"gradient\\"</code>, default value is <code>theme.defaultGradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"leftSection":{"description":"Content displayed on the left side of the badge label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>\'xl\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rightSection":{"description":"Content displayed on the right side of the badge label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"size":{"description":"Controls <code>font-size</code>, <code>height</code> and horizontal <code>padding</code>, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"Blockquote":{"props":{"cite":{"description":"Reference to a cited quote","name":"cite","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"icon":{"description":"Blockquote icon, displayed on the top left","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"iconSize":{"description":"Controls icon <code>width</code> and <code>height</code>, numbers are converted to rem, <code>40</code> by default","name":"iconSize","required":false,"type":{"name":"string | number"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}}}},"Breadcrumbs":{"props":{"children":{"description":"React nodes that should be separated with <code>separator</code>","name":"children","required":true,"type":{"name":"React.ReactNode"}},"separator":{"description":"Separator between children, <code>\'/\'</code> by default","name":"separator","required":false,"type":{"name":"React.ReactNode"}},"separatorMargin":{"description":"Controls spacing between separator and breadcrumb, <code>\'xs\'</code> by default","name":"separatorMargin","required":false,"type":{"name":"MantineSpacing"}}}},"Burger":{"props":{"color":{"description":"Key of <code>theme.colors</code> of any valid CSS value, by default <code>theme.white</code> in dark color scheme and <code>theme.black</code> in light","name":"color","required":false,"type":{"name":"MantineColor"}},"opened":{"description":"State of the burger, when <code>true</code> burger is transformed into X, <code>false</code> by default","name":"opened","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls burger <code>width</code> and <code>height</code>, numbers are converted to rem, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionDuration":{"description":"<code>transition-duration</code> property value in ms, <code>300</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"description":"<code>transition-timing-function</code> property value, <code>\'ease\'</code> by default","name":"transitionTimingFunction","required":false,"type":{"name":"string"}}}},"Button":{"props":{"children":{"description":"Button content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"description":"Indicates disabled state","name":"disabled","required":false,"type":{"name":"boolean"}},"fullWidth":{"description":"Determines whether button should take 100% width of its parent container, <code>false</code> by default","name":"fullWidth","required":false,"type":{"name":"boolean"}},"gradient":{"description":"Gradient configuration used when <code>variant=\\"gradient\\"</code>, default value is <code>theme.defaultGradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"justify":{"description":"Sets <code>justify-content</code> of <code>inner</code> element, can be used to change distribution of sections and label, <code>\'center\'</code> by default","name":"justify","required":false,"type":{"name":"JustifyContent"}},"leftSection":{"description":"Content displayed on the left side of the button label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"loaderProps":{"description":"Props added to the <code>Loader</code> component (only visible when <code>loading</code> prop is set)","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"description":"Determines whether the <code>Loader</code> component should be displayed over the button","name":"loading","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rightSection":{"description":"Content displayed on the right side of the button label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"size":{"description":"Controls button <code>height</code>, <code>font-size</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {}) | \\"compact-xs\\" | \\"compact-sm\\" | \\"compact-md\\" | \\"compact-lg\\" | \\"compact-xl\\""}}}},"Card":{"props":{"children":{"description":"Card content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"padding":{"description":"Controls <code>padding</code>, key of <code>theme.spacing</code> or any valid CSS value, <code>\'md\'</code> by default","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>, <code>none</code> by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"withBorder":{"description":"Determines whether the card should have border, border color depends on color scheme, <code>false</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"Center":{"props":{"children":{"description":"Content that should be centered vertically and horizontally","name":"children","required":false,"type":{"name":"React.ReactNode"}},"inline":{"description":"Determines whether <code>inline-flex</code> should be used instead of <code>flex</code>, <code>false</code> by default","name":"inline","required":false,"type":{"name":"boolean"}}}},"Checkbox":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set input background color in checked state, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"description":{"description":"Description displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"error":{"description":"Error displayed below the label","name":"error","required":false,"type":{"name":"React.ReactNode"}},"icon":{"description":"Icon rendered when checkbox has checked or indeterminate state","name":"icon","required":false,"type":{"name":"FC<{ indeterminate: boolean; className: string; }> | undefined"}},"iconColor":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set icon color, <code>theme.white</code> by default","name":"iconColor","required":false,"type":{"name":"MantineColor"}},"id":{"description":"Id used to bind input and label, if not passed, unique id will be generated instead","name":"id","required":false,"type":{"name":"string"}},"indeterminate":{"description":"Indeterminate state of checkbox, if set, <code>checked</code> prop is ignored","name":"indeterminate","required":false,"type":{"name":"boolean"}},"label":{"description":"Checkbox label","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"description":"Position of the label relative to the input, <code>\'right\'</code> by default","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius,</code> <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"description":"Assigns ref of the root element, can be used with <code>Tooltip</code> and other similar components","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"description":"Controls size of all elements","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Chip":{"props":{"checked":{"description":"Checked state for controlled component","name":"checked","required":false,"type":{"name":"boolean"}},"children":{"description":"Chip label","name":"children","required":true,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultChecked":{"description":"Default checked state for uncontrolled component","name":"defaultChecked","required":false,"type":{"name":"boolean"}},"icon":{"description":"Replaces default icon","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"id":{"description":"Static id to bind input with label, by default id is randomly generated","name":"id","required":false,"type":{"name":"string"}},"onChange":{"description":"Calls when checked state changes","name":"onChange","required":false,"type":{"name":"((checked: boolean) => void)"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>\'xl\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"description":"Assigns ref of the root element, can be used with <code>Tooltip</code> and other similar components","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"description":"Controls various properties related to component size, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"description":"Chip input type, <code>\'checkbox\'</code> by default","name":"type","required":false,"type":{"name":"\\"checkbox\\" | \\"radio\\"","raw":"\\"checkbox\\" | \\"radio\\" | undefined","value":[{"value":"undefined"},{"value":"\\"checkbox\\""},{"value":"\\"radio\\""}]}},"wrapperProps":{"description":"Props passed down to the wrapper element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"CloseButton":{"props":{"children":{"description":"Content rendered inside the button, for example <code>VisuallyHidden</code> with label for screen readers","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"description":"Sets <code>disabled</code> and <code>data-disabled</code> attributes on the button element","name":"disabled","required":false,"type":{"name":"boolean"}},"iconSize":{"description":"<code>X</code> icon <code>width</code> and <code>height</code>, <code>80%</code> by default","name":"iconSize","required":false,"type":{"name":"string | number"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem. <code>theme.defaultRadius</code> by default.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls width and height of the button. Numbers are converted to rem. <code>\'md\'</code> by default.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Code":{"props":{"block":{"description":"If set code will be rendered inside <code>pre</code>, <code>false</code> by default","name":"block","required":false,"type":{"name":"boolean"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, controls <code>background-color</code> of the code, by default value is calculated based on color scheme","name":"color","required":false,"type":{"name":"MantineColor"}}}},"Collapse":{"props":{"animateOpacity":{"description":"Determines whether opacity should be animated, <code>true</code> by default","name":"animateOpacity","required":false,"type":{"name":"boolean"}},"in":{"description":"Opened state","name":"in","required":true,"type":{"name":"boolean"}},"onTransitionEnd":{"description":"Called each time transition ends","name":"onTransitionEnd","required":false,"type":{"name":"(() => void)"}},"transitionDuration":{"description":"Transition duration in ms, <code>200</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"description":"Transition timing function, default value is <code>ease</code>","name":"transitionTimingFunction","required":false,"type":{"name":"string"}}}},"ColorInput":{"props":{"closeOnColorSwatchClick":{"description":"Determines whether the dropdown should be closed when one of the color swatches is clicked, <code>false</code> by default","name":"closeOnColorSwatchClick","required":false,"type":{"name":"boolean"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"disallowInput":{"description":"If input is not allowed, the user can only pick value with color picker and swatches, <code>false</code> by default","name":"disallowInput","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"eyeDropperButtonProps":{"description":"Props passed down to the eye dropper button","name":"eyeDropperButtonProps","required":false,"type":{"name":"Record<string, any>"}},"eyeDropperIcon":{"description":"An icon that will replace the default eye dropper icon","name":"eyeDropperIcon","required":false,"type":{"name":"React.ReactNode"}},"fixOnBlur":{"description":"Determines whether the input value should be reset to the last known valid value when the input loses focus, <code>true</code> by default","name":"fixOnBlur","required":false,"type":{"name":"boolean"}},"format":{"description":"Color format, <code>\'hex\'</code> by default","name":"format","required":false,"type":{"name":"ColorFormat","raw":"ColorFormat | undefined","value":[{"value":"undefined"},{"value":"\\"hex\\""},{"value":"\\"hexa\\""},{"value":"\\"rgba\\""},{"value":"\\"rgb\\""},{"value":"\\"hsl\\""},{"value":"\\"hsla\\""}]}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"onChange":{"description":"Called when color changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"onChangeEnd":{"description":"Called when user stops dragging or changes value with arrow keys","name":"onChangeEnd","required":false,"type":{"name":"((value: string) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props passed down to the Popover component","name":"popoverProps","required":false,"type":{"name":"PopoverProps"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"swatches":{"description":"Color swatches","name":"swatches","required":false,"type":{"name":"string[]"}},"swatchesPerRow":{"description":"Number of swatches displayed in one row, <code>7</code> by default","name":"swatchesPerRow","required":false,"type":{"name":"number"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withEyeDropper":{"description":"Determines whether eye dropper button should be displayed in the right section, <code>true</code> by default","name":"withEyeDropper","required":false,"type":{"name":"boolean"}},"withPicker":{"description":"Determines whether color picker should be displayed, <code>true</code> by default","name":"withPicker","required":false,"type":{"name":"boolean"}},"withPreview":{"description":"Determines whether the preview color swatch should be displayed in the left section of the input, <code>true</code> by default","name":"withPreview","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"ColorPicker":{"props":{"alphaLabel":{"description":"Alpha slider <code>aria-label</code>","name":"alphaLabel","required":false,"type":{"name":"string"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"focusable":{"description":"Determines whether interactive elements should be focusable, <code>true</code> by default","name":"focusable","required":false,"type":{"name":"boolean"}},"format":{"description":"Color format, <code>\'hex\'</code> by default","name":"format","required":false,"type":{"name":"ColorFormat","raw":"ColorFormat | undefined","value":[{"value":"undefined"},{"value":"\\"hex\\""},{"value":"\\"hexa\\""},{"value":"\\"rgba\\""},{"value":"\\"rgb\\""},{"value":"\\"hsl\\""},{"value":"\\"hsla\\""}]}},"fullWidth":{"description":"Determines whether component should take 100% width of its container, <code>false</code> by default","name":"fullWidth","required":false,"type":{"name":"boolean"}},"hueLabel":{"description":"Hue slider <code>aria-label</code>","name":"hueLabel","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when color changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"onChangeEnd":{"description":"Called when user stops dragging or changes value with arrow keys","name":"onChangeEnd","required":false,"type":{"name":"((value: string) => void)"}},"onColorSwatchClick":{"description":"Called when one of the color swatches is clicked","name":"onColorSwatchClick","required":false,"type":{"name":"((color: string) => void)"}},"saturationLabel":{"description":"Saturation slider <code>aria-label</code>","name":"saturationLabel","required":false,"type":{"name":"string"}},"size":{"description":"Controls size of hue, alpha and saturation sliders, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"swatches":{"description":"Color swatches","name":"swatches","required":false,"type":{"name":"string[]"}},"swatchesPerRow":{"description":"Number of swatches displayed in one row, <code>7</code> by default","name":"swatchesPerRow","required":false,"type":{"name":"number"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withPicker":{"description":"Determines whether color picker should be displayed, <code>true</code> by default","name":"withPicker","required":false,"type":{"name":"boolean"}}}},"ColorSwatch":{"props":{"children":{"description":"Content rendered inside the swatch","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Color to display, not related to <code>theme.colors</code> – supports only CSS color values","name":"color","required":true,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls <code>width</code> and <code>height</code> of the swatch, any valid CSS value, numbers are converted to rem","name":"size","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"withShadow":{"description":"Determines whether the swatch should have inner <code>box-shadow</code>, <code>true</code> by default","name":"withShadow","required":false,"type":{"name":"boolean"}}}},"Combobox":{"props":{"arrowOffset":{"description":"Arrow offset in px, <code>5</code> by default","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"description":"Arrow <code>border-radius</code> in px, <code>0</code> by default","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"description":"Arrow size in px, <code>7</code> by default","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"description":"Combobox content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownPadding":{"description":"Controls <code>padding</code> of the dropdown, <code>4</code> by default","name":"dropdownPadding","required":false,"type":{"name":"Padding<string | number>"}},"keepMounted":{"description":"If set dropdown will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"description":"Floating ui middlewares to configure position handling, <code>{ flip: true, shift: true, inline: false }</code> by default","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"description":"Offset of the dropdown element, <code>8</code> by default","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onClose":{"description":"Called when dropdown closes","name":"onClose","required":false,"type":{"name":"(() => void)"}},"onOpen":{"description":"Called when dropdown opens","name":"onOpen","required":false,"type":{"name":"(() => void)"}},"onOptionSubmit":{"description":"Called when item is selected with <code>Enter</code> key or by clicking it","name":"onOptionSubmit","required":false,"type":{"name":"((value: string, optionProps: ComboboxOptionProps) => void)"}},"onPositionChange":{"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"((position: FloatingPosition) => void)"}},"portalProps":{"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Dropdown position relative to the target element, <code>\'bottom\'</code> by default","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"description":"<code>useEffect</code> dependencies to force update dropdown position, <code>[]</code> by default","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether Combobox value can be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"resetSelectionOnOptionHover":{"description":"Determines whether selection should be reset when option is hovered, <code>false</code> by default","name":"resetSelectionOnOptionHover","required":false,"type":{"name":"boolean"}},"returnFocus":{"description":"Determines whether focus should be automatically returned to control when dropdown closes, <code>false</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"description":"Controls items <code>font-size</code> and <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"store":{"description":"Combobox store, can be used to control combobox state","name":"store","required":false,"type":{"name":"ComboboxStore"}},"transitionProps":{"description":"Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type, <code>{ duration: 150, transition: \'fade\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"width":{"description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element, <code>\'max-content\'</code> by default","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"description":"Determines whether component should have an arrow, <code>false</code> by default","name":"withArrow","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether dropdown should be rendered within the <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Dropdown <code>z-index</code>, <code>300</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Combobox.Target":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"description":"Determines which events should be handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.\\n<code>input</code> by default.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"description":"Determines whether the target should have <code>aria-</code> attributes, <code>true</code> by default","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"description":"Determines whether the target should have <code>aria-expanded</code> attribute, <code>false</code> by default","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"description":"Determines whether component should respond to keyboard events, <code>true</code> by default","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"Combobox.Dropdown":{"props":{"hidden":{"description":"Determines whether the dropdown should be hidden, for example, when there are no options to display","name":"hidden","required":false,"type":{"name":"boolean"}}}},"Combobox.Options":{"props":{"labelledBy":{"description":"Id of the element that should label the options list","name":"labelledBy","required":false,"type":{"name":"string"}}}},"Combobox.Option":{"props":{"active":{"description":"Determines whether the option is selected","name":"active","required":false,"type":{"name":"boolean"}},"disabled":{"description":"Determines whether the option can be selected","name":"disabled","required":false,"type":{"name":"boolean"}},"selected":{"description":"Determines whether item is selected, useful for virtualized comboboxes","name":"selected","required":false,"type":{"name":"boolean"}},"value":{"description":"Option value","name":"value","required":true,"type":{"name":"string"}}}},"Combobox.Search":{"props":{"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Determines whether the input should have error styles and <code>aria-invalid</code> attribute","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"description":"Input element id","name":"id","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>, <code>false</code> by default","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Sets <code>required</code> attribute on the <code>input</code> element","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input, <code>true</code> by default","name":"withAria","required":false,"type":{"name":"boolean"}},"withAriaAttributes":{"description":"Determines whether the search input should have <code>aria-</code> attribute, <code>true</code> by default","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"description":"Determines whether the search input should handle keyboard navigation, <code>true</code> by default","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props added to the root element of the <code>Input</code> component","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Combobox.Empty":{"description":"","props":{}},"Combobox.Chevron":{"props":{"error":{"description":"","name":"error","required":false,"type":{"name":"React.ReactNode"}},"size":{"description":"","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"Combobox.Footer":{"description":"","props":{}},"Combobox.Header":{"description":"","props":{}},"Combobox.EventsTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"description":"Determines which events should be handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.\\n<code>input</code> by default.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"description":"Determines whether the target should have <code>aria-</code> attributes, <code>true</code> by default","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"description":"Determines whether the target should have <code>aria-expanded</code> attribute, <code>false</code> by default","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"description":"Determines whether component should respond to keyboard events, <code>true</code> by default","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"Combobox.DropdownTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"Combobox.Group":{"props":{"label":{"description":"Group label","name":"label","required":false,"type":{"name":"React.ReactNode"}}}},"Container":{"props":{"fluid":{"description":"Determines whether the container should take 100% of its parent width. If set, <code>size</code> prop is ignored. <code>false</code> by default.","name":"fluid","required":false,"type":{"name":"boolean"}},"size":{"description":"Sets <code>max-width</code> of the container, value is not responsive – it is the same for all screen sizes. Numbers are converted to rem. Ignored when <code>fluid</code> prop is set. <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"CopyButton":{"props":{"children":{"description":"Children callback, provides current status and copy function as an argument","name":"children","required":true,"type":{"name":"(payload: { copied: boolean; copy: () => void; }) => ReactNode"}},"timeout":{"description":"Copied status timeout in ms, <code>1000</code> by default","name":"timeout","required":false,"type":{"name":"number"}},"value":{"description":"Value that will be copied to the clipboard when the button is clicked","name":"value","required":true,"type":{"name":"string"}}}},"Dialog":{"props":{"children":{"description":"Dialog content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"keepMounted":{"description":"If set dialog will not be unmounted from the DOM when it is hidden, display: none styles will be added instead","name":"keepMounted","required":false,"type":{"name":"boolean"}},"onClose":{"description":"Called when the close button is clicked","name":"onClose","required":false,"type":{"name":"(() => void)"}},"opened":{"description":"Opened state","name":"opened","required":true,"type":{"name":"boolean"}},"portalProps":{"description":"Props to pass down to the <code>Portal</code> component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Affix position on screen, defaults value is <code>{ bottom: 0, right: 0 }</code>","name":"position","required":false,"type":{"name":"{ top?: string | number; left?: string | number | undefined; bottom?: string | number | undefined; right?: string | number | undefined; } | undefined"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>, <code>none</code> by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"description":"Controls <code>width</code> of the dialog, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionProps":{"description":"Overrides default transition, <code>{ transition: \'pop-top-right\', duration: 200 }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"withBorder":{"description":"Determines whether the paper should have border, border color depends on color scheme, <code>false</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}},"withCloseButton":{"description":"Determines whether the close button should be displayed, <code>true</code> by default","name":"withCloseButton","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether component should be rendered within portal, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Root element <code>z-index</code> property, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Divider":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color value, by default value depends on color scheme","name":"color","required":false,"type":{"name":"MantineColor"}},"label":{"description":"Divider label, visible only when <code>orientation</code> is <code>horizontal</code>","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"description":"Controls label position, <code>\'left\'</code> by default","name":"labelPosition","required":false,"type":{"name":"\\"center\\" | \\"left\\" | \\"right\\"","raw":"\\"center\\" | \\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"orientation":{"description":"Controls orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"size":{"description":"Controls width/height (depends on orientation), <code>\'xs\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Drawer":{"props":{"children":{"description":"Drawer content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeButtonProps":{"description":"Props passed down to the close button","name":"closeButtonProps","required":false,"type":{"name":"ModalBaseCloseButtonProps"}},"closeOnClickOutside":{"description":"Determines whether the modal/drawer should be closed when user clicks on the overlay, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether <code>onClose</code> should be called when user presses the escape key, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"id":{"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"description":"Determines whether scroll should be locked when <code>opened={true}</code>, <code>true</code> by default","name":"lockScroll","required":false,"type":{"name":"boolean"}},"offset":{"description":"Drawer container offset from the viewport end, <code>0</code> by default","name":"offset","required":false,"type":{"name":"string | number"}},"onClose":{"description":"Called when modal/drawer is closed","name":"onClose","required":true,"type":{"name":"() => void"}},"opened":{"description":"Determines whether modal/drawer is opened","name":"opened","required":true,"type":{"name":"boolean"}},"overlayProps":{"description":"Props passed down to the <code>Overlay</code> component, can be used to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding, <code>\'md\'</code> by default","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Side of the screen on which drawer will be opened, <code>\'left\'</code> by default","name":"position","required":false,"type":{"name":"DrawerPosition","raw":"DrawerPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>0</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"description":"Determines whether focus should be returned to the last active element when <code>onClose</code> is called, <code>true</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"description":"Scroll area component, native <code>div</code> element by default","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value, \'xl\' by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"description":"Controls width of the content area, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"title":{"description":"Drawer title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'pop\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped, <code>true</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"withCloseButton":{"description":"Determines whether the close button should be rendered, <code>true</code> by default","name":"withCloseButton","required":false,"type":{"name":"boolean"}},"withOverlay":{"description":"Determines whether the overlay should be rendered, <code>true</code> by default","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether the component should be rendered inside <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"<code>z-index</code> CSS property of the root element, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Fieldset":{"props":{"legend":{"description":"Fieldset legend","name":"legend","required":false,"type":{"name":"React.ReactNode"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}}}},"FileButton":{"props":{"accept":{"description":"File input accept attribute, for example, <code>\\"image/png,image/jpeg\\"</code>","name":"accept","required":false,"type":{"name":"string"}},"capture":{"description":"Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.","name":"capture","required":false,"type":{"name":"boolean | \\"user\\" | \\"environment\\""}},"children":{"description":"Function that receives button props and returns react node that should be rendered","name":"children","required":true,"type":{"name":"(props: { onClick: () => void; }) => ReactNode"}},"disabled":{"description":"Disables file picker","name":"disabled","required":false,"type":{"name":"boolean"}},"form":{"description":"Input form attribute","name":"form","required":false,"type":{"name":"string"}},"inputProps":{"description":"Passes down props to the input element used to capture files","name":"inputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"multiple":{"description":"Determines whether user can pick more than one file","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"description":"Input name attribute","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when files are picked","name":"onChange","required":true,"type":{"name":"(payload: Multiple extends true ? File[] : File | null) => void"}},"resetRef":{"description":"Reference of the function that should be called when value changes to null or empty array","name":"resetRef","required":false,"type":{"name":"ForwardedRef<() => void>"}}}},"FileInput":{"props":{"accept":{"description":"File input accept attribute, for example, \\"image/png,image/jpeg\\"","name":"accept","required":false,"type":{"name":"string"}},"capture":{"description":"Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.","name":"capture","required":false,"type":{"name":"boolean | \\"user\\" | \\"environment\\""}},"clearButtonProps":{"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether clear button should be displayed in the right section, <code>false</code> by default","name":"clearable","required":false,"type":{"name":"boolean"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"File | File[] | null"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"fileInputProps":{"description":"Props passed down to the hidden input element which is used to capture files","name":"fileInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"form":{"description":"Input form attribute","name":"form","required":false,"type":{"name":"string"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiple":{"description":"Determines whether user can pick more than one file, <code>false</code> by default","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"description":"Input name attribute","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((payload: Multiple extends true ? File[] : File | null) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Read only inputs value cannot be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"File | File[] | null"}},"valueComponent":{"description":"Value renderer, by default file name is rendered","name":"valueComponent","required":false,"type":{"name":"FC<{ value: File | File[] | null; }>"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Flex":{"props":{"align":{"description":"<code>align-items</code> CSS property","name":"align","required":false,"type":{"name":"StyleProp<AlignItems>"}},"columnGap":{"description":"<code>column-gap</code> CSS property","name":"columnGap","required":false,"type":{"name":"StyleProp<number | MantineSize | (string & {})>"}},"direction":{"description":"<code>flex-direction</code> CSS property","name":"direction","required":false,"type":{"name":"StyleProp<FlexDirection>"}},"gap":{"description":"<code>gap</code> CSS property","name":"gap","required":false,"type":{"name":"StyleProp<number | MantineSize | (string & {})>"}},"justify":{"description":"<code>justify-content</code> CSS property","name":"justify","required":false,"type":{"name":"StyleProp<JustifyContent>"}},"rowGap":{"description":"<code>row-gap</code> CSS property","name":"rowGap","required":false,"type":{"name":"StyleProp<number | MantineSize | (string & {})>"}},"wrap":{"description":"<code>flex-wrap</code> CSS property","name":"wrap","required":false,"type":{"name":"StyleProp<FlexWrap>"}}}},"FocusTrap":{"props":{"active":{"description":"Determines whether focus should be trapped within child element","name":"active","required":false,"type":{"name":"boolean"}},"children":{"description":"Element at which focus should be trapped, should support ref prop","name":"children","required":true,"type":{"name":"any"}},"refProp":{"description":"Prop that should be used to access component ref","name":"refProp","required":false,"type":{"name":"string"}}}},"Grid":{"props":{"align":{"description":"Sets <code>align-items</code>, <code>stretch</code> by default","name":"align","required":false,"type":{"name":"AlignItems"}},"columns":{"description":"Number of columns in each row, <code>12</code> by default","name":"columns","required":false,"type":{"name":"number"}},"grow":{"description":"Determines whether columns in the last row should expand to fill all available space, <code>false</code> by default","name":"grow","required":false,"type":{"name":"boolean"}},"gutter":{"description":"Gutter between columns, key of <code>theme.spacing</code> or any valid CSS value, <code>\'md\'</code> by default","name":"gutter","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"justify":{"description":"Sets <code>justify-content</code>, <code>flex-start</code> by default","name":"justify","required":false,"type":{"name":"JustifyContent"}},"overflow":{"description":"Sets <code>overflow</code> CSS property on the root element, <code>\'hidden\'</code> by default","name":"overflow","required":false,"type":{"name":"Overflow"}}}},"Group":{"props":{"align":{"description":"Controls <code>align-items</code> CSS property, <code>\'center\'</code> by default","name":"align","required":false,"type":{"name":"AlignItems"}},"gap":{"description":"Key of <code>theme.spacing</code> or any valid CSS value for <code>gap</code>, numbers are converted to rem, <code>\'md\'</code> by default","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"grow":{"description":"Determines whether each child element should have <code>flex-grow: 1</code> style, <code>false</code> by default","name":"grow","required":false,"type":{"name":"boolean"}},"justify":{"description":"Controls <code>justify-content</code> CSS property, <code>\'flex-start\'</code> by default","name":"justify","required":false,"type":{"name":"JustifyContent"}},"preventGrowOverflow":{"description":"Determines whether children should take only dedicated amount of space (<code>max-width</code> style is set based on the number of children), <code>true</code> by default","name":"preventGrowOverflow","required":false,"type":{"name":"boolean"}},"wrap":{"description":"Controls <code>flex-wrap</code> CSS property, <code>\'wrap\'</code> by default","name":"wrap","required":false,"type":{"name":"FlexWrap","raw":"FlexWrap | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"wrap\\""},{"value":"\\"nowrap\\""},{"value":"\\"wrap-reverse\\""}]}}}},"Highlight":{"props":{"children":{"description":"String parts of which must be highlighted","name":"children","required":true,"type":{"name":"string"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, passed to <code>Mark</code> component <code>color</code> prop, <code>yellow</code> by default","name":"color","required":false,"type":{"name":"string | (string & {})"}},"gradient":{"description":"Gradient configuration, ignored when <code>variant</code> is not <code>gradient</code>, <code>theme.defaultGradient</code> by default","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"highlight":{"description":"Substring or an array of substrings to highlight in <code>children</code>","name":"highlight","required":true,"type":{"name":"string | string[]"}},"highlightStyles":{"description":"Styles applied to <code>mark</code> elements","name":"highlightStyles","required":false,"type":{"name":"CSSProperties | ((theme: MantineTheme) => CSSProperties)"}},"inherit":{"description":"Determines whether font properties should be inherited from the parent, <code>false</code> by default","name":"inherit","required":false,"type":{"name":"boolean"}},"inline":{"description":"Sets <code>line-height</code> to 1 for centering, <code>false</code> by default","name":"inline","required":false,"type":{"name":"boolean"}},"lineClamp":{"description":"Number of lines after which Text will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"size":{"description":"Controls <code>font-size</code> and <code>line-height</code>, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"span":{"description":"Shorthand for <code>component=\\"span\\"</code>, <code>false</code> by default, default root element is <code>p</code>","name":"span","required":false,"type":{"name":"boolean"}},"truncate":{"description":"Side on which Text must be truncated, if <code>true</code>, text in truncated from the start","name":"truncate","required":false,"type":{"name":"TextTruncate"}}}},"HoverCard":{"props":{"arrowOffset":{"description":"Arrow offset in px, <code>5</code> by default","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"description":"Arrow <code>border-radius</code> in px, <code>0</code> by default","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"description":"Arrow size in px, <code>7</code> by default","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"description":"<code>Popover.Target</code> and <code>Popover.Dropdown</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clickOutsideEvents":{"description":"Events that trigger outside clicks","name":"clickOutsideEvents","required":false,"type":{"name":"string[]"}},"closeDelay":{"description":"Close delay in ms","name":"closeDelay","required":false,"type":{"name":"number"}},"closeOnClickOutside":{"description":"Determines whether dropdown should be closed on outside clicks, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether dropdown should be closed when <code>Escape</code> key is pressed, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"defaultOpened":{"description":"Initial opened state for uncontrolled component","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"id":{"description":"id base to create accessibility connections","name":"id","required":false,"type":{"name":"string"}},"initiallyOpened":{"description":"Initial opened state","name":"initiallyOpened","required":false,"type":{"name":"boolean"}},"keepMounted":{"description":"If set dropdown will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"description":"Floating ui middlewares to configure position handling, <code>{ flip: true, shift: true, inline: false }</code> by default","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"description":"Offset of the dropdown element, <code>8</code> by default","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onClose":{"description":"Called when dropdown is closed","name":"onClose","required":false,"type":{"name":"(() => void)"}},"onOpen":{"description":"Called when dropdown is opened","name":"onOpen","required":false,"type":{"name":"(() => void)"}},"onPositionChange":{"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"((position: FloatingPosition) => void)"}},"openDelay":{"description":"Open delay in ms","name":"openDelay","required":false,"type":{"name":"number"}},"portalProps":{"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Dropdown position relative to the target element, <code>\'bottom\'</code> by default","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"description":"<code>useEffect</code> dependencies to force update dropdown position, <code>[]</code> by default","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"description":"Determines whether focus should be automatically returned to control when dropdown closes, <code>false</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"description":"Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type, <code>{ duration: 150, transition: \'fade\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped within dropdown, <code>false</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"width":{"description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element, <code>\'max-content\'</code> by default","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"description":"Determines whether component should have an arrow, <code>false</code> by default","name":"withArrow","required":false,"type":{"name":"boolean"}},"withRoles":{"description":"Determines whether dropdown and target elements should have accessible roles, <code>true</code> by default","name":"withRoles","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether dropdown should be rendered within the <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Dropdown <code>z-index</code>, <code>300</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"HoverCard.Dropdown":{"props":{"children":{"description":"Dropdown content","name":"children","required":false,"type":{"name":"React.ReactNode"}}}},"Image":{"props":{"fallbackSrc":{"description":"Image url that will be used as a fallback in case <code>src</code> prop is not set or image cannot be loaded","name":"fallbackSrc","required":false,"type":{"name":"string"}},"fit":{"description":"Controls <code>object-fit</code> style, <code>\'cover\'</code> by default","name":"fit","required":false,"type":{"name":"ObjectFit","raw":"ObjectFit | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"contain\\""},{"value":"\\"cover\\""},{"value":"\\"fill\\""},{"value":"\\"scale-down\\""}]}},"onError":{"description":"Called when image fails to load","name":"onError","required":false,"type":{"name":"((event: SyntheticEvent<HTMLImageElement, Event>) => void)"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>0</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"src":{"description":"Image url","name":"src","required":false,"type":{"name":"any"}}}},"Indicator":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color value, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"description":"When Indicator is disabled it renders children only","name":"disabled","required":false,"type":{"name":"boolean"}},"inline":{"description":"Determines whether the indicator container should be an inline element, <code>false</code> by default","name":"inline","required":false,"type":{"name":"boolean"}},"label":{"description":"Label rendered inside the indicator, for example, notification count","name":"label","required":false,"type":{"name":"React.ReactNode"}},"offset":{"description":"Indicator offset relative to the target element, usually used for elements with border-radius, equals to <code>size</code> by default","name":"offset","required":false,"type":{"name":"number"}},"position":{"description":"Indicator position relative to the target element, <code>\'top-end\'</code> by default","name":"position","required":false,"type":{"name":"\\"bottom-end\\" | \\"bottom-start\\" | \\"top-end\\" | \\"top-start\\" | \\"bottom-center\\" | \\"top-center\\" | \\"middle-center\\" | \\"middle-end\\" | \\"middle-start\\"","raw":"\\"bottom-end\\" | \\"bottom-start\\" | \\"top-end\\" | \\"top-start\\" | \\"bottom-center\\" | \\"top-center\\" | \\"middle-center\\" | \\"middle-end\\" | \\"middle-start\\" | undefined","value":[{"value":"undefined"},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""},{"value":"\\"bottom-center\\""},{"value":"\\"top-center\\""},{"value":"\\"middle-center\\""},{"value":"\\"middle-end\\""},{"value":"\\"middle-start\\""}]}},"processing":{"description":"Determines whether the indicator should have processing animation, <code>false</code> by default","name":"processing","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>100</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Indicator width and height, <code>10</code> by default","name":"size","required":false,"type":{"name":"string | number"}},"withBorder":{"description":"Determines whether the indicator should have a border (color of the border is the same as the body element), <code>false</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Indicator z-index, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"InlineInput":{"props":{"description":{"description":"","name":"description","required":true,"type":{"name":"React.ReactNode"}},"disabled":{"description":"","name":"disabled","required":true,"type":{"name":"boolean"}},"error":{"description":"","name":"error","required":true,"type":{"name":"React.ReactNode"}},"id":{"description":"","name":"id","required":true,"type":{"name":"string"}},"label":{"description":"","name":"label","required":true,"type":{"name":"React.ReactNode"}},"labelPosition":{"description":"","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"size":{"description":"","name":"size","required":true,"type":{"name":"MantineSize | (string & {})"}}}},"Input":{"props":{"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Determines whether the input should have error styles and <code>aria-invalid</code> attribute","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"description":"Input element id","name":"id","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>, <code>false</code> by default","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Sets <code>required</code> attribute on the <code>input</code> element","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input, <code>true</code> by default","name":"withAria","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props added to the root element of the <code>Input</code> component","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"InputBase":{"props":{"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>, <code>false</code> by default","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input, <code>true</code> by default","name":"withAria","required":false,"type":{"name":"boolean"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element (<code>Input.Wrapper</code> component)","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"InputsGroupFieldset":{"props":{"role":{"description":"","name":"role","required":true,"type":{"name":"\\"group\\" | \\"radiogroup\\"","raw":"\\"group\\" | \\"radiogroup\\"","value":[{"value":"\\"group\\""},{"value":"\\"radiogroup\\""}]}}}},"JsonInput":{"props":{"autosize":{"description":"Determines whether the textarea height should grow with its content, <code>false</code> by default","name":"autosize","required":false,"type":{"name":"boolean"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"deserialize":{"description":"Function to deserialize string value, used for value formatting and input JSON validation, must throw error if string cannot be processed, <code>JSON.parse</code> by default","name":"deserialize","required":false,"type":{"name":"((text: string, reviver?: ((this: any, key: string, value: any) => any)) => any) | undefined"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"formatOnBlur":{"description":"Determines whether the value should be formatted on blur, <code>false</code> by default","name":"formatOnBlur","required":false,"type":{"name":"boolean"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"maxRows":{"description":"Maximum rows for autosize textarea to grow, ignored if <code>autosize</code> prop is not set","name":"maxRows","required":false,"type":{"name":"number"}},"minRows":{"description":"Minimum rows of autosize textarea, ignored if <code>autosize</code> prop is not set","name":"minRows","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"serialize":{"description":"Function to serialize value into a string, used for value formatting, <code>JSON.stringify</code> by default","name":"serialize","required":false,"type":{"name":"{ (value: any, replacer?: ((this: any, key: string, value: any) => any), space?: string | number | undefined): string; (value: any, replacer?: (string | number)[] | null | undefined, space?: string | ... 1 more ... | undefined): string; } | undefined"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"validationError":{"description":"Error message displayed when value is not valid JSON","name":"validationError","required":false,"type":{"name":"React.ReactNode"}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Kbd":{"props":{"size":{"description":"Controls font-size and padding, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"List":{"props":{"center":{"description":"Determines whether items must be centered with their icon, <code>false</code> by default","name":"center","required":false,"type":{"name":"boolean"}},"children":{"description":"<code>List.Item</code> components only","name":"children","required":false,"type":{"name":"React.ReactNode"}},"icon":{"description":"Icon that replaces list item dot","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"listStyleType":{"description":"Controls <code>list-style-type</code>, by default inferred from <code>type</code>","name":"listStyleType","required":false,"type":{"name":"ListStyleType"}},"size":{"description":"Controls <code>font-size</code> and <code>line-height</code>, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"spacing":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set spacing between items, <code>0</code> by default","name":"spacing","required":false,"type":{"name":"MantineSpacing"}},"type":{"description":"List type: <code>ol</code> or <code>ul</code>, <code>\'unordered\'</code> by default","name":"type","required":false,"type":{"name":"\\"ordered\\" | \\"unordered\\"","raw":"\\"ordered\\" | \\"unordered\\" | undefined","value":[{"value":"undefined"},{"value":"\\"ordered\\""},{"value":"\\"unordered\\""}]}},"withPadding":{"description":"Determines whether list items should be offset with padding, <code>false</code> by default","name":"withPadding","required":false,"type":{"name":"boolean"}}}},"Loader":{"props":{"children":{"description":"Overrides default loader with given content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, default value is <code>theme.primaryColor</code>","name":"color","required":false,"type":{"name":"MantineColor"}},"loaders":{"description":"Object of loaders components, can be customized via default props or inline. Default value contains <code>bars</code>, <code>oval</code> and <code>dots</code>","name":"loaders","required":false,"type":{"name":"Partial<Record<(string & {}) | \\"bars\\" | \\"dots\\" | \\"oval\\", MantineLoaderComponent>>"}},"size":{"description":"Controls <code>width</code> and <code>height</code> of the loader. <code>Loader</code> has predefined <code>xs</code>-<code>xl</code> values. Numbers are converted to rem. Default value is <code>\'md\'</code>","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"type":{"description":"Loader type, key of <code>loaders</code> prop, default value is <code>\'oval\'</code>","name":"type","required":false,"type":{"name":"(string & {}) | \\"bars\\" | \\"dots\\" | \\"oval\\""}}}},"LoadingOverlay":{"props":{"loaderProps":{"description":"Props passed down to <code>Loader</code> component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"overlayProps":{"description":"Props passed down to <code>Overlay</code> component","name":"overlayProps","required":false,"type":{"name":"OverlayProps"}},"transitionProps":{"description":"Props passed down to <code>Transition</code> component, <code>{ transition: \'fade\', duration: 0 }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"visible":{"description":"Determines whether the overlay should be visible, <code>false</code> by default","name":"visible","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Controls overlay <code>z-index</code>, <code>400</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Mark":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, <code>yellow</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}}}},"Menu":{"props":{"arrowOffset":{"description":"Arrow offset in px, <code>5</code> by default","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"description":"Arrow <code>border-radius</code> in px, <code>0</code> by default","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"description":"Arrow size in px, <code>7</code> by default","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"description":"Menu content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clickOutsideEvents":{"description":"Events that trigger outside clicks","name":"clickOutsideEvents","required":false,"type":{"name":"string[]"}},"closeDelay":{"description":"Close delay in ms, applicable only to trigger=\\"hover\\" variant","name":"closeDelay","required":false,"type":{"name":"number"}},"closeOnClickOutside":{"description":"Determines whether dropdown should be closed on outside clicks, default to true","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether dropdown should be closed when Escape key is pressed, defaults to true","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"closeOnItemClick":{"description":"Determines whether Menu should be closed when item is clicked","name":"closeOnItemClick","required":false,"type":{"name":"boolean"}},"defaultOpened":{"description":"Uncontrolled menu initial opened state","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"id":{"description":"id base to create accessibility connections","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set dropdown will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"loop":{"description":"Determines whether arrow key presses should loop though items (first to last and last to first)","name":"loop","required":false,"type":{"name":"boolean"}},"middlewares":{"description":"Floating ui middlewares to configure position handling, <code>{ flip: true, shift: true, inline: false }</code> by default","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"description":"Offset of the dropdown element, <code>8</code> by default","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onChange":{"description":"Called when menu opened state changes","name":"onChange","required":false,"type":{"name":"((opened: boolean) => void)"}},"onClose":{"description":"Called when Menu is closed","name":"onClose","required":false,"type":{"name":"(() => void)"}},"onOpen":{"description":"Called when Menu is opened","name":"onOpen","required":false,"type":{"name":"(() => void)"}},"onPositionChange":{"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"((position: FloatingPosition) => void)"}},"openDelay":{"description":"Open delay in ms, applicable only to trigger=\\"hover\\" variant","name":"openDelay","required":false,"type":{"name":"number"}},"opened":{"description":"Controlled menu opened state","name":"opened","required":false,"type":{"name":"boolean"}},"portalProps":{"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Dropdown position relative to the target element, <code>\'bottom\'</code> by default","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"description":"<code>useEffect</code> dependencies to force update dropdown position, <code>[]</code> by default","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"description":"Determines whether focus should be automatically returned to control when dropdown closes, <code>false</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"description":"Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type, <code>{ duration: 150, transition: \'fade\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trigger":{"description":"Event which should open menu","name":"trigger","required":false,"type":{"name":"\\"hover\\" | \\"click\\" | \\"click-hover\\"","raw":"\\"hover\\" | \\"click\\" | \\"click-hover\\" | undefined","value":[{"value":"undefined"},{"value":"\\"hover\\""},{"value":"\\"click\\""},{"value":"\\"click-hover\\""}]}},"width":{"description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element, <code>\'max-content\'</code> by default","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"description":"Determines whether component should have an arrow, <code>false</code> by default","name":"withArrow","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether dropdown should be rendered within the <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Dropdown <code>z-index</code>, <code>300</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Menu.Item":{"props":{"children":{"description":"Item label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeMenuOnClick":{"description":"Determines whether the menu should be closed when the item is clicked, overrides <code>closeOnItemClick</code> prop on the <code>Menu</code> component","name":"closeMenuOnClick","required":false,"type":{"name":"boolean"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"description":"Disables item","name":"disabled","required":false,"type":{"name":"boolean"}},"leftSection":{"description":"Section displayed on the left side of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"description":"Section displayed on the right side of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"Menu.Label":{"description":"","props":{}},"Menu.Dropdown":{"description":"","props":{}},"Menu.Divider":{"description":"","props":{}},"Modal":{"props":{"centered":{"description":"Determines whether the modal should be centered vertically, <code>false</code> by default","name":"centered","required":false,"type":{"name":"boolean"}},"children":{"description":"Modal content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeButtonProps":{"description":"Props passed down to the close button","name":"closeButtonProps","required":false,"type":{"name":"ModalBaseCloseButtonProps"}},"closeOnClickOutside":{"description":"Determines whether the modal/drawer should be closed when user clicks on the overlay, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether <code>onClose</code> should be called when user presses the escape key, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"fullScreen":{"description":"Determines whether the modal should take the entire screen, <code>false</code> by default","name":"fullScreen","required":false,"type":{"name":"boolean"}},"id":{"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"description":"Determines whether scroll should be locked when <code>opened={true}</code>, <code>true</code> by default","name":"lockScroll","required":false,"type":{"name":"boolean"}},"onClose":{"description":"Called when modal/drawer is closed","name":"onClose","required":true,"type":{"name":"() => void"}},"opened":{"description":"Determines whether modal/drawer is opened","name":"opened","required":true,"type":{"name":"boolean"}},"overlayProps":{"description":"Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding, <code>\'md\'</code> by default","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"description":"Determines whether focus should be returned to the last active element when <code>onClose</code> is called, <code>true</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"description":"Scroll area component, native <code>div</code> element by default","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value, \'xl\' by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"description":"Controls width of the content area, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"title":{"description":"Modal title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'pop\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped, <code>true</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"withCloseButton":{"description":"Determines whether the close button should be rendered, <code>true</code> by default","name":"withCloseButton","required":false,"type":{"name":"boolean"}},"withOverlay":{"description":"Determines whether the overlay should be rendered, <code>true</code> by default","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether the component should be rendered inside <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"xOffset":{"description":"Left/right modal offset, <code>5vw</code> by default","name":"xOffset","required":false,"type":{"name":"MarginLeft<string | number>"}},"yOffset":{"description":"Top/bottom modal offset, <code>5dvh</code> by default","name":"yOffset","required":false,"type":{"name":"MarginTop<string | number>"}},"zIndex":{"description":"<code>z-index</code> CSS property of the root element, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"ModalBase":{"props":{"children":{"description":"Modal/drawer content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeOnClickOutside":{"description":"Determines whether the modal/drawer should be closed when user clicks on the overlay, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether <code>onClose</code> should be called when user presses the escape key, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"id":{"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"description":"Determines whether scroll should be locked when <code>opened={true}</code>, <code>true</code> by default","name":"lockScroll","required":false,"type":{"name":"boolean"}},"onClose":{"description":"Called when modal/drawer is closed","name":"onClose","required":true,"type":{"name":"() => void"}},"opened":{"description":"Determines whether modal/drawer is opened","name":"opened","required":true,"type":{"name":"boolean"}},"padding":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding, <code>\'md\'</code> by default","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"removeScrollProps":{"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"description":"Determines whether focus should be returned to the last active element when <code>onClose</code> is called, <code>true</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value, \'xl\' by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"size":{"description":"Controls width of the content area, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"transitionProps":{"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'pop\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped, <code>true</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether the component should be rendered inside <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"<code>z-index</code> CSS property of the root element, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"MultiSelect":{"props":{"checkIconPosition":{"description":"Position of the check icon relative to the option label, <code>\'left\'</code> by default","name":"checkIconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"clearButtonProps":{"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"(__CloseButtonProps & ElementProps<\\"button\\">)"}},"clearable":{"description":"Determines whether the clear button should be displayed in the right section when the component has value, <code>false</code> by default","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"description":"Data used to generate options","name":"data","required":false,"type":{"name":"ComboboxData"}},"defaultDropdownOpened":{"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultSearchValue":{"description":"Default search value","name":"defaultSearchValue","required":false,"type":{"name":"string"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"filter":{"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"hiddenInputProps":{"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"hiddenInputValuesDivider":{"description":"Divider used to separate values in the hidden input <code>value</code> attribute, <code>\',\'</code> by default","name":"hiddenInputValuesDivider","required":false,"type":{"name":"string"}},"hidePickedOptions":{"description":"Determines whether picked options should be removed from the options list, <code>false</code> by default","name":"hidePickedOptions","required":false,"type":{"name":"boolean"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"maxValues":{"description":"Maximum number of values, <code>Infinity</code> by default","name":"maxValues","required":false,"type":{"name":"number"}},"nothingFoundMessage":{"description":"Message displayed when no option matched current search query, only applicable when <code>searchable</code> prop is set","name":"nothingFoundMessage","required":false,"type":{"name":"React.ReactNode"}},"onChange":{"description":"Called whe value changes","name":"onChange","required":false,"type":{"name":"((value: string[]) => void)"}},"onDropdownClose":{"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"(() => void)"}},"onDropdownOpen":{"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"(() => void)"}},"onOptionSubmit":{"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"((value: string) => void)"}},"onSearchChange":{"description":"Called when search changes","name":"onSearchChange","required":false,"type":{"name":"((value: string) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"searchValue":{"description":"Controlled search value","name":"searchValue","required":false,"type":{"name":"string"}},"searchable":{"description":"Determines whether the select should be searchable, <code>false</code> by default","name":"searchable","required":false,"type":{"name":"boolean"}},"selectFirstOptionOnChange":{"description":"Determines whether the first option should be selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCheckIcon":{"description":"Determines whether check icon should be displayed near the selected option label, <code>true</code> by default","name":"withCheckIcon","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"NativeSelect":{"props":{"data":{"description":"Data used to render options, can be replaced with <code>children</code>","name":"data","required":false,"type":{"name":"ComboboxData"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"NavLink":{"props":{"active":{"description":"Determines whether the link should have active styles, <code>false</code> by default","name":"active","required":false,"type":{"name":"boolean"}},"children":{"description":"Child <code>NavLink</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"childrenOffset":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set collapsed links padding-left, <code>\'lg\'</code> by default","name":"childrenOffset","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"color":{"description":"Key of <code>theme.colors</code> of any valid CSS color to control active styles, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultOpened":{"description":"Uncontrolled nested items collapse initial state","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"description":{"description":"Link description","name":"description","required":false,"type":{"name":"React.ReactNode"}},"disableRightSectionRotation":{"description":"If set, right section will not be rotated when collapse is opened, <code>false</code> by default","name":"disableRightSectionRotation","required":false,"type":{"name":"boolean"}},"disabled":{"description":"If set, disabled styles will be added to the root element, <code>false</code> by default","name":"disabled","required":false,"type":{"name":"boolean"}},"label":{"description":"Link content","name":"label","required":false,"type":{"name":"React.ReactNode"}},"leftSection":{"description":"Section displayed on the left side of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"noWrap":{"description":"If set, label and description will not wrap to the next line, <code>false</code> by default","name":"noWrap","required":false,"type":{"name":"boolean"}},"onChange":{"description":"Called when open state changes","name":"onChange","required":false,"type":{"name":"((opened: boolean) => void)"}},"onClick":{"description":"Called when the link is clicked","name":"onClick","required":false,"type":{"name":"((event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void)"}},"opened":{"description":"Controlled nested items collapse state","name":"opened","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Section displayed on the right side of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"Notification":{"props":{"children":{"description":"Notification body, place main text here","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeButtonProps":{"description":"Props passed down to the close button","name":"closeButtonProps","required":false,"type":{"name":"Record<string, any>"}},"color":{"description":"Controls notification line or icon color, key of <code>theme.colors</code> or any valid CSS color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"icon":{"description":"Notification icon, replaces color line","name":"icon","required":false,"type":{"name":"React.ReactNode"}},"loading":{"description":"Replaces colored line or icon with Loader component","name":"loading","required":false,"type":{"name":"boolean"}},"onClose":{"description":"Called when close button is clicked","name":"onClose","required":false,"type":{"name":"(() => void)"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"title":{"description":"Notification title, displayed before body","name":"title","required":false,"type":{"name":"React.ReactNode"}},"withBorder":{"description":"Determines whether notification should have a border, <code>false</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}},"withCloseButton":{"description":"Determines whether close button should be visible, <code>true</code> by default","name":"withCloseButton","required":false,"type":{"name":"boolean"}}}},"NumberFormatter":{"props":{"allowNegative":{"description":"Determines whether negative values are allowed, <code>true</code> by default","name":"allowNegative","required":false,"type":{"name":"boolean"}},"decimalScale":{"description":"Limits the number of digits that are displayed after the decimal point, by default there is no limit","name":"decimalScale","required":false,"type":{"name":"number"}},"decimalSeparator":{"description":"Character used as a decimal separator, <code>\'.\'</code> by default","name":"decimalSeparator","required":false,"type":{"name":"string"}},"fixedDecimalScale":{"description":"If set, 0s are added after <code>decimalSeparator</code> to match given <code>decimalScale</code>. <code>false</code> by default","name":"fixedDecimalScale","required":false,"type":{"name":"boolean"}},"prefix":{"description":"Prefix added before the value","name":"prefix","required":false,"type":{"name":"string"}},"suffix":{"description":"Suffix added after the value","name":"suffix","required":false,"type":{"name":"string"}},"thousandSeparator":{"description":"A character used to separate thousands, <code>\',\'</code> by default","name":"thousandSeparator","required":false,"type":{"name":"string | boolean"}},"thousandsGroupStyle":{"description":"Defines the thousand grouping style","name":"thousandsGroupStyle","required":false,"type":{"name":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\"","raw":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"thousand\\""},{"value":"\\"lakh\\""},{"value":"\\"wan\\""}]}},"value":{"description":"Value to format","name":"value","required":false,"type":{"name":"string | number"}}}},"NumberInput":{"props":{"allowDecimal":{"description":"Determines whether decimal values are allowed, <code>true</code> by default","name":"allowDecimal","required":false,"type":{"name":"boolean"}},"allowLeadingZeros":{"description":"Determines whether leading zeros are allowed. If not set, leading zeros are removed when the input is blurred. <code>false</code> by default","name":"allowLeadingZeros","required":false,"type":{"name":"boolean"}},"allowNegative":{"description":"Determines whether negative values are allowed, <code>true</code> by default","name":"allowNegative","required":false,"type":{"name":"boolean"}},"allowedDecimalSeparators":{"description":"Characters which when pressed result in a decimal separator, <code>[\'.\']</code> by default","name":"allowedDecimalSeparators","required":false,"type":{"name":"string[]"}},"clampBehavior":{"description":"Controls how value is clamped, <code>strict</code> – user is not allowed to enter values that are not in <code>[min, max]</code> range, <code>blur</code> – user is allowed to enter any values, but the value is clamped when the input loses focus (default behavior), <code>none</code> – lifts all restrictions, <code>[min, max]</code> range is applied only for controls and up/down keys","name":"clampBehavior","required":false,"type":{"name":"\\"none\\" | \\"blur\\" | \\"strict\\"","raw":"\\"none\\" | \\"blur\\" | \\"strict\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"blur\\""},{"value":"\\"strict\\""}]}},"decimalScale":{"description":"Limits the number of digits that can be entered after the decimal point","name":"decimalScale","required":false,"type":{"name":"number"}},"decimalSeparator":{"description":"Character used as a decimal separator, <code>\'.\'</code> by default","name":"decimalSeparator","required":false,"type":{"name":"string"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | number"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"fixedDecimalScale":{"description":"If set, 0s are added after <code>decimalSeparator</code> to match given <code>decimalScale</code>. <code>false</code> by default","name":"fixedDecimalScale","required":false,"type":{"name":"boolean"}},"handlersRef":{"description":"Increment/decrement handlers","name":"handlersRef","required":false,"type":{"name":"ForwardedRef<NumberInputHandlers> | undefined"}},"hideControls":{"description":"Determines whether the up/down controls should be hidden, <code>false</code> by default","name":"hideControls","required":false,"type":{"name":"boolean"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"isAllowed":{"description":"A function to validate the input value. If this function returns <code>false</code>, the <code>onChange</code> will not be called and the input value will not change.","name":"isAllowed","required":false,"type":{"name":"((values: NumberFormatValues) => boolean)"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"max":{"description":"Maximum possible value","name":"max","required":false,"type":{"name":"number"}},"min":{"description":"Minimum possible value","name":"min","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string | number) => void)"}},"onValueChange":{"description":"Called when value changes with <code>react-number-format</code> payload","name":"onValueChange","required":false,"type":{"name":"OnValueChange"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"prefix":{"description":"Prefix added before the input value","name":"prefix","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"startValue":{"description":"Value set to the input when increment/decrement buttons are clicked or up/down arrows pressed if the input is empty, <code>0</code> by default","name":"startValue","required":false,"type":{"name":"number"}},"step":{"description":"Number by which value will be incremented/decremented with up/down controls and keyboard arrows, <code>1</code> by default","name":"step","required":false,"type":{"name":"number"}},"suffix":{"description":"Suffix added after the input value","name":"suffix","required":false,"type":{"name":"string"}},"thousandSeparator":{"description":"A character used to separate thousands","name":"thousandSeparator","required":false,"type":{"name":"string | boolean"}},"thousandsGroupStyle":{"description":"Defines the thousand grouping style.","name":"thousandsGroupStyle","required":false,"type":{"name":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\"","raw":"\\"none\\" | \\"thousand\\" | \\"lakh\\" | \\"wan\\" | undefined","value":[{"value":"undefined"},{"value":"\\"none\\""},{"value":"\\"thousand\\""},{"value":"\\"lakh\\""},{"value":"\\"wan\\""}]}},"type":{"description":"Controls input <code>type</code> attribute, <code>\'text\'</code> by default","name":"type","required":false,"type":{"name":"\\"text\\" | \\"tel\\" | \\"password\\"","raw":"\\"text\\" | \\"tel\\" | \\"password\\" | undefined","value":[{"value":"undefined"},{"value":"\\"text\\""},{"value":"\\"tel\\""},{"value":"\\"password\\""}]}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | number"}},"valueIsNumericString":{"description":"If value is passed as string representation of numbers (unformatted) and number is used in any format props like in prefix or suffix in numeric format and format prop in pattern format then this should be passed as <code>true</code>. <code>false</code> by default.","name":"valueIsNumericString","required":false,"type":{"name":"boolean"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Overlay":{"props":{"backgroundOpacity":{"description":"Controls overlay <code>background-color</code> opacity 0–1, disregarded when <code>gradient</code> prop is set, <code>0.6</code> by default","name":"backgroundOpacity","required":false,"type":{"name":"number"}},"blur":{"description":"Overlay background blur, <code>0</code> by default","name":"blur","required":false,"type":{"name":"string | number"}},"center":{"description":"Determines whether content inside overlay should be vertically and horizontally centered, <code>false</code> by default","name":"center","required":false,"type":{"name":"boolean"}},"children":{"description":"Content inside overlay","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Overlay <code>background-color</code>, <code>#000</code> by default","name":"color","required":false,"type":{"name":"BackgroundColor"}},"fixed":{"description":"Determines whether overlay should have fixed position instead of absolute, <code>false</code> by default","name":"fixed","required":false,"type":{"name":"boolean"}},"gradient":{"description":"Changes overlay to gradient. If set, <code>color</code> prop is ignored","name":"gradient","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>0</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"zIndex":{"description":"Overlay z-index, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Pagination":{"props":{"boundaries":{"description":"Number of elements visible on the left/right edges, <code>1</code> by default","name":"boundaries","required":false,"type":{"name":"number"}},"color":{"description":"Key of <code>theme.colors</code>, active item color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"description":"Active page for uncontrolled component, must be an integer in [0, total] interval","name":"defaultValue","required":false,"type":{"name":"number"}},"disabled":{"description":"Determines whether all controls should be disabled, <code>false</code> by default","name":"disabled","required":false,"type":{"name":"boolean"}},"dotsIcon":{"description":"Dots icon component","name":"dotsIcon","required":false,"type":{"name":"PaginationIcon"}},"firstIcon":{"description":"First control icon component","name":"firstIcon","required":false,"type":{"name":"PaginationIcon"}},"gap":{"description":"Key of <code>theme.spacing</code>, gap between controls, <code>8</code> by default","name":"gap","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"getControlProps":{"description":"Adds props to next/previous/first/last controls","name":"getControlProps","required":false,"type":{"name":"((control: \\"next\\" | \\"previous\\" | \\"first\\" | \\"last\\") => Record<string, any>)"}},"getItemProps":{"description":"Additional props passed down to controls","name":"getItemProps","required":false,"type":{"name":"((page: number) => Record<string, any>)"}},"lastIcon":{"description":"Last control icon component","name":"lastIcon","required":false,"type":{"name":"PaginationIcon"}},"nextIcon":{"description":"Next control icon component","name":"nextIcon","required":false,"type":{"name":"PaginationIcon"}},"onChange":{"description":"Called when page changes","name":"onChange","required":false,"type":{"name":"((value: number) => void)"}},"onFirstPage":{"description":"Called when first page control is clicked","name":"onFirstPage","required":false,"type":{"name":"(() => void)"}},"onLastPage":{"description":"Called when last page control is clicked","name":"onLastPage","required":false,"type":{"name":"(() => void)"}},"onNextPage":{"description":"Called when next page control is clicked","name":"onNextPage","required":false,"type":{"name":"(() => void)"}},"onPreviousPage":{"description":"Called when previous page control is clicked","name":"onPreviousPage","required":false,"type":{"name":"(() => void)"}},"previousIcon":{"description":"Previous control icon component","name":"previousIcon","required":false,"type":{"name":"PaginationIcon"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"siblings":{"description":"Number of siblings displayed on the left/right side of the selected page, <code>1</code> by default","name":"siblings","required":false,"type":{"name":"number"}},"size":{"description":"<code>height</code> and <code>min-width</code> of controls, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"total":{"description":"Total number of pages, must be an integer","name":"total","required":true,"type":{"name":"number"}},"value":{"description":"Active page for controlled component, must be an integer in [0, total] interval","name":"value","required":false,"type":{"name":"number"}},"withControls":{"description":"Determines whether next/previous controls should be rendered, true by default","name":"withControls","required":false,"type":{"name":"boolean"}},"withEdges":{"description":"Determines whether first/last controls should be rendered, false by default","name":"withEdges","required":false,"type":{"name":"boolean"}}}},"Paper":{"props":{"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>, <code>none</code> by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"withBorder":{"description":"Determines whether the paper should have border, border color depends on color scheme, <code>false</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"PasswordInput":{"props":{"defaultVisible":{"description":"Determines whether input content should be visible (uncontrolled)","name":"defaultVisible","required":false,"type":{"name":"boolean"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"onVisibilityChange":{"description":"Called when visibility changes","name":"onVisibilityChange","required":false,"type":{"name":"((visible: boolean) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"visibilityToggleButtonProps":{"description":"Props passed down to the visibility toggle button","name":"visibilityToggleButtonProps","required":false,"type":{"name":"Record<string, any>"}},"visibilityToggleIcon":{"description":"Custom visibility toggle icon","name":"visibilityToggleIcon","required":false,"type":{"name":"FC<{ reveal: boolean; }>"}},"visible":{"description":"Determines whether input content should be visible (controlled)","name":"visible","required":false,"type":{"name":"boolean"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Pill":{"props":{"disabled":{"description":"If pill is disabled it has higher contrast to be visible on the disabled input background and the remove button is hidden","name":"disabled","required":false,"type":{"name":"boolean"}},"onRemove":{"description":"Called when the remove button is clicked","name":"onRemove","required":false,"type":{"name":"(() => void)"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem. <code>\'xl\'</code> by default.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeButtonProps":{"description":"Props passed down to the remove button","name":"removeButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"size":{"description":"Controls pill <code>font-size</code> and <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withRemoveButton":{"description":"Determines whether the remove button should be displayed, <code>false</code> by default","name":"withRemoveButton","required":false,"type":{"name":"boolean"}}}},"PillsInput":{"props":{"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"description":"","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"PinInput":{"props":{"ariaLabel":{"description":"<code>aria-label</code> for the inputs","name":"ariaLabel","required":false,"type":{"name":"string"}},"autoFocus":{"description":"If set, the first input is focused when component is mounted, <code>false</code> by default","name":"autoFocus","required":false,"type":{"name":"boolean"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"disabled":{"description":"Disables all inputs","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Adds error styles to all inputs","name":"error","required":false,"type":{"name":"boolean"}},"form":{"description":"Hidden input form attribute","name":"form","required":false,"type":{"name":"string"}},"gap":{"description":"Key of <code>theme.spacing</code> or any valid CSS value for <code>gap</code>, numbers are converted to rem, <code>\'md\'</code> by default","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"hiddenInputProps":{"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"id":{"description":"Base id used for all inputs, generated randomly by default","name":"id","required":false,"type":{"name":"string"}},"inputMode":{"description":"<code>inputmode</code> attribute, inferred from the <code>type</code> prop if not specified","name":"inputMode","required":false,"type":{"name":"\\"search\\" | \\"text\\" | \\"none\\" | \\"tel\\" | \\"url\\" | \\"email\\" | \\"numeric\\" | \\"decimal\\"","raw":"\\"search\\" | \\"text\\" | \\"none\\" | \\"tel\\" | \\"url\\" | \\"email\\" | \\"numeric\\" | \\"decimal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"search\\""},{"value":"\\"text\\""},{"value":"\\"none\\""},{"value":"\\"tel\\""},{"value":"\\"url\\""},{"value":"\\"email\\""},{"value":"\\"numeric\\""},{"value":"\\"decimal\\""}]}},"inputType":{"description":"Inputs <code>type</code> attribute, inferred from the <code>type</code> prop if not specified","name":"inputType","required":false,"type":{"name":"HTMLInputTypeAttribute"}},"length":{"description":"Number of input boxes, <code>4</code> by default","name":"length","required":false,"type":{"name":"number"}},"manageFocus":{"description":"Determines whether focus should be moved automatically to the next input once filled, <code>true</code> by default","name":"manageFocus","required":false,"type":{"name":"boolean"}},"mask":{"description":"Changes input type to <code>\\"password\\"</code>, <code>false</code> by default","name":"mask","required":false,"type":{"name":"boolean"}},"name":{"description":"Hidden input name attribute","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"onComplete":{"description":"Called when all inputs have value","name":"onComplete","required":false,"type":{"name":"((value: string) => void)"}},"oneTimeCode":{"description":"Determines whether <code>autocomplete=\\"one-time-code\\"</code> attribute should be set on all inputs, <code>true</code> by default","name":"oneTimeCode","required":false,"type":{"name":"boolean"}},"placeholder":{"description":"Inputs placeholder, <code>\'○\'</code> by default","name":"placeholder","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether input content can be edited","name":"readOnly","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls inputs <code>width</code> and <code>height</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"description":"Allowed values, <code>\'alphanumeric\'</code> by default","name":"type","required":false,"type":{"name":"\\"number\\" | RegExp | \\"alphanumeric\\""}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}}}},"Popover":{"props":{"arrowOffset":{"description":"Arrow offset in px, <code>5</code> by default","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"description":"Arrow position","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"description":"Arrow <code>border-radius</code> in px, <code>0</code> by default","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"description":"Arrow size in px, <code>7</code> by default","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"description":"<code>Popover.Target</code> and <code>Popover.Dropdown</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clickOutsideEvents":{"description":"Events that trigger outside clicks","name":"clickOutsideEvents","required":false,"type":{"name":"string[]"}},"closeOnClickOutside":{"description":"Determines whether dropdown should be closed on outside clicks, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether dropdown should be closed when <code>Escape</code> key is pressed, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"defaultOpened":{"description":"Initial opened state for uncontrolled component","name":"defaultOpened","required":false,"type":{"name":"boolean"}},"disabled":{"description":"If set, popover dropdown will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"id":{"description":"id base to create accessibility connections","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set dropdown will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"middlewares":{"description":"Floating ui middlewares to configure position handling, <code>{ flip: true, shift: true, inline: false }</code> by default","name":"middlewares","required":false,"type":{"name":"PopoverMiddlewares"}},"offset":{"description":"Offset of the dropdown element, <code>8</code> by default","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onChange":{"description":"Called with current state when dropdown opens or closes","name":"onChange","required":false,"type":{"name":"((opened: boolean) => void)"}},"onClose":{"description":"Called when dropdown closes","name":"onClose","required":false,"type":{"name":"(() => void)"}},"onOpen":{"description":"Called when dropdown opens","name":"onOpen","required":false,"type":{"name":"(() => void)"}},"onPositionChange":{"description":"Called when dropdown position changes","name":"onPositionChange","required":false,"type":{"name":"((position: FloatingPosition) => void)"}},"opened":{"description":"Controlled dropdown opened state","name":"opened","required":false,"type":{"name":"boolean"}},"portalProps":{"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Dropdown position relative to the target element, <code>\'bottom\'</code> by default","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"description":"<code>useEffect</code> dependencies to force update dropdown position, <code>[]</code> by default","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"returnFocus":{"description":"Determines whether focus should be automatically returned to control when dropdown closes, <code>false</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"transitionProps":{"description":"Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type, <code>{ duration: 150, transition: \'fade\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped within dropdown, <code>false</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"width":{"description":"Dropdown width, or <code>\'target\'</code> to make dropdown width the same as target element, <code>\'max-content\'</code> by default","name":"width","required":false,"type":{"name":"PopoverWidth"}},"withArrow":{"description":"Determines whether component should have an arrow, <code>false</code> by default","name":"withArrow","required":false,"type":{"name":"boolean"}},"withRoles":{"description":"Determines whether dropdown and target elements should have accessible roles, <code>true</code> by default","name":"withRoles","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether dropdown should be rendered within the <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Dropdown <code>z-index</code>, <code>300</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Popover.Target":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"popupType":{"description":"Popup accessible type, <code>\'dialog\'</code> by default","name":"popupType","required":false,"type":{"name":"string"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"Popover.Dropdown":{"description":"","props":{}},"Portal":{"props":{"children":{"description":"Portal children, for example, custom modal or popover","name":"children","required":true,"type":{"name":"React.ReactNode"}},"target":{"description":"Element inside which portal should be created, by default a new div element is created and appended to the <code>document.body</code>","name":"target","required":false,"type":{"name":"string | HTMLElement"}}}},"Progress":{"props":{"animated":{"description":"Determines whether the sections stripes should be animated, if set, <code>striped</code> prop is ignored, <code>false</code> by default","name":"animated","required":false,"type":{"name":"boolean"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS value, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls track height, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"striped":{"description":"Determines whether the section should have stipes, <code>false</code> by default","name":"striped","required":false,"type":{"name":"boolean"}},"value":{"description":"Value of the progress","name":"value","required":true,"type":{"name":"number"}}}},"Radio":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set input color in checked state, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"description":{"description":"Description displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"error":{"description":"Error displayed below the label","name":"error","required":false,"type":{"name":"React.ReactNode"}},"icon":{"description":"Custom checked icon component, by default a circle is displayed in checked state","name":"icon","required":false,"type":{"name":"FC<RadioIconProps>"}},"iconColor":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set icon color, <code>theme.white</code> by default","name":"iconColor","required":false,"type":{"name":"MantineColor"}},"label":{"description":"Radio label","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"description":"Position of the label relative to the input, <code>\'right\'</code> by default","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius,</code> \\"xl\\" by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"description":"Assigns ref of the root element, can be used with <code>Tooltip</code> and other similar components","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"description":"Controls size of all elements, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Rating":{"props":{"color":{"description":"Key of theme.colors or any CSS color value, yellow by default","name":"color","required":false,"type":{"name":"MantineColor"}},"count":{"description":"Number of controls that should be rendered","name":"count","required":false,"type":{"name":"number"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"number"}},"emptySymbol":{"description":"The icon that is displayed when symbol is empty","name":"emptySymbol","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"fractions":{"description":"Number of fractions each item can be divided into, 1 by default","name":"fractions","required":false,"type":{"name":"number"}},"fullSymbol":{"description":"This icon that is displayed when symbol is full","name":"fullSymbol","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"getSymbolLabel":{"description":"Function should return labelText for the symbols","name":"getSymbolLabel","required":false,"type":{"name":"((value: number) => string)"}},"highlightSelectedOnly":{"description":"If true, only the selected symbol will change to full symbol","name":"highlightSelectedOnly","required":false,"type":{"name":"boolean"}},"name":{"description":"Name of rating, should be unique within the page","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: number) => void)"}},"onHover":{"description":"Called when item is hovered","name":"onHover","required":false,"type":{"name":"((value: number) => void)"}},"readOnly":{"description":"If true, you won\'t be able to interact","name":"readOnly","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"number"}}}},"RingProgress":{"props":{"label":{"description":"Label displayed in the center of the ring","name":"label","required":false,"type":{"name":"React.ReactNode"}},"rootColor":{"description":"Color of the root section, key of theme.colors or CSS color value","name":"rootColor","required":false,"type":{"name":"MantineColor"}},"roundCaps":{"description":"Sets whether the edges of the progress circle are rounded","name":"roundCaps","required":false,"type":{"name":"boolean"}},"sections":{"description":"Ring sections","name":"sections","required":true,"type":{"name":"RingProgressSection[]"}},"size":{"description":"Width and height of the progress ring","name":"size","required":false,"type":{"name":"number"}},"thickness":{"description":"Ring thickness","name":"thickness","required":false,"type":{"name":"number"}}}},"ScrollArea":{"props":{"offsetScrollbars":{"description":"Determines whether scrollbars should be offset with padding on given axis, <code>false</code> by default","name":"offsetScrollbars","required":false,"type":{"name":"boolean | \\"x\\" | \\"y\\""}},"onScrollPositionChange":{"description":"Called with current position (<code>x</code> and <code>y</code> coordinates) when viewport is scrolled","name":"onScrollPositionChange","required":false,"type":{"name":"((position: { x: number; y: number; }) => void)"}},"scrollHideDelay":{"description":"Scroll hide delay in ms, applicable only when type is set to <code>hover</code> or <code>scroll</code>, <code>1000</code> by default","name":"scrollHideDelay","required":false,"type":{"name":"number"}},"scrollbarSize":{"description":"Scrollbar size, any valid CSS value for width/height, numbers are converted to rem, default value is 0.75rem","name":"scrollbarSize","required":false,"type":{"name":"string | number"}},"type":{"description":"Defines scrollbars behavior, <code>hover</code> by default\\n- <code>hover</code> – scrollbars are visible when mouse is over the scroll area\\n- <code>scroll</code> – scrollbars are visible when the scroll area is scrolled\\n- <code>always</code> – scrollbars are always visible\\n- <code>never</code> – scrollbars are always hidden\\n- <code>auto</code> – similar to <code>overflow: auto</code> – scrollbars are always visible when the content is overflowing","name":"type","required":false,"type":{"name":"\\"auto\\" | \\"scroll\\" | \\"always\\" | \\"hover\\" | \\"never\\"","raw":"\\"auto\\" | \\"scroll\\" | \\"always\\" | \\"hover\\" | \\"never\\" | undefined","value":[{"value":"undefined"},{"value":"\\"auto\\""},{"value":"\\"scroll\\""},{"value":"\\"always\\""},{"value":"\\"hover\\""},{"value":"\\"never\\""}]}},"viewportProps":{"description":"Props passed down to the viewport element","name":"viewportProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"viewportRef":{"description":"Assigns viewport element (scrollable container) ref","name":"viewportRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}}}},"SegmentedControl":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, changes color of indicator, by default color is based on current color scheme","name":"color","required":false,"type":{"name":"MantineColor"}},"data":{"description":"Data based on which controls are rendered","name":"data","required":true,"type":{"name":"(string | SegmentedControlItem)[]"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string"}},"disabled":{"description":"Determines whether the component is disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"fullWidth":{"description":"Determines whether the component should take 100% width of its parent, <code>false</code> by default","name":"fullWidth","required":false,"type":{"name":"boolean"}},"name":{"description":"Name of the radio group, by default random name is generated","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"orientation":{"description":"Determines in which orientation component id displayed, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether the value can be changed","name":"readOnly","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls <code>font-size</code>, <code>padding</code> and <code>height</code> properties, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"transitionDuration":{"description":"Indicator <code>transition-duration</code> in ms, set <code>0</code> to turn off transitions, <code>200</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}},"transitionTimingFunction":{"description":"Indicator <code>transition-timing-function</code> property, <code>ease</code> by default","name":"transitionTimingFunction","required":false,"type":{"name":"string"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}}}},"Select":{"props":{"allowDeselect":{"description":"Determines whether it should be possible to deselect value by clicking on the selected option, <code>true</code> by default","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"checkIconPosition":{"description":"Position of the check icon relative to the option label, <code>\'left\'</code> by default","name":"checkIconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"clearButtonProps":{"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"(__CloseButtonProps & ElementProps<\\"button\\">)"}},"clearable":{"description":"Determines whether the clear button should be displayed in the right section when the component has value, <code>false</code> by default","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"description":"Data used to generate options","name":"data","required":false,"type":{"name":"ComboboxData"}},"defaultDropdownOpened":{"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultSearchValue":{"description":"Default search value","name":"defaultSearchValue","required":false,"type":{"name":"string"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"string | null"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"filter":{"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"hiddenInputProps":{"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"nothingFoundMessage":{"description":"Message displayed when no option matched current search query, only applicable when <code>searchable</code> prop is set","name":"nothingFoundMessage","required":false,"type":{"name":"React.ReactNode"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string | null) => void)"}},"onDropdownClose":{"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"(() => void)"}},"onDropdownOpen":{"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"(() => void)"}},"onOptionSubmit":{"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"((value: string) => void)"}},"onSearchChange":{"description":"Called when search changes","name":"onSearchChange","required":false,"type":{"name":"((value: string) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"searchValue":{"description":"Controlled search value","name":"searchValue","required":false,"type":{"name":"string"}},"searchable":{"description":"Determines whether the select should be searchable, <code>false</code> by default","name":"searchable","required":false,"type":{"name":"boolean"}},"selectFirstOptionOnChange":{"description":"Determines whether the first option should be selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | null"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCheckIcon":{"description":"Determines whether check icon should be displayed near the selected option label, <code>true</code> by default","name":"withCheckIcon","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"SimpleGrid":{"props":{"cols":{"description":"Number of columns, <code>1</code> by default","name":"cols","required":false,"type":{"name":"StyleProp<number>"}},"spacing":{"description":"Spacing between columns, <code>\'md\'</code> by default","name":"spacing","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"verticalSpacing":{"description":"Spacing between rows, <code>\'md\'</code> by default","name":"verticalSpacing","required":false,"type":{"name":"StyleProp<MantineSpacing>"}}}},"Skeleton":{"props":{"animate":{"description":"Determines whether Skeleton should be animated, <code>true</code> by default","name":"animate","required":false,"type":{"name":"boolean"}},"circle":{"description":"If set, Skeleton <code>width</code> and <code>border-radius</code> are equal to its <code>height</code>, <code>false</code> by default","name":"circle","required":false,"type":{"name":"boolean"}},"height":{"description":"Skeleton <code>height</code>, numbers are converted to rem, <code>auto</code> by default","name":"height","required":false,"type":{"name":"Height<string | number>"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem. <code>theme.defaultRadius</code> by default.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"visible":{"description":"Determines whether Skeleton overlay should be displayed, <code>true</code> by default","name":"visible","required":false,"type":{"name":"boolean"}},"width":{"description":"Skeleton <code>width</code>, numbers are converted to rem, <code>100%</code> by default, ignored when <code>circle</code> prop is set","name":"width","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}}}},"Space":{"description":"","props":{}},"Spoiler":{"props":{"controlRef":{"description":"Get ref of spoiler toggle button","name":"controlRef","required":false,"type":{"name":"ForwardedRef<HTMLButtonElement>"}},"hideLabel":{"description":"Label for close spoiler action","name":"hideLabel","required":true,"type":{"name":"React.ReactNode"}},"initialState":{"description":"Initial spoiler state, true to wrap content in spoiler, false to show content without spoiler, opened state is updated on mount","name":"initialState","required":false,"type":{"name":"boolean"}},"maxHeight":{"description":"Maximum height of the visible content, when this point is reached spoiler appears, <code>100</code> by default","name":"maxHeight","required":false,"type":{"name":"number"}},"showLabel":{"description":"Label for open spoiler action","name":"showLabel","required":true,"type":{"name":"React.ReactNode"}},"transitionDuration":{"description":"Spoiler reveal transition duration in ms, set 0 or null to turn off animation, <code>200</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}}}},"Stack":{"props":{"align":{"description":"Controls <code>align-items</code> CSS property, <code>\'stretch\'</code> by default","name":"align","required":false,"type":{"name":"AlignItems"}},"gap":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set <code>gap</code> property, numbers are converted to rem, <code>\'md\'</code> by default","name":"gap","required":false,"type":{"name":"MantineSpacing"}},"justify":{"description":"Controls <code>justify-content</code> CSS property, <code>\'flex-start\'</code> by default","name":"justify","required":false,"type":{"name":"JustifyContent"}}}},"Stepper":{"props":{"active":{"description":"Index of the active step","name":"active","required":true,"type":{"name":"number"}},"allowNextStepsSelect":{"description":"Determines whether next steps can be selected, <code>true</code> by default *","name":"allowNextStepsSelect","required":false,"type":{"name":"boolean"}},"children":{"description":"<Stepper.Step /> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, controls colors of active and progress steps, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"completedIcon":{"description":"Step icon displayed when step is completed, check icon by default","name":"completedIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"contentPadding":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set <code>padding-top</code> of the content","name":"contentPadding","required":false,"type":{"name":"MantineSpacing"}},"icon":{"description":"Step icon, default value is step index + 1","name":"icon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"iconPosition":{"description":"Icon position relative to the step body, <code>\'left\'</code> by default","name":"iconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"iconSize":{"description":"Controls size of the step icon, by default icon size is inferred from <code>size</code> prop","name":"iconSize","required":false,"type":{"name":"string | number"}},"onStepClick":{"description":"Called when step is clicked","name":"onStepClick","required":false,"type":{"name":"((stepIndex: number) => void)"}},"orientation":{"description":"Stepper orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"progressIcon":{"description":"Step icon displayed when step is in progress, default value is step index + 1","name":"progressIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set steps border-radius, <code>\\"xl\\"</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls size of various Stepper elements","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"wrap":{"description":"Determines whether steps should wrap to the next line if no space is available, <code>true</code> by default","name":"wrap","required":false,"type":{"name":"boolean"}}}},"Switch":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set input color in checked state, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"description":{"description":"Description displayed below the label","name":"description","required":false,"type":{"name":"React.ReactNode"}},"error":{"description":"Error displayed below the label","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"description":"Id used to bind input and label, if not passed, unique id will be generated instead","name":"id","required":false,"type":{"name":"string"}},"label":{"description":"Switch label","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelPosition":{"description":"Position of the label relative to the input, <code>\'right\'</code> by default","name":"labelPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"offLabel":{"description":"Inner label when Switch is in unchecked state","name":"offLabel","required":false,"type":{"name":"React.ReactNode"}},"onLabel":{"description":"Inner label when Switch is in checked state","name":"onLabel","required":false,"type":{"name":"React.ReactNode"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius,</code> \\"xl\\" by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rootRef":{"description":"Assigns ref of the root element, can be used with <code>Tooltip</code> and other similar components","name":"rootRef","required":false,"type":{"name":"ForwardedRef<HTMLDivElement>"}},"size":{"description":"Controls size of all elements","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"thumbIcon":{"description":"Icon inside the thumb of switch","name":"thumbIcon","required":false,"type":{"name":"React.ReactNode"}},"wrapperProps":{"description":"Props passed down to the wrapper element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Table":{"props":{"borderColor":{"description":"Color of table borders, key of <code>theme.colors</code> or any valid CSS color","name":"borderColor","required":false,"type":{"name":"MantineColor"}},"captionSide":{"description":"Determines on which side <code>Table.Caption</code> is displayed, <code>bottom</code> by default","name":"captionSide","required":false,"type":{"name":"\\"bottom\\" | \\"top\\"","raw":"\\"bottom\\" | \\"top\\" | undefined","value":[{"value":"undefined"},{"value":"\\"bottom\\""},{"value":"\\"top\\""}]}},"data":{"description":"Data that should be used to generate table, ignored if <code>children</code> prop is set","name":"data","required":false,"type":{"name":"TableData"}},"highlightOnHover":{"description":"Determines whether table rows background should change to <code>highlightOnHoverColor</code> when hovered, <code>false</code> by default","name":"highlightOnHover","required":false,"type":{"name":"boolean"}},"highlightOnHoverColor":{"description":"Background color of table rows when hovered, key of <code>theme.colors</code> or any valid CSS color","name":"highlightOnHoverColor","required":false,"type":{"name":"MantineColor"}},"horizontalSpacing":{"description":"Horizontal cells spacing, key of <code>theme.spacing</code> or any valid CSS value for padding, numbers are converted to rem, default value is <code>xs</code>","name":"horizontalSpacing","required":false,"type":{"name":"MantineSpacing"}},"layout":{"description":"Value of <code>table-layout</code> style, <code>auto</code> by default","name":"layout","required":false,"type":{"name":"TableLayout","raw":"TableLayout | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"auto\\""},{"value":"\\"fixed\\""}]}},"stickyHeader":{"description":"Determines whether <code>Table.Thead</code> should be sticky, <code>false</code> by default","name":"stickyHeader","required":false,"type":{"name":"boolean"}},"stickyHeaderOffset":{"description":"Offset from top at which <code>Table.Thead</code> should become sticky, <code>0</code> by default","name":"stickyHeaderOffset","required":false,"type":{"name":"string | number"}},"striped":{"description":"Determines whether every odd/even row background should be changed to <code>strippedColor</code>, if set to <code>true</code>, then <code>odd</code> value will be used, <code>false</code> by default","name":"striped","required":false,"type":{"name":"boolean | \\"odd\\" | \\"even\\""}},"stripedColor":{"description":"Background color of striped rows, key of <code>theme.colors</code> or any valid CSS color","name":"stripedColor","required":false,"type":{"name":"MantineColor"}},"verticalSpacing":{"description":"Vertical cells spacing, key of <code>theme.spacing</code> or any valid CSS value for padding, numbers are converted to rem, default value is <code>xs</code>","name":"verticalSpacing","required":false,"type":{"name":"MantineSpacing"}},"withColumnBorders":{"description":"Determines whether the table should have borders between columns, <code>false</code> by default","name":"withColumnBorders","required":false,"type":{"name":"boolean"}},"withRowBorders":{"description":"Determines whether the table should have borders between rows, <code>true</code> by default","name":"withRowBorders","required":false,"type":{"name":"boolean"}},"withTableBorder":{"description":"Determines whether the table should have outer border, <code>false</code> by default","name":"withTableBorder","required":false,"type":{"name":"boolean"}}}},"Tabs":{"props":{"activateTabWithKeyboard":{"description":"Determines whether tab should be activated with arrow key press, <code>true</code> by default","name":"activateTabWithKeyboard","required":false,"type":{"name":"boolean"}},"allowTabDeactivation":{"description":"Determines whether tab can be deactivated, <code>false</code> by default","name":"allowTabDeactivation","required":false,"type":{"name":"boolean"}},"children":{"description":"Tabs content","name":"children","required":true,"type":{"name":"React.ReactNode"}},"color":{"description":"Changes colors of <code>Tabs.Tab</code> components when variant is <code>pills</code> or <code>default</code>, does nothing for other variants","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string | null"}},"id":{"description":"Base id, used to generate ids to connect labels with controls, generated randomly by default","name":"id","required":false,"type":{"name":"string"}},"inverted":{"description":"Determines whether tabs should have inverted styles, <code>false</code> by default","name":"inverted","required":false,"type":{"name":"boolean"}},"keepMounted":{"description":"If set to <code>false</code>, <code>Tabs.Panel</code> content will be unmounted when the associated tab is not active, <code>true</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"loop":{"description":"Determines whether arrow key presses should loop though items (first to last and last to first), <code>true</code> by default","name":"loop","required":false,"type":{"name":"boolean"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string | null) => void)"}},"orientation":{"description":"Tabs orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"placement":{"description":"<code>Tabs.List</code> placement relative to <code>Tabs.Panel</code>, applicable only when <code>orientation=\\"vertical\\"</code>, <code>\'left\'</code> by default","name":"placement","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"string | null"}}}},"TagsInput":{"props":{"allowDuplicates":{"description":"Determines whether duplicate tags are allowed, <code>false</code> by default","name":"allowDuplicates","required":false,"type":{"name":"boolean"}},"clearButtonProps":{"description":"Props passed down to the clear button","name":"clearButtonProps","required":false,"type":{"name":"(__CloseButtonProps & ElementProps<\\"button\\">)"}},"clearable":{"description":"Determines whether the clear button should be displayed in the right section when the component has value, <code>false</code> by default","name":"clearable","required":false,"type":{"name":"boolean"}},"comboboxProps":{"description":"Props passed down to <code>Combobox</code> component","name":"comboboxProps","required":false,"type":{"name":"ComboboxProps"}},"data":{"description":"Data used to generate options","name":"data","required":false,"type":{"name":"ComboboxData"}},"defaultDropdownOpened":{"description":"Uncontrolled dropdown initial opened state","name":"defaultDropdownOpened","required":false,"type":{"name":"boolean"}},"defaultSearchValue":{"description":"Default search value","name":"defaultSearchValue","required":false,"type":{"name":"string"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownOpened":{"description":"Controlled dropdown opened state","name":"dropdownOpened","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"filter":{"description":"Function based on which items are filtered and sorted","name":"filter","required":false,"type":{"name":"OptionsFilter"}},"hiddenInputProps":{"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"hiddenInputValuesDivider":{"description":"Divider used to separate values in the hidden input <code>value</code> attribute, <code>\',\'</code> by default","name":"hiddenInputValuesDivider","required":false,"type":{"name":"string"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"limit":{"description":"Maximum number of options displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"maxDropdownHeight":{"description":"<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default","name":"maxDropdownHeight","required":false,"type":{"name":"string | number"}},"maxTags":{"description":"Maximum number of tags, <code>Infinity</code> by default","name":"maxTags","required":false,"type":{"name":"number"}},"onChange":{"description":"Called whe value changes","name":"onChange","required":false,"type":{"name":"((value: string[]) => void)"}},"onDropdownClose":{"description":"Called when dropdown closes","name":"onDropdownClose","required":false,"type":{"name":"(() => void)"}},"onDropdownOpen":{"description":"Called when dropdown opens","name":"onDropdownOpen","required":false,"type":{"name":"(() => void)"}},"onDuplicate":{"description":"Called when user tries to submit a duplicated tag","name":"onDuplicate","required":false,"type":{"name":"((value: string) => void)"}},"onOptionSubmit":{"description":"Called when option is submitted from dropdown with mouse click or <code>Enter</code> key","name":"onOptionSubmit","required":false,"type":{"name":"((value: string) => void)"}},"onSearchChange":{"description":"Called when search changes","name":"onSearchChange","required":false,"type":{"name":"((value: string) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"searchValue":{"description":"Controlled search value","name":"searchValue","required":false,"type":{"name":"string"}},"selectFirstOptionOnChange":{"description":"Determines whether the first option should be selected when value changes, <code>false</code> by default","name":"selectFirstOptionOnChange","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"splitChars":{"description":"Characters that should trigger tags split, <code>[\',\']</code> by default","name":"splitChars","required":false,"type":{"name":"string[]"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withScrollArea":{"description":"Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default","name":"withScrollArea","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Text":{"props":{"color":{"description":"@deprecated Use <code>c</code> prop instead","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"description":"Gradient configuration, ignored when <code>variant</code> is not <code>gradient</code>, <code>theme.defaultGradient</code> by default","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"inherit":{"description":"Determines whether font properties should be inherited from the parent, <code>false</code> by default","name":"inherit","required":false,"type":{"name":"boolean"}},"inline":{"description":"Sets <code>line-height</code> to 1 for centering, <code>false</code> by default","name":"inline","required":false,"type":{"name":"boolean"}},"lineClamp":{"description":"Number of lines after which Text will be truncated","name":"lineClamp","required":false,"type":{"name":"number"}},"size":{"description":"Controls <code>font-size</code> and <code>line-height</code>, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"span":{"description":"Shorthand for <code>component=\\"span\\"</code>, <code>false</code> by default, default root element is <code>p</code>","name":"span","required":false,"type":{"name":"boolean"}},"truncate":{"description":"Side on which Text must be truncated, if <code>true</code>, text in truncated from the start","name":"truncate","required":false,"type":{"name":"TextTruncate"}}}},"TextInput":{"props":{"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Textarea":{"props":{"autosize":{"description":"Determines whether the textarea height should grow with its content, <code>false</code> by default","name":"autosize","required":false,"type":{"name":"boolean"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"maxRows":{"description":"Maximum rows for autosize textarea to grow, ignored if <code>autosize</code> prop is not set","name":"maxRows","required":false,"type":{"name":"number"}},"minRows":{"description":"Minimum rows of autosize textarea, ignored if <code>autosize</code> prop is not set","name":"minRows","required":false,"type":{"name":"number"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"ThemeIcon":{"props":{"children":{"description":"Icon displayed inside the component","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color. Default value is <code>theme.primaryColor</code>.","name":"color","required":false,"type":{"name":"MantineColor"}},"gradient":{"description":"Gradient data used when <code>variant=\\"gradient\\"</code>, default value is <code>theme.defaultGradient</code>","name":"gradient","required":false,"type":{"name":"MantineGradient"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius. Numbers are converted to rem. <code>theme.defaultRadius</code> by default.","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls width and height of the button. Numbers are converted to rem. <code>\'md\'</code> by default.","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"Timeline":{"props":{"active":{"description":"Index of active element","name":"active","required":false,"type":{"name":"number"}},"align":{"description":"Controls how the content is positioned relative to the bullet, <code>\'left\'</code> by default","name":"align","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"bulletSize":{"description":"Controls size of the bullet, <code>20</code> by default","name":"bulletSize","required":false,"type":{"name":"string | number"}},"children":{"description":"<code>Timeline.Item</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color to control active item colors, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"lineWidth":{"description":"Control width of the line","name":"lineWidth","required":false,"type":{"name":"string | number"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>\'xl\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"reverseActive":{"description":"Determines whether the active items direction should be reversed without reversing items order, <code>false</code> by default","name":"reverseActive","required":false,"type":{"name":"boolean"}}}},"Title":{"props":{"order":{"description":"Determines which tag will be used (h1-h6), controls <code>font-size</code> style if <code>size</code> prop is not set, <code>1</code> by default","name":"order","required":false,"type":{"name":"TitleOrder","raw":"TitleOrder | undefined","value":[{"value":"undefined"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"size":{"description":"Changes title size, if not set, then size is controlled by <code>order</code> prop","name":"size","required":false,"type":{"name":"TitleSize"}}}},"Tooltip":{"props":{"arrowOffset":{"description":"Arrow offset in px, <code>5</code> by default","name":"arrowOffset","required":false,"type":{"name":"number"}},"arrowPosition":{"description":"Arrow position relative to the tooltip, <code>side</code> by default","name":"arrowPosition","required":false,"type":{"name":"ArrowPosition","raw":"ArrowPosition | undefined","value":[{"value":"undefined"},{"value":"\\"center\\""},{"value":"\\"side\\""}]}},"arrowRadius":{"description":"Arrow <code>border-radius</code> in px, <code>0</code> by default","name":"arrowRadius","required":false,"type":{"name":"number"}},"arrowSize":{"description":"Arrow size in px, <code>4</code> by default","name":"arrowSize","required":false,"type":{"name":"number"}},"children":{"description":"Target element, must support <code>ref</code> prop and <code>...others</code>","name":"children","required":true,"type":{"name":"React.ReactNode"}},"closeDelay":{"description":"Close delay in ms, <code>0</code> by default","name":"closeDelay","required":false,"type":{"name":"number"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, controls tooltip background, by default set based on current color scheme","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"description":"If set, tooltip element will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"events":{"description":"Determines which events will be used to show tooltip, <code>{ hover: true, focus: false, touch: false }</code> by default","name":"events","required":false,"type":{"name":"{ hover: boolean; focus: boolean; touch: boolean; }"}},"inline":{"description":"Must be set if the tooltip target is an inline element","name":"inline","required":false,"type":{"name":"boolean"}},"keepMounted":{"description":"If set, the tooltip will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be applied instead","name":"keepMounted","required":false,"type":{"name":"boolean"}},"label":{"description":"Tooltip content","name":"label","required":true,"type":{"name":"React.ReactNode"}},"multiline":{"description":"Determines whether content should be wrapped on to the next line, <code>false</code> by default","name":"multiline","required":false,"type":{"name":"boolean"}},"offset":{"description":"Space between target element and tooltip in px, <code>5</code> by default","name":"offset","required":false,"type":{"name":"number | FloatingAxesOffsets"}},"onPositionChange":{"description":"Called when tooltip position changes","name":"onPositionChange","required":false,"type":{"name":"((position: FloatingPosition) => void)"}},"openDelay":{"description":"Open delay in ms","name":"openDelay","required":false,"type":{"name":"number"}},"opened":{"description":"Controlled opened state","name":"opened","required":false,"type":{"name":"boolean"}},"portalProps":{"description":"Props to pass down to the portal when withinPortal is true","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\" | \\"withinPortal\\">"}},"position":{"description":"Tooltip position relative to target element (<code>Tooltip</code> component) or mouse (<code>Tooltip.Floating</code> component)","name":"position","required":false,"type":{"name":"FloatingPosition","raw":"FloatingPosition | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""},{"value":"\\"bottom\\""},{"value":"\\"top\\""},{"value":"\\"left-end\\""},{"value":"\\"left-start\\""},{"value":"\\"right-end\\""},{"value":"\\"right-start\\""},{"value":"\\"bottom-end\\""},{"value":"\\"bottom-start\\""},{"value":"\\"top-end\\""},{"value":"\\"top-start\\""}]}},"positionDependencies":{"description":"<code>useEffect</code> dependencies to force update tooltip position","name":"positionDependencies","required":false,"type":{"name":"any[]"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"refProp":{"description":"Key of the prop that can be used to access element ref, <code>ref</code> by default","name":"refProp","required":false,"type":{"name":"string"}},"transitionProps":{"description":"Props passed down to the <code>Transition</code> component that used to animate tooltip presence, use to configure duration and animation type, <code>{ duration: 100, transition: \'fade\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"withArrow":{"description":"Determines whether the tooltip should have an arrow, <code>false</code> by default","name":"withArrow","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether tooltip should be rendered within <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Tooltip z-index, <code>300</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"Transition":{"props":{"children":{"description":"Render function with transition styles argument","name":"children","required":true,"type":{"name":"(styles: CSSProperties) => Element"}},"duration":{"description":"Transition duration in ms, <code>250</code> by default","name":"duration","required":false,"type":{"name":"number"}},"exitDuration":{"description":"Exit transition duration in ms, <code>250</code> by default","name":"exitDuration","required":false,"type":{"name":"number"}},"keepMounted":{"description":"If set element will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be applied instead","name":"keepMounted","required":false,"type":{"name":"boolean"}},"mounted":{"description":"Determines whether component should be mounted to the DOM","name":"mounted","required":true,"type":{"name":"boolean"}},"onEnter":{"description":"Called when enter transition starts","name":"onEnter","required":false,"type":{"name":"(() => void)"}},"onEntered":{"description":"Called when enter transition ends","name":"onEntered","required":false,"type":{"name":"(() => void)"}},"onExit":{"description":"Called when exit transition starts","name":"onExit","required":false,"type":{"name":"(() => void)"}},"onExited":{"description":"Called when exit transition ends","name":"onExited","required":false,"type":{"name":"(() => void)"}},"timingFunction":{"description":"Transition timing function, <code>theme.transitionTimingFunction</code> by default","name":"timingFunction","required":false,"type":{"name":"string"}},"transition":{"description":"Transition name or object","name":"transition","required":false,"type":{"name":"MantineTransition"}}}},"TypographyStylesProvider":{"description":"","props":{}},"UnstyledButton":{"props":{"size":{"description":"Size passed from parent component, sets <code>data-size</code> if value is not number like","name":"size","required":false,"type":{"name":"string | number"}}}},"VisuallyHidden":{"description":"","props":{}},"Calendar":{"props":{"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"description":"Max level that user can go up to (decade, year, month), defaults to decade","name":"maxLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"minLevel":{"description":"Min level that user can go down to (decade, year, month), defaults to month","name":"minLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: CalendarLevel) => void)"}},"onMonthMouseEnter":{"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)"}},"onMonthSelect":{"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextMonth":{"description":"Called when next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousMonth":{"description":"Called when previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"onYearMouseEnter":{"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)"}},"onYearSelect":{"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"((date: Date) => void)"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"CalendarHeader":{"props":{"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"label":{"description":"Label displayed between next and previous buttons","name":"label","required":true,"type":{"name":"React.ReactNode"}},"levelControlAriaLabel":{"description":"aria-label for level control","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"onLevelClick":{"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"(() => void)"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withNext":{"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}}}},"DateInput":{"props":{"allowDeselect":{"description":"Determines whether value can be deselected when the user clicks on the selected date in the calendar (only when clearable prop is set), defaults to true if clearable prop is set, false otherwise","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"description":"Props added to clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"dateParser":{"description":"Parses user input to convert it to Date object","name":"dateParser","required":false,"type":{"name":"((value: string) => Date | null)"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"fixOnBlur":{"description":"Determines whether input value should be reverted to last known valid value on blur, true by default","name":"fixOnBlur","required":false,"type":{"name":"boolean"}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"description":"Max level that user can go up to (decade, year, month), defaults to decade","name":"maxLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DateValue) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: CalendarLevel) => void)"}},"onLevelClick":{"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"(() => void)"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextMonth":{"description":"Called when next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousMonth":{"description":"Called when previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props added to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"preserveTime":{"description":"Determines whether time (hours, minutes, seconds and milliseconds) should be preserved when new date is picked, true by default","name":"preserveTime","required":false,"type":{"name":"boolean"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue"}},"valueFormat":{"description":"Dayjs format to display input value, \\"MMMM D, YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withNext":{"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatePicker":{"props":{"allowDeselect":{"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"description":"Max level that user can go up to (decade, year, month), defaults to decade","name":"maxLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DatePickerValue<Type>) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: CalendarLevel) => void)"}},"onMonthMouseEnter":{"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)"}},"onMonthSelect":{"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextMonth":{"description":"Called when next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousMonth":{"description":"Called when previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"onYearMouseEnter":{"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)"}},"onYearSelect":{"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"((date: Date) => void)"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"DatePickerType","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatePickerInput":{"props":{"allowDeselect":{"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"description":"Props passed down to clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"labelSeparator":{"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"description":"Max level that user can go up to (decade, year, month), defaults to decade","name":"maxLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"description":"Props passed down to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DatePickerValue<Type>) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: CalendarLevel) => void)"}},"onMonthMouseEnter":{"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)"}},"onMonthSelect":{"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextMonth":{"description":"Called when next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousMonth":{"description":"Called when previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"onYearMouseEnter":{"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void)"}},"onYearSelect":{"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"((date: Date) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props passed down to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"description":"Determines whether dates value should be sorted before onChange call, only applicable when type=\\"multiple\\", true by default","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"DatePickerType","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"valueFormat":{"description":"Dayjs format to display input value, \\"MMMM D, YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DateTimePicker":{"props":{"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"description":"Props passed down to clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"labelSeparator":{"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"CalendarLevel","raw":"CalendarLevel | undefined","value":[{"value":"undefined"},{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"description":"Props passed down to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DateValue) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: CalendarLevel) => void)"}},"onMonthSelect":{"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextMonth":{"description":"Called when next month button is clicked","name":"onNextMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousMonth":{"description":"Called when previous month button is clicked","name":"onPreviousMonth","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"onYearSelect":{"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"((date: Date) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props passed down to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"description":"Determines whether dates value should be sorted before onChange call, only applicable when type=\\"multiple\\", true by default","name":"sortDates","required":false,"type":{"name":"boolean"}},"submitButtonProps":{"description":"Props passed down to the submit button","name":"submitButtonProps","required":false,"type":{"name":"(ActionIconProps & Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"ref\\">)"}},"timeInputProps":{"description":"TimeInput component props","name":"timeInputProps","required":false,"type":{"name":"(TimeInputProps & { ref?: ((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null; }) | undefined"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"DateValue"}},"valueFormat":{"description":"Dayjs format to display input value, \\"DD/MM/YYYY HH:mm\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withSeconds":{"description":"Determines whether seconds input should be rendered","name":"withSeconds","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatesProvider":{"props":{"settings":{"description":"","name":"settings","required":true,"type":{"name":"Partial<DatesProviderValue>"}}}},"Day":{"props":{"date":{"description":"Date that should be displayed","name":"date","required":true,"type":{"name":"Date"}},"firstInRange":{"description":"Determines whether the day is first in range selection, <code>false</code> by default","name":"firstInRange","required":false,"type":{"name":"boolean"}},"hidden":{"description":"Determines whether the day should not de displayed, <code>false</code> by default","name":"hidden","required":false,"type":{"name":"boolean"}},"inRange":{"description":"Determines whether the day is selected in range, <code>false</code> by default","name":"inRange","required":false,"type":{"name":"boolean"}},"lastInRange":{"description":"Determines whether the day is last in range selection, <code>false</code> by default","name":"lastInRange","required":false,"type":{"name":"boolean"}},"outside":{"description":"Determines whether the day is outside of the current month, <code>false</code> by default","name":"outside","required":false,"type":{"name":"boolean"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"selected":{"description":"Determines whether the day is selected, <code>false</code> by default","name":"selected","required":false,"type":{"name":"boolean"}},"size":{"description":"Control width and height of the day, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"description":"Determines which element should be used as root, <code>\'button\'</code> by default, <code>\'div\'</code> if static prop is set","name":"static","required":false,"type":{"name":"boolean"}},"weekend":{"description":"Determines whether the day should be considered to be a weekend, <code>false</code> by default","name":"weekend","required":false,"type":{"name":"boolean"}}}},"DecadeLevel":{"props":{"decade":{"description":"Decade that is currently displayed","name":"decade","required":true,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"levelControlAriaLabel":{"description":"aria-label for change level control","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withNext":{"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DecadeLevelGroup":{"props":{"decade":{"description":"Decade that is currently displayed","name":"decade","required":true,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"levelControlAriaLabel":{"description":"Function that returns level control aria-label based on year date","name":"levelControlAriaLabel","required":false,"type":{"name":"string | ((decade: Date) => string)"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"HiddenDatesInput":{"props":{"form":{"description":"","name":"form","required":true,"type":{"name":"string"}},"name":{"description":"","name":"name","required":true,"type":{"name":"string"}},"type":{"description":"","name":"type","required":true,"type":{"name":"DatePickerType","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"","name":"value","required":true,"type":{"name":"HiddenDatesInputValue"}}}},"LevelsGroup":{"props":{"size":{"description":"","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}}}},"Month":{"props":{"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"month":{"description":"Month to display","name":"month","required":true,"type":{"name":"Date"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"size":{"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}}}},"MonthLevel":{"props":{"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"levelControlAriaLabel":{"description":"aria-label for change level control","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"month":{"description":"Month that is currently displayed","name":"month","required":true,"type":{"name":"Date"}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"onLevelClick":{"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"(() => void)"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"size":{"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withNext":{"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}}}},"MonthLevelGroup":{"props":{"excludeDate":{"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"((date: Date) => boolean)"}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"((date: Date) => string)"}},"getDayProps":{"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"((date: Date) => Omit<Partial<DayProps>, \\"classNames\\" | \\"styles\\" | \\"vars\\">)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"levelControlAriaLabel":{"description":"Function that returns level control aria-label based on month date","name":"levelControlAriaLabel","required":false,"type":{"name":"string | ((month: Date) => string)"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"month":{"description":"Month that is currently displayed","name":"month","required":true,"type":{"name":"Date"}},"monthLabelFormat":{"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onLevelClick":{"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"(() => void)"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"((date: Date) => ReactNode)"}},"size":{"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"static":{"description":"Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way","name":"static","required":false,"type":{"name":"boolean"}},"weekdayFormat":{"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}},"weekendDays":{"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}}}},"MonthPicker":{"props":{"allowDeselect":{"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"MonthPickerLevel","raw":"MonthPickerLevel | undefined","value":[{"value":"undefined"},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"MonthPickerLevel","raw":"MonthPickerLevel | undefined","value":[{"value":"undefined"},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"description":"Max level that user can go up to (decade, year), defaults to decade","name":"maxLevel","required":false,"type":{"name":"MonthPickerLevel","raw":"MonthPickerLevel | undefined","value":[{"value":"undefined"},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DatePickerValue<Type>) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: MonthPickerLevel) => void)"}},"onMonthSelect":{"description":"Called when month is selected","name":"onMonthSelect","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"DatePickerType","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"MonthPickerInput":{"props":{"allowDeselect":{"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"description":"Props passed down to clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"MonthPickerLevel","raw":"MonthPickerLevel | undefined","value":[{"value":"undefined"},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"labelSeparator":{"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"level":{"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"MonthPickerLevel","raw":"MonthPickerLevel | undefined","value":[{"value":"undefined"},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"description":"Max level that user can go up to (decade, year), defaults to decade","name":"maxLevel","required":false,"type":{"name":"MonthPickerLevel","raw":"MonthPickerLevel | undefined","value":[{"value":"undefined"},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"description":"Props passed down to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DatePickerValue<Type>) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onLevelChange":{"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"((level: MonthPickerLevel) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onNextYear":{"description":"Called when next year button is clicked","name":"onNextYear","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousYear":{"description":"Called when previous year button is clicked","name":"onPreviousYear","required":false,"type":{"name":"((date: Date) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props passed down to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"description":"Determines whether dates value should be sorted before onChange call, only applicable when type=\\"multiple\\", true by default","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"DatePickerType","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"valueFormat":{"description":"Dayjs format to display input value, \\"MMMM YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"MonthsList":{"props":{"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"year":{"description":"Year for which months list should be displayed","name":"year","required":true,"type":{"name":"Date"}}}},"PickerControl":{"props":{"children":{"description":"Control children","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"description":"Determines whether control should be disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"firstInRange":{"description":"Determines whether control is first in range selection","name":"firstInRange","required":false,"type":{"name":"boolean"}},"inRange":{"description":"Determines whether control is selected in range","name":"inRange","required":false,"type":{"name":"boolean"}},"lastInRange":{"description":"Determines whether control is last in range selection","name":"lastInRange","required":false,"type":{"name":"boolean"}},"selected":{"description":"Determines whether control should have selected styles","name":"selected","required":false,"type":{"name":"boolean"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}}}},"PickerInputBase":{"props":{"clearButtonProps":{"description":"Props passed down to clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownHandlers":{"description":"","name":"dropdownHandlers","required":true,"type":{"name":"{ readonly open: () => void; readonly close: () => void; readonly toggle: () => void; }"}},"dropdownOpened":{"description":"","name":"dropdownOpened","required":true,"type":{"name":"boolean"}},"dropdownType":{"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"formattedValue":{"description":"","name":"formattedValue","required":true,"type":{"name":"string | null"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"labelSeparator":{"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"modalProps":{"description":"Props passed down to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"onClear":{"description":"","name":"onClear","required":true,"type":{"name":"() => void"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props passed down to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"shouldClear":{"description":"","name":"shouldClear","required":true,"type":{"name":"boolean"}},"size":{"description":"","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"description":"Determines whether dates value should be sorted before onChange call, only applicable when type=\\"multiple\\", true by default","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"description":"","name":"type","required":true,"type":{"name":"DatePickerType","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"","name":"value","required":true,"type":{"name":"HiddenDatesInputValue"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"TimeInput":{"props":{"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"withSeconds":{"description":"Determines whether seconds input should be rendered","name":"withSeconds","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"WeekdaysRow":{"props":{"cellComponent":{"description":"Choose cell type that will be used to render weekdays, defaults to th","name":"cellComponent","required":false,"type":{"name":"\\"td\\" | \\"th\\"","raw":"\\"td\\" | \\"th\\" | undefined","value":[{"value":"undefined"},{"value":"\\"td\\""},{"value":"\\"th\\""}]}},"firstDayOfWeek":{"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"DayOfWeek","raw":"DayOfWeek | undefined","value":[{"value":"undefined"},{"value":"0"},{"value":"2"},{"value":"1"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"size":{"description":"Controls size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"weekdayFormat":{"description":"dayjs format to get weekday name, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string | ((date: Date) => ReactNode)"}}}},"YearLevel":{"props":{"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"levelControlAriaLabel":{"description":"aria-label for change level control","name":"levelControlAriaLabel","required":false,"type":{"name":"string"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"onLevelClick":{"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"(() => void)"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withNext":{"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"year":{"description":"Year that is currently displayed","name":"year","required":true,"type":{"name":"Date"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}}}},"YearLevelGroup":{"props":{"getMonthControlProps":{"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"hasNextLevel":{"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"levelControlAriaLabel":{"description":"Function that returns level control aria-label based on year date","name":"levelControlAriaLabel","required":false,"type":{"name":"string | ((year: Date) => string)"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthsListFormat":{"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"React.ReactNode"}},"nextLabel":{"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onLevelClick":{"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"(() => void)"}},"onNext":{"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"(() => void)"}},"onPrevious":{"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"(() => void)"}},"previousDisabled":{"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"React.ReactNode"}},"previousLabel":{"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"year":{"description":"Year that is currently displayed","name":"year","required":true,"type":{"name":"Date"}},"yearLabelFormat":{"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}}}},"YearPicker":{"props":{"allowDeselect":{"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DatePickerValue<Type>) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onYearSelect":{"description":"Called when year is selected","name":"onYearSelect","required":false,"type":{"name":"((date: Date) => void)"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"type":{"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"DatePickerType","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"YearPickerInput":{"props":{"allowDeselect":{"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"description":"Props passed down to clear button","name":"clearButtonProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"clearable":{"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"description":"Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"dropdownType":{"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\" | undefined","value":[{"value":"undefined"},{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"labelSeparator":{"description":"Separator between range value","name":"labelSeparator","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"description":"Props passed down to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"numberOfColumns":{"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: DatePickerValue<Type>) => void)"}},"onDateChange":{"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"((date: Date) => void)"}},"onNextDecade":{"description":"Called when next decade button is clicked","name":"onNextDecade","required":false,"type":{"name":"((date: Date) => void)"}},"onPreviousDecade":{"description":"Called when previous decade button is clicked","name":"onPreviousDecade","required":false,"type":{"name":"((date: Date) => void)"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"popoverProps":{"description":"Props passed down to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"readOnly":{"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"sortDates":{"description":"Determines whether dates value should be sorted before onChange call, only applicable when type=\\"multiple\\", true by default","name":"sortDates","required":false,"type":{"name":"boolean"}},"type":{"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"DatePickerType","raw":"DatePickerType | undefined","value":[{"value":"undefined"},{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"description":"Value for controlled component","name":"value","required":false,"type":{"name":"DateValue | DatesRangeValue | Date[]"}},"valueFormat":{"description":"Dayjs format to display input value, \\"YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the root element","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"YearsList":{"props":{"decade":{"description":"Decade for which years list should be displayed","name":"decade","required":true,"type":{"name":"Date"}},"getYearControlProps":{"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"((date: Date) => Partial<PickerControlProps>)"}},"locale":{"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"size":{"description":"Component size","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"withCellSpacing":{"description":"Determines whether controls should be separated by spacing, true by default","name":"withCellSpacing","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"description":"dayjs format for years list, <code>\'YYYY\'</code> by default","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"InputLabel":{"props":{"labelElement":{"description":"Root element of the label, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"required":{"description":"Determines whether required asterisk should be displayed","name":"required","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls label <code>font-size</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"InputWrapper":{"props":{"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"id":{"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls size of <code>Input.Label</code>, <code>Input.Description</code> and <code>Input.Error</code> components","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}}}},"InputDescription":{"props":{"size":{"description":"Controls description <code>font-size</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"InputError":{"props":{"size":{"description":"Controls error <code>font-size</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"ButtonGroup":{"props":{"borderWidth":{"description":"<code>border-width</code> of the child <code>Button</code> components. Numbers are converted to rem. Default value in <code>1</code>.","name":"borderWidth","required":false,"type":{"name":"string | number"}},"children":{"description":"<code>Button</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"orientation":{"description":"Orientation of the group, <code>horizontal</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}}}},"ActionIconGroup":{"props":{"borderWidth":{"description":"<code>border-width</code> of the child <code>ActionIcon</code> components. Default value in <code>1</code>","name":"borderWidth","required":false,"type":{"name":"string | number"}},"children":{"description":"<code>ActionIcon</code> components only","name":"children","required":false,"type":{"name":"React.ReactNode"}},"orientation":{"description":"Controls group orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}}}},"PopoverTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"popupType":{"description":"Popup accessible type, <code>\'dialog\'</code> by default","name":"popupType","required":false,"type":{"name":"string"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"PopoverDropdown":{"description":"","props":{}},"Slider":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, controls color of track and thumb, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"number"}},"disabled":{"description":"Disables slider","name":"disabled","required":false,"type":{"name":"boolean"}},"hiddenInputProps":{"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"inverted":{"description":"Determines whether track value representation should be inverted, <code>false</code> by default","name":"inverted","required":false,"type":{"name":"boolean"}},"label":{"description":"Function to generate label or any react node to render instead, set to null to disable label","name":"label","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"labelAlwaysOn":{"description":"Determines whether the label should be visible when the slider is not being dragged or hovered, <code>false</code> by default","name":"labelAlwaysOn","required":false,"type":{"name":"boolean"}},"labelTransitionProps":{"description":"Props passed down to the <code>Transition</code> component, <code>{ transition: \'fade\', duration: 0 }</code> by default","name":"labelTransitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"marks":{"description":"Marks displayed on the track","name":"marks","required":false,"type":{"name":"{ value: number; label?: ReactNode; }[]"}},"max":{"description":"Maximum possible value, <code>100</code> by default","name":"max","required":false,"type":{"name":"number"}},"min":{"description":"Minimal possible value, <code>0</code> by default","name":"min","required":false,"type":{"name":"number"}},"name":{"description":"Hidden input name, use with uncontrolled component","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: number) => void)"}},"onChangeEnd":{"description":"Called when user stops dragging slider or changes value with arrows","name":"onChangeEnd","required":false,"type":{"name":"((value: number) => void)"}},"precision":{"description":"Number of significant digits after the decimal point","name":"precision","required":false,"type":{"name":"number"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>\'xl\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"scale":{"description":"A transformation function to change the scale of the slider","name":"scale","required":false,"type":{"name":"((value: number) => number)"}},"showLabelOnHover":{"description":"Determines whether thumb label should be displayed when the slider is hovered, <code>true</code> by default","name":"showLabelOnHover","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls size of the track, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"step":{"description":"Number by which value will be incremented/decremented with thumb drag and arrows, <code>1</code> by default","name":"step","required":false,"type":{"name":"number"}},"thumbChildren":{"description":"Content rendered inside thumb","name":"thumbChildren","required":false,"type":{"name":"React.ReactNode"}},"thumbLabel":{"description":"Thumb <code>aria-label</code>","name":"thumbLabel","required":false,"type":{"name":"string"}},"thumbSize":{"description":"Thumb <code>width</code> and <code>height</code>, by default value is computed based on <code>size</code> prop","name":"thumbSize","required":false,"type":{"name":"string | number"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"number"}}}},"RangeSlider":{"props":{"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, controls color of track and thumb, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"defaultValue":{"description":"Uncontrolled component default value","name":"defaultValue","required":false,"type":{"name":"RangeSliderValue"}},"disabled":{"description":"Disables slider","name":"disabled","required":false,"type":{"name":"boolean"}},"hiddenInputProps":{"description":"Props passed down to the hidden input","name":"hiddenInputProps","required":false,"type":{"name":"Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \\"ref\\">"}},"inverted":{"description":"Determines whether track values representation should be inverted, <code>false</code> by default","name":"inverted","required":false,"type":{"name":"boolean"}},"label":{"description":"Function to generate label or any react node to render instead, set to null to disable label","name":"label","required":false,"type":{"name":"ReactNode | ((value: number) => ReactNode)"}},"labelAlwaysOn":{"description":"Determines whether the label should be visible when the slider is not being dragged or hovered, <code>false</code> by default","name":"labelAlwaysOn","required":false,"type":{"name":"boolean"}},"labelTransitionProps":{"description":"Props passed down to the <code>Transition</code> component, <code>{ transition: \'fade\', duration: 0 }</code> by default","name":"labelTransitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"marks":{"description":"Marks displayed on the track","name":"marks","required":false,"type":{"name":"{ value: number; label?: ReactNode; }[]"}},"max":{"description":"Maximum possible value, <code>100</code> by default","name":"max","required":false,"type":{"name":"number"}},"maxRange":{"description":"Maximum range interval, <code>Infinity</code> by default","name":"maxRange","required":false,"type":{"name":"number"}},"min":{"description":"Minimal possible value, <code>0</code> by default","name":"min","required":false,"type":{"name":"number"}},"minRange":{"description":"Minimal range interval, <code>10</code> by default","name":"minRange","required":false,"type":{"name":"number"}},"name":{"description":"Hidden input name, use with uncontrolled component","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: RangeSliderValue) => void)"}},"onChangeEnd":{"description":"Called when user stops dragging slider or changes value with arrows","name":"onChangeEnd","required":false,"type":{"name":"((value: RangeSliderValue) => void)"}},"precision":{"description":"Number of significant digits after the decimal point","name":"precision","required":false,"type":{"name":"number"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>\'xl\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"scale":{"description":"A transformation function to change the scale of the slider","name":"scale","required":false,"type":{"name":"((value: number) => number)"}},"showLabelOnHover":{"description":"Determines whether thumb label should be displayed when the slider is hovered, <code>true</code> by default","name":"showLabelOnHover","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls size of the track, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"step":{"description":"Number by which value will be incremented/decremented with thumb drag and arrows, <code>1</code> by default","name":"step","required":false,"type":{"name":"number"}},"thumbChildren":{"description":"Content rendered inside thumb","name":"thumbChildren","required":false,"type":{"name":"React.ReactNode"}},"thumbFromLabel":{"description":"First thumb <code>aria-label</code>","name":"thumbFromLabel","required":false,"type":{"name":"string"}},"thumbSize":{"description":"Thumb <code>width</code> and <code>height</code>, by default value is computed based on <code>size</code> prop","name":"thumbSize","required":false,"type":{"name":"string | number"}},"thumbToLabel":{"description":"Second thumb <code>aria-label</code>","name":"thumbToLabel","required":false,"type":{"name":"string"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"RangeSliderValue"}}}},"SwitchGroup":{"props":{"children":{"description":"<code>Switch</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"id":{"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string[]) => void)"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls size of the <code>Input.Wrapper</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the <code>Input.Wrapper</code>","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"CheckboxGroup":{"props":{"children":{"description":"<code>Checkbox</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string[]"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"id":{"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string[]) => void)"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls size of the <code>Input.Wrapper</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string[]"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the <code>Input.Wrapper</code>","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"RadioGroup":{"props":{"children":{"description":"<code>Radio</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"defaultValue":{"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"string"}},"description":{"description":"Contents of <code>Input.Description</code> component, if not set, description is not rendered.","name":"description","required":false,"type":{"name":"React.ReactNode"}},"descriptionProps":{"description":"Props passed down to the <code>Input.Description</code> component","name":"descriptionProps","required":false,"type":{"name":"Record<string, any>"}},"error":{"description":"Contents of <code>Input.Error</code> component, if not set, error is not rendered.","name":"error","required":false,"type":{"name":"React.ReactNode"}},"errorProps":{"description":"Props passed down to the <code>InputError</code> component","name":"errorProps","required":false,"type":{"name":"Record<string, any>"}},"id":{"description":"Static id used as base to generate <code>aria-</code> attributes, by default generates random id","name":"id","required":false,"type":{"name":"string"}},"inputContainer":{"description":"Input container component, defaults to <code>React.Fragment</code>","name":"inputContainer","required":false,"type":{"name":"((children: ReactNode) => ReactNode)"}},"inputWrapperOrder":{"description":"Controls order of the elements, <code>[\'label\', \'description\', \'input\', \'error\']</code> by default","name":"inputWrapperOrder","required":false,"type":{"name":"(\\"input\\" | \\"label\\" | \\"description\\" | \\"error\\")[]"}},"label":{"description":"Contents of <code>Input.Label</code> component, if not set, label is not rendered.","name":"label","required":false,"type":{"name":"React.ReactNode"}},"labelElement":{"description":"<code>Input.Label</code> root element, <code>\'label\'</code> by default","name":"labelElement","required":false,"type":{"name":"\\"div\\" | \\"label\\"","raw":"\\"div\\" | \\"label\\" | undefined","value":[{"value":"undefined"},{"value":"\\"div\\""},{"value":"\\"label\\""}]}},"labelProps":{"description":"Props passed down to the <code>Input.Label</code> component","name":"labelProps","required":false,"type":{"name":"Record<string, any>"}},"name":{"description":"Name attribute of child radio inputs","name":"name","required":false,"type":{"name":"string"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: string) => void)"}},"required":{"description":"Adds required attribute to the input and a red asterisk on the right side of label, <code>false</code> by default","name":"required","required":false,"type":{"name":"boolean"}},"size":{"description":"Controls size of the <code>Input.Wrapper</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize","raw":"MantineSize | undefined","value":[{"value":"undefined"},{"value":"\\"xs\\""},{"value":"\\"sm\\""},{"value":"\\"md\\""},{"value":"\\"lg\\""},{"value":"\\"xl\\""}]}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string"}},"withAsterisk":{"description":"Determines whether required asterisk should be rendered, overrides required prop, does not add required attribute to the input, <code>false</code> by default","name":"withAsterisk","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props passed down to the <code>Input.Wrapper</code>","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"TabsTab":{"props":{"children":{"description":"Tab label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color, controls control color based on <code>variant</code>","name":"color","required":false,"type":{"name":"MantineColor"}},"leftSection":{"description":"Content displayed on the left side of the label, for example, icon","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"description":"Content displayed on the right side of the label, for example, icon","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"size":{"description":"Size passed from parent component, sets <code>data-size</code> if value is not number like","name":"size","required":false,"type":{"name":"string | number"}},"value":{"description":"Value of associated panel","name":"value","required":true,"type":{"name":"string"}}}},"TabsList":{"props":{"children":{"description":"<code>Tabs.Tab</code> components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"grow":{"description":"Determines whether tabs should take all available space, <code>false</code> by default","name":"grow","required":false,"type":{"name":"boolean"}},"justify":{"description":"Tabs alignment, <code>flex-start</code> by default","name":"justify","required":false,"type":{"name":"JustifyContent"}}}},"TabsPanel":{"props":{"children":{"description":"Panel content","name":"children","required":true,"type":{"name":"React.ReactNode"}},"keepMounted":{"description":"If set to <code>true</code>, the content will be kept mounted, even if <code>keepMounted</code> is set <code>false</code> in the parent <code>Tabs</code> component","name":"keepMounted","required":false,"type":{"name":"boolean"}},"value":{"description":"Value of associated control","name":"value","required":true,"type":{"name":"string"}}}},"AccordionItem":{"props":{"value":{"description":"Value that is used to manage accordion state","name":"value","required":true,"type":{"name":"string"}}}},"AccordionControl":{"props":{"chevron":{"description":"Custom chevron icon","name":"chevron","required":false,"type":{"name":"React.ReactNode"}},"children":{"description":"Control label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"disabled":{"description":"Disables control button","name":"disabled","required":false,"type":{"name":"boolean"}},"icon":{"description":"Icon displayed next to the label","name":"icon","required":false,"type":{"name":"React.ReactNode"}}}},"PillGroup":{"props":{"disabled":{"description":"Determines whether child <code>Pill</code> components should be disabled","name":"disabled","required":false,"type":{"name":"boolean"}},"gap":{"description":"Controls spacing between pills, by default controlled by <code>size</code>","name":"gap","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"size":{"description":"Controls size of the child <code>Pill</code> components and gap between them, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}}}},"PillsInputField":{"props":{"pointer":{"description":"If set, cursor is changed to pointer","name":"pointer","required":false,"type":{"name":"boolean"}},"type":{"description":"Controls input styles when focused. If <code>auto</code> the input is hidden when not focused. If <code>visible</code> the input will always remain visible. <code>\'visible\'</code> by default","name":"type","required":false,"type":{"name":"\\"hidden\\" | \\"auto\\" | \\"visible\\"","raw":"\\"hidden\\" | \\"auto\\" | \\"visible\\" | undefined","value":[{"value":"undefined"},{"value":"\\"hidden\\""},{"value":"\\"auto\\""},{"value":"\\"visible\\""}]}}}},"ComboboxOption":{"props":{"active":{"description":"Determines whether the option is selected","name":"active","required":false,"type":{"name":"boolean"}},"disabled":{"description":"Determines whether the option can be selected","name":"disabled","required":false,"type":{"name":"boolean"}},"selected":{"description":"Determines whether item is selected, useful for virtualized comboboxes","name":"selected","required":false,"type":{"name":"boolean"}},"value":{"description":"Option value","name":"value","required":true,"type":{"name":"string"}}}},"ComboboxDropdown":{"props":{"hidden":{"description":"Determines whether the dropdown should be hidden, for example, when there are no options to display","name":"hidden","required":false,"type":{"name":"boolean"}}}},"ComboboxTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"description":"Determines which events should be handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.\\n<code>input</code> by default.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"description":"Determines whether the target should have <code>aria-</code> attributes, <code>true</code> by default","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"description":"Determines whether the target should have <code>aria-expanded</code> attribute, <code>false</code> by default","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"description":"Determines whether component should respond to keyboard events, <code>true</code> by default","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"ComboboxDropdownTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"ComboboxEventsTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}},"targetType":{"description":"Determines which events should be handled by the target element.\\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.\\n<code>input</code> by default.","name":"targetType","required":false,"type":{"name":"\\"button\\" | \\"input\\"","raw":"\\"button\\" | \\"input\\" | undefined","value":[{"value":"undefined"},{"value":"\\"button\\""},{"value":"\\"input\\""}]}},"withAriaAttributes":{"description":"Determines whether the target should have <code>aria-</code> attributes, <code>true</code> by default","name":"withAriaAttributes","required":false,"type":{"name":"boolean"}},"withExpandedAttribute":{"description":"Determines whether the target should have <code>aria-expanded</code> attribute, <code>false</code> by default","name":"withExpandedAttribute","required":false,"type":{"name":"boolean"}},"withKeyboardNavigation":{"description":"Determines whether component should respond to keyboard events, <code>true</code> by default","name":"withKeyboardNavigation","required":false,"type":{"name":"boolean"}}}},"ComboboxGroup":{"props":{"label":{"description":"Group label","name":"label","required":false,"type":{"name":"React.ReactNode"}}}},"AppShellAside":{"props":{"withBorder":{"description":"Determines whether component should have a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Component <code>z-index</code>, by default inherited from the <code>AppShell</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"AppShellNavbar":{"props":{"withBorder":{"description":"Determines whether component should have a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Component <code>z-index</code>, by default inherited from the <code>AppShell</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"AppShellHeader":{"props":{"withBorder":{"description":"Determines whether component should have a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Component <code>z-index</code>, by default inherited from the <code>AppShell</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"AppShellFooter":{"props":{"withBorder":{"description":"Determines whether component should have a border, overrides <code>withBorder</code> prop on <code>AppShell</code> component","name":"withBorder","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Component <code>z-index</code>, by default inherited from the <code>AppShell</code>","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"AppShellSection":{"props":{"grow":{"description":"Determines whether the section should take all available space, <code>false</code> by default","name":"grow","required":false,"type":{"name":"boolean"}}}},"GridCol":{"props":{"offset":{"description":"Column offset on the left side – number of columns that should be left empty before this column","name":"offset","required":false,"type":{"name":"StyleProp<number>"}},"order":{"description":"Column order, can be used to reorder columns at different viewport sizes","name":"order","required":false,"type":{"name":"StyleProp<number>"}},"span":{"description":"Column span, <code>12</code> by default","name":"span","required":false,"type":{"name":"StyleProp<ColSpan>"}}}},"HoverCardTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"eventPropsWrapperName":{"description":"Key of the prop that is used to pass event listeners, by default event listeners are passed directly to component","name":"eventPropsWrapperName","required":false,"type":{"name":"string"}},"popupType":{"description":"Popup accessible type, <code>\'dialog\'</code> by default","name":"popupType","required":false,"type":{"name":"string"}},"refProp":{"description":"Key of the prop that should be used to access element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"MenuItem":{"props":{"children":{"description":"Item label","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeMenuOnClick":{"description":"Determines whether the menu should be closed when the item is clicked, overrides <code>closeOnItemClick</code> prop on the <code>Menu</code> component","name":"closeMenuOnClick","required":false,"type":{"name":"boolean"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color","name":"color","required":false,"type":{"name":"MantineColor"}},"disabled":{"description":"Disables item","name":"disabled","required":false,"type":{"name":"boolean"}},"leftSection":{"description":"Section displayed on the left side of the label","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"description":"Section displayed on the right side of the label","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"MenuTarget":{"props":{"children":{"description":"Target element","name":"children","required":true,"type":{"name":"React.ReactNode"}},"refProp":{"description":"Key of the prop that should be used to get element ref","name":"refProp","required":false,"type":{"name":"string"}}}},"ProgressSection":{"props":{"animated":{"description":"Determines whether the sections stripes should be animated, if set, <code>striped</code> prop is ignored, <code>false</code> by default","name":"animated","required":false,"type":{"name":"boolean"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS value, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"striped":{"description":"Determines whether the section should have stipes, <code>false</code> by default","name":"striped","required":false,"type":{"name":"boolean"}},"value":{"description":"Value of the section in 0–100 range","name":"value","required":true,"type":{"name":"number"}},"withAria":{"description":"Determines whether <code>aria-*</code> props should be added to the root element, <code>true</code> by default","name":"withAria","required":false,"type":{"name":"boolean"}}}},"ProgressRoot":{"props":{"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"size":{"description":"Controls track height, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}}}},"ChipGroup":{"props":{"children":{"description":"<code>Chip</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"defaultValue":{"description":"Uncontrolled component initial value","name":"defaultValue","required":false,"type":{"name":"string | string[] | null"}},"multiple":{"description":"Determines whether it is allowed to select multiple values, <code>false</code> by default","name":"multiple","required":false,"type":{"name":"boolean"}},"onChange":{"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"((value: T extends true ? string[] : string) => void)"}},"value":{"description":"Controlled component value","name":"value","required":false,"type":{"name":"string | string[] | null"}}}},"CardSection":{"props":{"inheritPadding":{"description":"Determines whether the section should inherit padding from the parent <code>Card</code>, <code>false</code> by default","name":"inheritPadding","required":false,"type":{"name":"boolean"}},"withBorder":{"description":"Determines whether the section should have a border, <code>false</code> by default","name":"withBorder","required":false,"type":{"name":"boolean"}}}},"StepperStep":{"props":{"allowStepClick":{"description":"Set to false to disable clicks on step","name":"allowStepClick","required":false,"type":{"name":"boolean"}},"allowStepSelect":{"description":"Should step selection be allowed","name":"allowStepSelect","required":false,"type":{"name":"boolean"}},"color":{"description":"Key of <code>theme.colors</code>, by default controlled by Stepper component","name":"color","required":false,"type":{"name":"MantineColor"}},"completedIcon":{"description":"Step icon displayed when step is completed","name":"completedIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"description":{"description":"Step description","name":"description","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"icon":{"description":"Step icon, defaults to step index + 1 when rendered within Stepper","name":"icon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"iconPosition":{"description":"Icon position relative to step body, controlled by Stepper component","name":"iconPosition","required":false,"type":{"name":"\\"left\\" | \\"right\\"","raw":"\\"left\\" | \\"right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"left\\""},{"value":"\\"right\\""}]}},"iconSize":{"description":"Icon wrapper size","name":"iconSize","required":false,"type":{"name":"number"}},"label":{"description":"Step label, render after icon","name":"label","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"loading":{"description":"Indicates loading state of the step","name":"loading","required":false,"type":{"name":"boolean"}},"orientation":{"description":"Component orientation","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"progressIcon":{"description":"Step icon displayed when step is in progress","name":"progressIcon","required":false,"type":{"name":"ReactNode | StepFragmentComponent"}},"state":{"description":"Step state, controlled by Stepper component","name":"state","required":false,"type":{"name":"\\"stepInactive\\" | \\"stepProgress\\" | \\"stepCompleted\\"","raw":"\\"stepInactive\\" | \\"stepProgress\\" | \\"stepCompleted\\" | undefined","value":[{"value":"undefined"},{"value":"\\"stepInactive\\""},{"value":"\\"stepProgress\\""},{"value":"\\"stepCompleted\\""}]}},"step":{"description":"Step index, controlled by Stepper component *","name":"step","required":false,"type":{"name":"number"}},"withIcon":{"description":"Determines whether the icon should be displayed","name":"withIcon","required":false,"type":{"name":"boolean"}}}},"TimelineItem":{"props":{"bullet":{"description":"React node that should be rendered inside the bullet – icon, image, avatar, etc. By default, large white dot is displayed.","name":"bullet","required":false,"type":{"name":"React.ReactNode"}},"children":{"description":"Content displayed below the title","name":"children","required":false,"type":{"name":"React.ReactNode"}},"color":{"description":"Key of <code>theme.colors</code> or any valid CSS color to control active item colors, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"lineVariant":{"description":"Controls line border style, <code>\'solid\'</code> by default","name":"lineVariant","required":false,"type":{"name":"\\"dashed\\" | \\"dotted\\" | \\"solid\\"","raw":"\\"dashed\\" | \\"dotted\\" | \\"solid\\" | undefined","value":[{"value":"undefined"},{"value":"\\"dashed\\""},{"value":"\\"dotted\\""},{"value":"\\"solid\\""}]}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>\'xl\'</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"title":{"description":"Item title, displayed next to the bullet","name":"title","required":false,"type":{"name":"React.ReactNode"}}}},"ListItem":{"props":{"children":{"description":"Item content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"icon":{"description":"Icon to replace item bullet","name":"icon","required":false,"type":{"name":"React.ReactNode"}}}},"Spotlight":{"props":{"actions":{"description":"Actions data, passed down to <code>Spotlight.Action</code> component","name":"actions","required":true,"type":{"name":"SpotlightActions[]"}},"centered":{"description":"Determines whether the modal should be centered vertically, <code>false</code> by default","name":"centered","required":false,"type":{"name":"boolean"}},"children":{"description":"Modal content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clearQueryOnClose":{"description":"Determines whether the search query should be cleared when the spotlight is closed, <code>true</code> by default","name":"clearQueryOnClose","required":false,"type":{"name":"boolean"}},"closeOnActionTrigger":{"description":"Determines whether spotlight should be closed when one of the actions is triggered, <code>true</code> by default","name":"closeOnActionTrigger","required":false,"type":{"name":"boolean"}},"closeOnClickOutside":{"description":"Determines whether the modal/drawer should be closed when user clicks on the overlay, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether <code>onClose</code> should be called when user presses the escape key, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"disabled":{"description":"If set, spotlight will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"filter":{"description":"Function to filter actions data based on search query, by default actions are filtered by title, description and keywords","name":"filter","required":false,"type":{"name":"SpotlightFilterFunction"}},"forceOpened":{"description":"Forces opened state, useful for tests","name":"forceOpened","required":false,"type":{"name":"boolean"}},"fullScreen":{"description":"Determines whether the modal should take the entire screen, <code>false</code> by default","name":"fullScreen","required":false,"type":{"name":"boolean"}},"highlightQuery":{"description":"Determines whether search query should be highlighted in action label, <code>false</code> by default","name":"highlightQuery","required":false,"type":{"name":"boolean"}},"id":{"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"limit":{"description":"Maximum number of actions displayed at a time, <code>Infinity</code> by default","name":"limit","required":false,"type":{"name":"number"}},"lockScroll":{"description":"Determines whether scroll should be locked when <code>opened={true}</code>, <code>true</code> by default","name":"lockScroll","required":false,"type":{"name":"boolean"}},"maxHeight":{"description":"Spotlight content max-height. Ignored unless <code>scrollable</code> prop is set. <code>400</code> by default","name":"maxHeight","required":false,"type":{"name":"MaxHeight<string | number>"}},"nothingFound":{"description":"Message displayed when none of the actions match given <code>filter</code>","name":"nothingFound","required":false,"type":{"name":"React.ReactNode"}},"onQueryChange":{"description":"Called when query changes","name":"onQueryChange","required":false,"type":{"name":"((query: string) => void)"}},"onSpotlightClose":{"description":"Called when spotlight closes","name":"onSpotlightClose","required":false,"type":{"name":"(() => void)"}},"onSpotlightOpen":{"description":"Called when spotlight opens","name":"onSpotlightOpen","required":false,"type":{"name":"(() => void)"}},"overlayProps":{"description":"Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding, <code>\'md\'</code> by default","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"query":{"description":"Controlled Spotlight search query","name":"query","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"description":"Determines whether focus should be returned to the last active element when <code>onClose</code> is called, <code>true</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"description":"Scroll area component, native <code>div</code> element by default","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"scrollable":{"description":"Determines whether the actions list should be scrollable. If not set, <code>maxHeight</code> is ignored, <code>false</code> by default","name":"scrollable","required":false,"type":{"name":"boolean"}},"searchProps":{"description":"Props passed down to the <code>Spotlight.Search</code>","name":"searchProps","required":false,"type":{"name":"SpotlightSearchProps"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value, \'xl\' by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"shortcut":{"description":"Keyboard shortcut or a list of shortcuts to trigger spotlight, <code>\'mod + K\'</code> by default","name":"shortcut","required":false,"type":{"name":"string | string[] | null"}},"size":{"description":"Controls width of the content area, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"store":{"description":"Spotlight store, can be used to create multiple instances of spotlight","name":"store","required":false,"type":{"name":"SpotlightStore"}},"tagsToIgnore":{"description":"A list of tags which when focused will be ignored by shortcut, <code>[\'input\', \'textarea\', \'select\']</code> by default","name":"tagsToIgnore","required":false,"type":{"name":"string[]"}},"title":{"description":"Modal title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'pop\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped, <code>true</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"triggerOnContentEditable":{"description":"Determines whether shortcut should trigger based in contentEditable, <code>false</code> by default","name":"triggerOnContentEditable","required":false,"type":{"name":"boolean"}},"withOverlay":{"description":"Determines whether the overlay should be rendered, <code>true</code> by default","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether the component should be rendered inside <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"xOffset":{"description":"Left/right modal offset, <code>5vw</code> by default","name":"xOffset","required":false,"type":{"name":"MarginLeft<string | number>"}},"yOffset":{"description":"Top/bottom modal offset, <code>5dvh</code> by default","name":"yOffset","required":false,"type":{"name":"MarginTop<string | number>"}},"zIndex":{"description":"<code>z-index</code> CSS property of the root element, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"SpotlightAction":{"props":{"children":{"description":"Children override default action elements, if passed, label, description and sections are hidden","name":"children","required":false,"type":{"name":"React.ReactNode"}},"closeSpotlightOnTrigger":{"description":"Determines whether the spotlight should be closed when action is triggered, overrides <code>closeOnActionTrigger</code> prop set on <code>Spotlight</code>","name":"closeSpotlightOnTrigger","required":false,"type":{"name":"boolean"}},"description":{"description":"Action description, pass string to use in default filter","name":"description","required":false,"type":{"name":"string"}},"dimmedSections":{"description":"Determines whether left and right sections should have dimmed styles, <code>true</code> by default","name":"dimmedSections","required":false,"type":{"name":"boolean"}},"highlightColor":{"description":"Key of <code>theme.colors</code> of any valid CSS color that will be used to highlight search query, <code>\'yellow\'</code> by default","name":"highlightColor","required":false,"type":{"name":"MantineColor"}},"highlightQuery":{"description":"Determines whether search query should be highlighted in action label, <code>false</code> by default","name":"highlightQuery","required":false,"type":{"name":"boolean"}},"keywords":{"description":"Keywords that are used for default filtering, not displayed anywhere, can be a string: \\"react,router,javascript\\" or an array: [\'react\', \'router\', \'javascript\']","name":"keywords","required":false,"type":{"name":"string | string[]"}},"label":{"description":"Action label, pass string to use in default filter","name":"label","required":false,"type":{"name":"string"}},"leftSection":{"description":"Section displayed on the left side of the label, for example, icon","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"rightSection":{"description":"Section displayed on the right side of the label, for example, hotkey","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}}}},"SpotlightActionsGroup":{"props":{"children":{"description":"<code>Spotlight.Action</code> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"label":{"description":"Group label","name":"label","required":false,"type":{"name":"React.ReactNode"}}}},"SpotlightRoot":{"props":{"centered":{"description":"Determines whether the modal should be centered vertically, <code>false</code> by default","name":"centered","required":false,"type":{"name":"boolean"}},"children":{"description":"Modal content","name":"children","required":false,"type":{"name":"React.ReactNode"}},"clearQueryOnClose":{"description":"Determines whether the search query should be cleared when the spotlight is closed, <code>true</code> by default","name":"clearQueryOnClose","required":false,"type":{"name":"boolean"}},"closeOnActionTrigger":{"description":"Determines whether spotlight should be closed when one of the actions is triggered, <code>true</code> by default","name":"closeOnActionTrigger","required":false,"type":{"name":"boolean"}},"closeOnClickOutside":{"description":"Determines whether the modal/drawer should be closed when user clicks on the overlay, <code>true</code> by default","name":"closeOnClickOutside","required":false,"type":{"name":"boolean"}},"closeOnEscape":{"description":"Determines whether <code>onClose</code> should be called when user presses the escape key, <code>true</code> by default","name":"closeOnEscape","required":false,"type":{"name":"boolean"}},"disabled":{"description":"If set, spotlight will not be rendered","name":"disabled","required":false,"type":{"name":"boolean"}},"forceOpened":{"description":"Forces opened state, useful for tests","name":"forceOpened","required":false,"type":{"name":"boolean"}},"fullScreen":{"description":"Determines whether the modal should take the entire screen, <code>false</code> by default","name":"fullScreen","required":false,"type":{"name":"boolean"}},"id":{"description":"Id used to connect modal/drawer with body and title","name":"id","required":false,"type":{"name":"string"}},"keepMounted":{"description":"If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead, <code>false</code> by default","name":"keepMounted","required":false,"type":{"name":"boolean"}},"lockScroll":{"description":"Determines whether scroll should be locked when <code>opened={true}</code>, <code>true</code> by default","name":"lockScroll","required":false,"type":{"name":"boolean"}},"maxHeight":{"description":"Spotlight content max-height. Ignored unless <code>scrollable</code> prop is set. <code>400</code> by default","name":"maxHeight","required":false,"type":{"name":"MaxHeight<string | number>"}},"onQueryChange":{"description":"Called when query changes","name":"onQueryChange","required":false,"type":{"name":"((query: string) => void)"}},"onSpotlightClose":{"description":"Called when spotlight closes","name":"onSpotlightClose","required":false,"type":{"name":"(() => void)"}},"onSpotlightOpen":{"description":"Called when spotlight opens","name":"onSpotlightOpen","required":false,"type":{"name":"(() => void)"}},"overlayProps":{"description":"Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties","name":"overlayProps","required":false,"type":{"name":"ModalBaseOverlayProps"}},"padding":{"description":"Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding, <code>\'md\'</code> by default","name":"padding","required":false,"type":{"name":"MantineSpacing"}},"portalProps":{"description":"Props passed down to the Portal component when <code>withinPortal</code> is set","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"query":{"description":"Controlled Spotlight search query","name":"query","required":false,"type":{"name":"string"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"removeScrollProps":{"description":"Props passed down to react-remove-scroll, can be used to customize scroll lock behavior","name":"removeScrollProps","required":false,"type":{"name":"RemoveScrollProps"}},"returnFocus":{"description":"Determines whether focus should be returned to the last active element when <code>onClose</code> is called, <code>true</code> by default","name":"returnFocus","required":false,"type":{"name":"boolean"}},"scrollAreaComponent":{"description":"Scroll area component, native <code>div</code> element by default","name":"scrollAreaComponent","required":false,"type":{"name":"ScrollAreaComponent"}},"scrollable":{"description":"Determines whether the actions list should be scrollable. If not set, <code>maxHeight</code> is ignored, <code>false</code> by default","name":"scrollable","required":false,"type":{"name":"boolean"}},"shadow":{"description":"Key of <code>theme.shadows</code> or any valid CSS box-shadow value, \'xl\' by default","name":"shadow","required":false,"type":{"name":"MantineShadow"}},"shortcut":{"description":"Keyboard shortcut or a list of shortcuts to trigger spotlight, <code>\'mod + K\'</code> by default","name":"shortcut","required":false,"type":{"name":"string | string[] | null"}},"size":{"description":"Controls width of the content area, <code>\'md\'</code> by default","name":"size","required":false,"type":{"name":"number | MantineSize | (string & {})"}},"store":{"description":"Spotlight store, can be used to create multiple instances of spotlight","name":"store","required":false,"type":{"name":"SpotlightStore"}},"tagsToIgnore":{"description":"A list of tags which when focused will be ignored by shortcut, <code>[\'input\', \'textarea\', \'select\']</code> by default","name":"tagsToIgnore","required":false,"type":{"name":"string[]"}},"title":{"description":"Modal title","name":"title","required":false,"type":{"name":"React.ReactNode"}},"transitionProps":{"description":"Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type, <code>{ duration: 200, transition: \'pop\' }</code> by default","name":"transitionProps","required":false,"type":{"name":"Partial<Omit<TransitionProps, \\"mounted\\">>"}},"trapFocus":{"description":"Determines whether focus should be trapped, <code>true</code> by default","name":"trapFocus","required":false,"type":{"name":"boolean"}},"triggerOnContentEditable":{"description":"Determines whether shortcut should trigger based in contentEditable, <code>false</code> by default","name":"triggerOnContentEditable","required":false,"type":{"name":"boolean"}},"withOverlay":{"description":"Determines whether the overlay should be rendered, <code>true</code> by default","name":"withOverlay","required":false,"type":{"name":"boolean"}},"withinPortal":{"description":"Determines whether the component should be rendered inside <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"xOffset":{"description":"Left/right modal offset, <code>5vw</code> by default","name":"xOffset","required":false,"type":{"name":"MarginLeft<string | number>"}},"yOffset":{"description":"Top/bottom modal offset, <code>5dvh</code> by default","name":"yOffset","required":false,"type":{"name":"MarginTop<string | number>"}},"zIndex":{"description":"<code>z-index</code> CSS property of the root element, <code>200</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}},"SpotlightSearch":{"props":{"disabled":{"description":"Sets <code>disabled</code> attribute on the <code>input</code> element","name":"disabled","required":false,"type":{"name":"boolean"}},"error":{"description":"Determines whether the input should have error styles and <code>aria-invalid</code> attribute","name":"error","required":false,"type":{"name":"React.ReactNode"}},"id":{"description":"Input element id","name":"id","required":false,"type":{"name":"string"}},"leftSection":{"description":"Content section rendered on the left side of the input","name":"leftSection","required":false,"type":{"name":"React.ReactNode"}},"leftSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>leftSection</code> element, <code>\'none\'</code> by default","name":"leftSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"leftSectionProps":{"description":"Props added to the <code>leftSection</code> element","name":"leftSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"leftSectionWidth":{"description":"Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height","name":"leftSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"multiline":{"description":"Determines whether the input can have multiple lines, for example when <code>component=\\"textarea\\"</code>, <code>false</code> by default","name":"multiline","required":false,"type":{"name":"boolean"}},"pointer":{"description":"Determines whether the input should have <code>cursor: pointer</code> style, <code>false</code> by default","name":"pointer","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"required":{"description":"Sets <code>required</code> attribute on the <code>input</code> element","name":"required","required":false,"type":{"name":"boolean"}},"rightSection":{"description":"Content section rendered on the right side of the input","name":"rightSection","required":false,"type":{"name":"React.ReactNode"}},"rightSectionPointerEvents":{"description":"Sets <code>pointer-events</code> styles on the <code>rightSection</code> element, <code>\'none\'</code> by default","name":"rightSectionPointerEvents","required":false,"type":{"name":"React.CSSProperties[\\"pointerEvents\\"]","raw":"PointerEvents | undefined","value":[{"value":"undefined"},{"value":"\\"-moz-initial\\""},{"value":"\\"inherit\\""},{"value":"\\"initial\\""},{"value":"\\"revert\\""},{"value":"\\"unset\\""},{"value":"\\"none\\""},{"value":"\\"auto\\""},{"value":"\\"all\\""},{"value":"\\"fill\\""},{"value":"\\"stroke\\""},{"value":"\\"painted\\""},{"value":"\\"visible\\""},{"value":"\\"visibleFill\\""},{"value":"\\"visiblePainted\\""},{"value":"\\"visibleStroke\\""}]}},"rightSectionProps":{"description":"Props added to the <code>rightSection</code> element","name":"rightSectionProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"div\\">"}},"rightSectionWidth":{"description":"Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height","name":"rightSectionWidth","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"size":{"description":"Controls input <code>height</code> and horizontal <code>padding</code>, <code>\'sm\'</code> by default","name":"size","required":false,"type":{"name":"MantineSize | (string & {})"}},"withAria":{"description":"Determines whether <code>aria-</code> and other accessibility attributes should be added to the input, <code>true</code> by default","name":"withAria","required":false,"type":{"name":"boolean"}},"withErrorStyles":{"description":"Determines whether the input should have red border and text color when <code>error</code> prop is set, <code>true</code> by default","name":"withErrorStyles","required":false,"type":{"name":"boolean"}},"wrapperProps":{"description":"Props added to the root element of the <code>Input</code> component","name":"wrapperProps","required":false,"type":{"name":"Record<string, any>"}}}},"Carousel":{"props":{"align":{"description":"Determines how slides will be aligned relative to the container. Use number between 0-1 to align slides based on percentage, where 0.5 is 50%, <code>\'center\'</code> by default","name":"align","required":false,"type":{"name":"number | \\"center\\" | \\"end\\" | \\"start\\""}},"children":{"description":"<Carousel.Slide /> components","name":"children","required":false,"type":{"name":"React.ReactNode"}},"containScroll":{"description":"Clear leading and trailing empty space that causes excessive scrolling. Use <code>trimSnaps</code> to only use snap points that trigger scrolling or keepSnaps to keep them.","name":"containScroll","required":false,"type":{"name":"\\"\\" | \\"trimSnaps\\" | \\"keepSnaps\\"","raw":"\\"\\" | \\"trimSnaps\\" | \\"keepSnaps\\" | undefined","value":[{"value":"undefined"},{"value":"\\"\\""},{"value":"\\"trimSnaps\\""},{"value":"\\"keepSnaps\\""}]}},"controlSize":{"description":"Controls size of the next and previous controls, <code>26</code> by default","name":"controlSize","required":false,"type":{"name":"React.CSSProperties[\\"width\\"]"}},"controlsOffset":{"description":"Controls position of the next and previous controls, key of <code>theme.spacing</code> or any valid CSS value, <code>\'sm\'</code> by default","name":"controlsOffset","required":false,"type":{"name":"MantineSpacing"}},"dragFree":{"description":"Determines whether momentum scrolling should be enabled, <code>false</code> by default","name":"dragFree","required":false,"type":{"name":"boolean"}},"draggable":{"description":"Determines whether the carousel can be scrolled with mouse and touch interactions, <code>true</code> by default","name":"draggable","required":false,"type":{"name":"boolean"}},"getEmblaApi":{"description":"Get embla API as ref","name":"getEmblaApi","required":false,"type":{"name":"((embla: EmblaCarouselType) => void)"}},"height":{"description":"Slides container <code>height</code>, required for vertical orientation","name":"height","required":false,"type":{"name":"Height<string | number>"}},"inViewThreshold":{"description":"Choose a fraction representing the percentage portion of a slide that needs to be visible in order to be considered in view. For example, 0.5 equals 50%.","name":"inViewThreshold","required":false,"type":{"name":"number"}},"includeGapInSize":{"description":"Determines whether gap between slides should be treated as part of the slide size, <code>true</code> by default","name":"includeGapInSize","required":false,"type":{"name":"boolean"}},"initialSlide":{"description":"Index of initial slide","name":"initialSlide","required":false,"type":{"name":"number"}},"loop":{"description":"Enables infinite looping. <code>true</code> by default, automatically falls back to <code>false</code> if slide content isn\'t enough to loop.","name":"loop","required":false,"type":{"name":"boolean"}},"nextControlIcon":{"description":"Icon of the next control","name":"nextControlIcon","required":false,"type":{"name":"React.ReactNode"}},"nextControlProps":{"description":"Props passed down to next control","name":"nextControlProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"onNextSlide":{"description":"Called when next slide is shown","name":"onNextSlide","required":false,"type":{"name":"(() => void)"}},"onPreviousSlide":{"description":"Called when previous slider is shown","name":"onPreviousSlide","required":false,"type":{"name":"(() => void)"}},"onSlideChange":{"description":"Called with slide index when slide changes","name":"onSlideChange","required":false,"type":{"name":"((index: number) => void)"}},"orientation":{"description":"Carousel orientation, <code>\'horizontal\'</code> by default","name":"orientation","required":false,"type":{"name":"\\"horizontal\\" | \\"vertical\\"","raw":"\\"horizontal\\" | \\"vertical\\" | undefined","value":[{"value":"undefined"},{"value":"\\"horizontal\\""},{"value":"\\"vertical\\""}]}},"plugins":{"description":"An array of embla plugins","name":"plugins","required":false,"type":{"name":"CreatePluginType<LoosePluginType, {}>[]"}},"previousControlIcon":{"description":"Icon of the previous control","name":"previousControlIcon","required":false,"type":{"name":"React.ReactNode"}},"previousControlProps":{"description":"Props passed down to previous control","name":"previousControlProps","required":false,"type":{"name":"React.ComponentPropsWithoutRef<\\"button\\">"}},"skipSnaps":{"description":"Allow the carousel to skip scroll snaps if it is dragged vigorously. Note that this option will be ignored if the dragFree option is set to <code>true</code>, <code>false</code> by default","name":"skipSnaps","required":false,"type":{"name":"boolean"}},"slideGap":{"description":"Key of theme.spacing or number to set gap between slides","name":"slideGap","required":false,"type":{"name":"StyleProp<MantineSpacing>"}},"slideSize":{"description":"Controls slide width based on viewport width, <code>\'100%\'</code> by default","name":"slideSize","required":false,"type":{"name":"StyleProp<string | number>"}},"slidesToScroll":{"description":"Number of slides that will be scrolled with next/previous buttons, <code>1</code> by default","name":"slidesToScroll","required":false,"type":{"name":"number | \\"auto\\""}},"speed":{"description":"Adjusts scroll speed when triggered by any of the methods. Higher numbers enables faster scrolling.","name":"speed","required":false,"type":{"name":"number"}},"withControls":{"description":"Determines whether next/previous controls should be displayed, true by default","name":"withControls","required":false,"type":{"name":"boolean"}},"withIndicators":{"description":"Determines whether indicators should be displayed, <code>false</code> by default","name":"withIndicators","required":false,"type":{"name":"boolean"}},"withKeyboardEvents":{"description":"Determines whether arrow key should switch slides, <code>true</code> by default","name":"withKeyboardEvents","required":false,"type":{"name":"boolean"}}}},"Dropzone":{"props":{"accept":{"description":"Mime types of the files that dropzone can accepts. By default, dropzone accepts all file types.","name":"accept","required":false,"type":{"name":"string[] | Accept"}},"acceptColor":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Accept</code>, <code>theme.primaryColor</code> by default","name":"acceptColor","required":false,"type":{"name":"MantineColor"}},"activateOnClick":{"description":"If <code>false</code>, disables click to open the native file selection dialog","name":"activateOnClick","required":false,"type":{"name":"boolean"}},"activateOnDrag":{"description":"If <code>false</code>, disables drag \'n\' drop","name":"activateOnDrag","required":false,"type":{"name":"boolean"}},"activateOnKeyboard":{"description":"If <code>false</code>, disables Space/Enter to open the native file selection dialog. Note that it also stops tracking the focus state.","name":"activateOnKeyboard","required":false,"type":{"name":"boolean"}},"autoFocus":{"description":"Set to autofocus the root element","name":"autoFocus","required":false,"type":{"name":"boolean"}},"disabled":{"description":"Determines whether files capturing should be disabled, <code>false</code> by default","name":"disabled","required":false,"type":{"name":"boolean"}},"dragEventsBubbling":{"description":"If <code>false</code>, stops drag event propagation to parents","name":"dragEventsBubbling","required":false,"type":{"name":"boolean"}},"enablePointerEvents":{"description":"Determines whether pointer events should be enabled on the inner element, <code>false</code> by default","name":"enablePointerEvents","required":false,"type":{"name":"boolean"}},"getFilesFromEvent":{"description":"Use this to provide a custom file aggregator","name":"getFilesFromEvent","required":false,"type":{"name":"((event: DropEvent) => Promise<(File | DataTransferItem)[]>)"}},"loaderProps":{"description":"Props passed down to the Loader component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"description":"Determines whether a loading overlay should be displayed over the dropzone, <code>false</code> by default","name":"loading","required":false,"type":{"name":"boolean"}},"maxFiles":{"description":"Maximum number of files that can be picked at once","name":"maxFiles","required":false,"type":{"name":"number"}},"maxSize":{"description":"Maximum file size in bytes","name":"maxSize","required":false,"type":{"name":"number"}},"multiple":{"description":"Determines whether multiple files can be dropped to the dropzone or selected from file system picker, <code>true</code> by default","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"description":"Name of the form control. Submitted with the form as part of a name/value pair.","name":"name","required":false,"type":{"name":"string"}},"onDragEnter":{"description":"Called when the <code>dragenter</code> event occurs","name":"onDragEnter","required":false,"type":{"name":"((event: DragEvent<HTMLElement>) => void)"}},"onDragLeave":{"description":"Called when the <code>dragleave</code> event occurs","name":"onDragLeave","required":false,"type":{"name":"((event: DragEvent<HTMLElement>) => void)"}},"onDragOver":{"description":"Called when the <code>dragover</code> event occurs","name":"onDragOver","required":false,"type":{"name":"((event: DragEvent<HTMLElement>) => void)"}},"onDrop":{"description":"Called when valid files are dropped to the dropzone","name":"onDrop","required":true,"type":{"name":"(files: FileWithPath[]) => void"}},"onDropAny":{"description":"Called when any files are dropped to the dropzone","name":"onDropAny","required":false,"type":{"name":"((files: FileWithPath[], fileRejections: FileRejection[]) => void)"}},"onFileDialogCancel":{"description":"Called when user closes the file selection dialog with no selection","name":"onFileDialogCancel","required":false,"type":{"name":"(() => void)"}},"onFileDialogOpen":{"description":"Called when user opens the file selection dialog","name":"onFileDialogOpen","required":false,"type":{"name":"(() => void)"}},"onReject":{"description":"Called when dropped files do not meet file restrictions","name":"onReject","required":false,"type":{"name":"((fileRejections: FileRejection[]) => void)"}},"openRef":{"description":"A ref function which when called opens the file system file picker","name":"openRef","required":false,"type":{"name":"ForwardedRef<() => void> | undefined"}},"preventDropOnDocument":{"description":"If <code>false</code>, allow dropped items to take over the current browser window","name":"preventDropOnDocument","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rejectColor":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Reject</code>, <code>\'red\'</code> by default","name":"rejectColor","required":false,"type":{"name":"MantineColor"}},"useFsAccessApi":{"description":"Set to true to use the File System Access API to open the file picker instead of using an <input type=\\"file\\"> click event, defaults to true","name":"useFsAccessApi","required":false,"type":{"name":"boolean"}},"validator":{"description":"Custom validation function. It must return null if there\'s no errors.","name":"validator","required":false,"type":{"name":"(<T extends File>(file: T) => FileError | FileError[] | null)"}}}},"DropzoneFullScreen":{"props":{"accept":{"description":"Mime types of the files that dropzone can accepts. By default, dropzone accepts all file types.","name":"accept","required":false,"type":{"name":"string[] | Accept"}},"acceptColor":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Accept</code>, <code>theme.primaryColor</code> by default","name":"acceptColor","required":false,"type":{"name":"MantineColor"}},"activateOnClick":{"description":"If <code>false</code>, disables click to open the native file selection dialog","name":"activateOnClick","required":false,"type":{"name":"boolean"}},"activateOnDrag":{"description":"If <code>false</code>, disables drag \'n\' drop","name":"activateOnDrag","required":false,"type":{"name":"boolean"}},"activateOnKeyboard":{"description":"If <code>false</code>, disables Space/Enter to open the native file selection dialog. Note that it also stops tracking the focus state.","name":"activateOnKeyboard","required":false,"type":{"name":"boolean"}},"active":{"description":"Determines whether user can drop files to browser window, true by default","name":"active","required":false,"type":{"name":"boolean"}},"autoFocus":{"description":"Set to autofocus the root element","name":"autoFocus","required":false,"type":{"name":"boolean"}},"disabled":{"description":"Determines whether files capturing should be disabled, <code>false</code> by default","name":"disabled","required":false,"type":{"name":"boolean"}},"dragEventsBubbling":{"description":"If <code>false</code>, stops drag event propagation to parents","name":"dragEventsBubbling","required":false,"type":{"name":"boolean"}},"enablePointerEvents":{"description":"Determines whether pointer events should be enabled on the inner element, <code>false</code> by default","name":"enablePointerEvents","required":false,"type":{"name":"boolean"}},"getFilesFromEvent":{"description":"Use this to provide a custom file aggregator","name":"getFilesFromEvent","required":false,"type":{"name":"((event: DropEvent) => Promise<(File | DataTransferItem)[]>)"}},"loaderProps":{"description":"Props passed down to the Loader component","name":"loaderProps","required":false,"type":{"name":"LoaderProps"}},"loading":{"description":"Determines whether a loading overlay should be displayed over the dropzone, <code>false</code> by default","name":"loading","required":false,"type":{"name":"boolean"}},"maxFiles":{"description":"Maximum number of files that can be picked at once","name":"maxFiles","required":false,"type":{"name":"number"}},"maxSize":{"description":"Maximum file size in bytes","name":"maxSize","required":false,"type":{"name":"number"}},"multiple":{"description":"Determines whether multiple files can be dropped to the dropzone or selected from file system picker, <code>true</code> by default","name":"multiple","required":false,"type":{"name":"boolean"}},"name":{"description":"Name of the form control. Submitted with the form as part of a name/value pair.","name":"name","required":false,"type":{"name":"string"}},"onDragEnter":{"description":"Called when the <code>dragenter</code> event occurs","name":"onDragEnter","required":false,"type":{"name":"((event: DragEvent<HTMLElement>) => void)"}},"onDragLeave":{"description":"Called when the <code>dragleave</code> event occurs","name":"onDragLeave","required":false,"type":{"name":"((event: DragEvent<HTMLElement>) => void)"}},"onDragOver":{"description":"Called when the <code>dragover</code> event occurs","name":"onDragOver","required":false,"type":{"name":"((event: DragEvent<HTMLElement>) => void)"}},"onDrop":{"description":"Called when valid files are dropped to the dropzone","name":"onDrop","required":true,"type":{"name":"(files: FileWithPath[]) => void"}},"onDropAny":{"description":"Called when any files are dropped to the dropzone","name":"onDropAny","required":false,"type":{"name":"((files: FileWithPath[], fileRejections: FileRejection[]) => void)"}},"onFileDialogCancel":{"description":"Called when user closes the file selection dialog with no selection","name":"onFileDialogCancel","required":false,"type":{"name":"(() => void)"}},"onFileDialogOpen":{"description":"Called when user opens the file selection dialog","name":"onFileDialogOpen","required":false,"type":{"name":"(() => void)"}},"onReject":{"description":"Called when dropped files do not meet file restrictions","name":"onReject","required":false,"type":{"name":"((fileRejections: FileRejection[]) => void)"}},"openRef":{"description":"A ref function which when called opens the file system file picker","name":"openRef","required":false,"type":{"name":"ForwardedRef<() => void> | undefined"}},"portalProps":{"description":"Props to pass down to the portal when withinPortal is true","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\" | \\"withinPortal\\">"}},"preventDropOnDocument":{"description":"If <code>false</code>, allow dropped items to take over the current browser window","name":"preventDropOnDocument","required":false,"type":{"name":"boolean"}},"radius":{"description":"Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem, <code>theme.defaultRadius</code> by default","name":"radius","required":false,"type":{"name":"MantineRadius | number"}},"rejectColor":{"description":"Key of <code>theme.colors</code> or any valid CSS color to set colors of <code>Dropzone.Reject</code>, <code>\'red\'</code> by default","name":"rejectColor","required":false,"type":{"name":"MantineColor"}},"useFsAccessApi":{"description":"Set to true to use the File System Access API to open the file picker instead of using an <input type=\\"file\\"> click event, defaults to true","name":"useFsAccessApi","required":false,"type":{"name":"boolean"}},"validator":{"description":"Custom validation function. It must return null if there\'s no errors.","name":"validator","required":false,"type":{"name":"(<T extends File>(file: T) => FileError | FileError[] | null)"}},"withinPortal":{"description":"Determines whether component should be rendered within Portal, true by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"z-index value, 9999 by default","name":"zIndex","required":false,"type":{"name":"ZIndex"}}}},"CodeHighlight":{"props":{"code":{"description":"Code to highlight","name":"code","required":true,"type":{"name":"string"}},"copiedLabel":{"description":"Copied tooltip label, <code>\'Copied\'</code> by default","name":"copiedLabel","required":false,"type":{"name":"string"}},"copyLabel":{"description":"Copy tooltip label, <code>\'Copy code\'</code> by default","name":"copyLabel","required":false,"type":{"name":"string"}},"highlightOnClient":{"description":"Determines whether code should be highlighted only after component is mounted to the dom (disables code highlight on server), <code>false</code> by default","name":"highlightOnClient","required":false,"type":{"name":"boolean"}},"language":{"description":"Code language, <code>\'tsx\'</code> by default","name":"language","required":false,"type":{"name":"string"}},"withCopyButton":{"description":"Determines whether copy button should be displayed, <code>true</code> by default","name":"withCopyButton","required":false,"type":{"name":"boolean"}}}},"CodeHighlightTabs":{"props":{"activeTab":{"description":"Index of controlled active tab state","name":"activeTab","required":false,"type":{"name":"number"}},"code":{"description":"Code to highlight with meta data (file name and icon)","name":"code","required":true,"type":{"name":"CodeHighlightTabsCode | CodeHighlightTabsCode[]"}},"collapseCodeLabel":{"description":"Collapse button label and tooltip, <code>\'Collapse code\'</code> by default","name":"collapseCodeLabel","required":false,"type":{"name":"string"}},"copiedLabel":{"description":"Copied tooltip label, <code>\'Copied\'</code> by default","name":"copiedLabel","required":false,"type":{"name":"string"}},"copyLabel":{"description":"Copy tooltip label, <code>\'Copy code\'</code> by default","name":"copyLabel","required":false,"type":{"name":"string"}},"defaultActiveTab":{"description":"Default active tab index","name":"defaultActiveTab","required":false,"type":{"name":"number"}},"defaultExpanded":{"description":"Uncontrolled expanded state initial value","name":"defaultExpanded","required":false,"type":{"name":"boolean"}},"expandCodeLabel":{"description":"Expand button label and tooltip, <code>\'Expand code\'</code> by default","name":"expandCodeLabel","required":false,"type":{"name":"string"}},"expanded":{"description":"Controlled expanded state","name":"expanded","required":false,"type":{"name":"boolean"}},"getFileIcon":{"description":"Function that returns icon based on file name","name":"getFileIcon","required":false,"type":{"name":"((fileName: string) => ReactNode)"}},"maxCollapsedHeight":{"description":"<code>max-height</code> of code in collapsed state","name":"maxCollapsedHeight","required":false,"type":{"name":"MaxHeight<string | number>"}},"onExpandedChange":{"description":"Called when expanded state changes","name":"onExpandedChange","required":false,"type":{"name":"((expanded: boolean) => void)"}},"onTabChange":{"description":"Called when tab changes","name":"onTabChange","required":false,"type":{"name":"((tab: number) => void)"}},"withExpandButton":{"description":"Determines whether to show the expand button, <code>false</code> by default","name":"withExpandButton","required":false,"type":{"name":"boolean"}},"withHeader":{"description":"Determines whether header with file names and copy button should be rendered, <code>true</code> by default","name":"withHeader","required":false,"type":{"name":"boolean"}}}},"InlineCodeHighlight":{"props":{"code":{"description":"Code to highlight","name":"code","required":true,"type":{"name":"string"}},"language":{"description":"Code language, <code>\'tsx\'</code> by default","name":"language","required":false,"type":{"name":"string"}}}},"NavigationProgress":{"props":{"color":{"description":"Key of <code>theme.colors</code> of any other valid CSS color, <code>theme.primaryColor</code> by default","name":"color","required":false,"type":{"name":"MantineColor"}},"initialProgress":{"description":"Initial progress value, <code>0</code> by default","name":"initialProgress","required":false,"type":{"name":"number"}},"portalProps":{"description":"Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is <code>true</code>","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\" | \\"withinPortal\\">"}},"size":{"description":"Controls height of the progress bar","name":"size","required":false,"type":{"name":"number"}},"stepInterval":{"description":"Step interval in ms, <code>500</code> by default","name":"stepInterval","required":false,"type":{"name":"number"}},"store":{"description":"Component store, controls state","name":"store","required":false,"type":{"name":"NprogressStore"}},"withinPortal":{"description":"Determines whether the progress bar should be rendered within <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Progressbar z-index, <code>9999</code> by default","name":"zIndex","required":false,"type":{"name":"ZIndex"}}}},"ModalsProvider":{"props":{"children":{"description":"Your app","name":"children","required":true,"type":{"name":"React.ReactNode"}},"labels":{"description":"Confirm modal labels","name":"labels","required":false,"type":{"name":"ConfirmLabels"}},"modalProps":{"description":"Shared Modal component props, applied for every modal","name":"modalProps","required":false,"type":{"name":"ModalSettings"}},"modals":{"description":"Predefined modals","name":"modals","required":false,"type":{"name":"Record<string, FC<ContextModalProps<any>>>"}}}},"RichTextEditor":{"props":{"children":{"description":"Child editor components","name":"children","required":true,"type":{"name":"React.ReactNode"}},"editor":{"description":"Tiptap editor instance","name":"editor","required":true,"type":{"name":"Editor | null"}},"labels":{"description":"Labels that are used in controls","name":"labels","required":false,"type":{"name":"Partial<RichTextEditorLabels>"}},"withCodeHighlightStyles":{"description":"Determines whether code highlight styles should be added, <code>true</code> by default","name":"withCodeHighlightStyles","required":false,"type":{"name":"boolean"}},"withTypographyStyles":{"description":"Determines whether typography styles should be added, <code>true</code> by default","name":"withTypographyStyles","required":false,"type":{"name":"boolean"}}}},"Notifications":{"props":{"autoClose":{"description":"Auto close timeout for all notifications in ms, <code>false</code> to disable auto close, can be overwritten for individual notifications in <code>notifications.show</code> function, <code>4000</code> by defualt","name":"autoClose","required":false,"type":{"name":"number | false"}},"containerWidth":{"description":"Notification width, cannot exceed 100%, <code>440</code> by default","name":"containerWidth","required":false,"type":{"name":"string | number"}},"limit":{"description":"Maximum number of notifications displayed at a time, other new notifications will be added to queue, <code>5</code> by default","name":"limit","required":false,"type":{"name":"number"}},"notificationMaxHeight":{"description":"Notification <code>max-height</code>, used for transitions, <code>200</code> by default","name":"notificationMaxHeight","required":false,"type":{"name":"string | number"}},"portalProps":{"description":"Props passed down to the <code>Portal</code> component","name":"portalProps","required":false,"type":{"name":"Omit<PortalProps, \\"children\\">"}},"position":{"description":"Notifications position, <code>\'bottom-right\'</code> by default","name":"position","required":false,"type":{"name":"\\"bottom-center\\" | \\"top-center\\" | \\"top-left\\" | \\"top-right\\" | \\"bottom-left\\" | \\"bottom-right\\"","raw":"\\"bottom-center\\" | \\"top-center\\" | \\"top-left\\" | \\"top-right\\" | \\"bottom-left\\" | \\"bottom-right\\" | undefined","value":[{"value":"undefined"},{"value":"\\"bottom-center\\""},{"value":"\\"top-center\\""},{"value":"\\"top-left\\""},{"value":"\\"top-right\\""},{"value":"\\"bottom-left\\""},{"value":"\\"bottom-right\\""}]}},"store":{"description":"Store for notifications state, can be used to create multiple instances of notifications system in your application","name":"store","required":false,"type":{"name":"NotificationsStore"}},"transitionDuration":{"description":"Notification transition duration in ms, <code>250</code> by default","name":"transitionDuration","required":false,"type":{"name":"number"}},"withinPortal":{"description":"Determines whether notifications container should be rendered inside <code>Portal</code>, <code>true</code> by default","name":"withinPortal","required":false,"type":{"name":"boolean"}},"zIndex":{"description":"Notifications container z-index, <code>400</code> by default","name":"zIndex","required":false,"type":{"name":"string | number"}}}}}');function u(e){let{component:t,query:o}=e;if(!p[t])return(0,n.jsx)(c.z,{errorOf:"props"});let r=Object.keys(p[t].props).filter(e=>p[t].props[e].name.toLowerCase().includes(o.toLowerCase().trim())).map(e=>{let r=p[t].props[e];return(0,n.jsxs)(a.i.Tr,{children:[(0,n.jsxs)(a.i.Td,{style:{whiteSpace:"nowrap"},children:[(0,n.jsx)(i.y,{highlight:o,component:"span",fz:"sm",children:r.name}),r.required&&(0,n.jsxs)(Text.x,{component:"sup",c:"red",fz:"xs",children:[" ","*"]})]}),(0,n.jsx)(a.i.Td,{children:(0,n.jsx)(l.e,{children:r.type.name})}),(0,n.jsx)(a.i.Td,{children:(0,n.jsx)(s.O,{fz:"sm",children:r.description})})]},e)});return 0===r.length?(0,n.jsx)(Text.x,{c:"dimmed",mb:"xl",fz:"sm",children:"Nothing found"}):(0,n.jsx)(d.U,{children:(0,n.jsx)(a.i.ScrollContainer,{minWidth:800,children:(0,n.jsxs)(a.i,{layout:"fixed",children:[(0,n.jsx)(a.i.Thead,{children:(0,n.jsxs)(a.i.Tr,{children:[(0,n.jsx)(a.i.Th,{w:210,children:"Name"}),(0,n.jsx)(a.i.Th,{w:310,children:"Type"}),(0,n.jsx)(a.i.Th,{children:"Description"})]})}),(0,n.jsx)(a.i.Tbody,{children:r})]})})})}var m=o(57847),f=o(7033),h=o(27854);function y(e){let{component:t,componentPrefix:o}=e;return o?o===t?t:"".concat(o,".").concat(t.replace(o,"")):t}var b=o(91333),v=o.n(b);function g(e){let{components:t,componentPrefix:o}=e,[a,i]=(0,r.useState)(""),d=t.map(e=>(0,n.jsxs)("div",{className:v().section,children:[(0,n.jsxs)(m.D,{order:2,className:v().title,children:[y({component:e,componentPrefix:o})," component props"]}),(0,n.jsx)(u,{component:e,query:a})]},e));return(0,n.jsxs)("div",{children:[(0,n.jsx)(f.o,{className:v().search,value:a,onChange:e=>i(e.currentTarget.value),leftSection:(0,n.jsx)(h.Z,{className:v().searchIcon}),placeholder:"Search props",radius:"md",size:"lg",autoFocus:!0}),d]})}},62763:function(e,t,o){"use strict";o.d(t,{Hx:function(){return tl},VX:function(){return td},D5:function(){return th},$w:function(){return ts}});var n={};o.r(n),o.d(n,{AccordionStylesApi:function(){return i.x},ActionIconGroupStylesApi:function(){return s},ActionIconStylesApi:function(){return d},AffixStylesApi:function(){return l},AlertStylesApi:function(){return c.g},AnchorStylesApi:function(){return u},AppShellStylesApi:function(){return m},AspectRatioStylesApi:function(){return f},AutocompleteStylesApi:function(){return h.I},AvatarGroupStylesApi:function(){return b},AvatarStylesApi:function(){return y},BackgroundImageStylesApi:function(){return v},BadgeStylesApi:function(){return g.o},BlockquoteStylesApi:function(){return w},BreadcrumbsStylesApi:function(){return q},BurgerStylesApi:function(){return S},ButtonGroupStylesApi:function(){return C.R},ButtonStylesApi:function(){return C.B},CalendarHeaderStylesApi:function(){return B},CalendarStylesApi:function(){return _},CardStylesApi:function(){return P},CarouselStylesApi:function(){return D.J},CenterStylesApi:function(){return R},CheckboxGroupStylesApi:function(){return x.I},CheckboxStylesApi:function(){return x.B},ChipStylesApi:function(){return k},CloseButtonStylesApi:function(){return z},CodeHighlightStylesApi:function(){return L},CodeHighlightTabsStylesApi:function(){return M},CodeStylesApi:function(){return I},ColorInputStylesApi:function(){return O.B},ColorPickerStylesApi:function(){return A.L},ColorSwatchStylesApi:function(){return E},ComboboxLikeSelectors:function(){return T.d},ComboboxStylesApi:function(){return T.$},ContainerStylesApi:function(){return F},DateInputStylesApi:function(){return $},DatePickerInputStylesApi:function(){return Q},DatePickerStylesApi:function(){return X},DateTimePickerStylesApi:function(){return ee},DecadeLevelGroupStylesApi:function(){return V},DialogStylesApi:function(){return eo},DividerStylesApi:function(){return en},DrawerStylesApi:function(){return er},DropzoneFullScreenStylesApi:function(){return ei},DropzoneStylesApi:function(){return ea},FieldsetStylesApi:function(){return ed},FileInputStylesApi:function(){return es.T},FlexStylesApi:function(){return el},GridStylesApi:function(){return ec},GroupStylesApi:function(){return ep},HighlightStylesApi:function(){return eu},HoverCardStylesApi:function(){return ef},ImageStylesApi:function(){return eh},IndicatorStylesApi:function(){return ey},InlineCodeHighlightStylesApi:function(){return N},InputBaseStylesApi:function(){return j},InputStylesApi:function(){return W.a},InputWrapperStylesApi:function(){return W.X},JsonInputStylesApi:function(){return eb.P},KbdStylesApi:function(){return ev},ListStylesApi:function(){return eg},LoaderStylesApi:function(){return ew},LoadingOverlayStylesApi:function(){return eq},MarkStylesApi:function(){return eS},MenuStylesApi:function(){return eC.k},ModalStylesApi:function(){return eP},MonthLevelGroupStylesApi:function(){return K},MonthPickerInputStylesApi:function(){return J},MonthPickerStylesApi:function(){return U},MonthStylesApi:function(){return Y},MultiSelectStylesApi:function(){return eD.L},NativeSelectStylesApi:function(){return eR.c},NavLinkStylesApi:function(){return ex},NotificationStylesApi:function(){return ek.$},NotificationsStylesApi:function(){return eI},NumberInputStylesApi:function(){return ez.L},OverlayStylesApi:function(){return eM},PaginationStylesApi:function(){return eN.E},PaperStylesApi:function(){return eL},PasswordInputStylesApi:function(){return eO.m},PillGroupStylesApi:function(){return eA.h},PillStylesApi:function(){return eA.K},PillsInputFieldStylesApi:function(){return eT},PillsInputStylesApi:function(){return eE},PinInputStylesApi:function(){return eF.l},PopoverStylesApi:function(){return em.T},ProgressStylesApi:function(){return eW.S},RadioGroupStylesApi:function(){return ej.T},RadioStylesApi:function(){return ej.P},RatingStylesApi:function(){return eY},RichTextEditorStylesApi:function(){return eB},RingProgressStylesApi:function(){return eV},ScrollAreaStylesApi:function(){return eH},SegmentedControlStylesApi:function(){return eK.o},SelectStylesApi:function(){return e_.i},SimpleGridStylesApi:function(){return eG},SkeletonStylesApi:function(){return eU},SliderStylesApi:function(){return eX.a},SpoilerStylesApi:function(){return eZ},SpotlightStylesApi:function(){return eJ},StackStylesApi:function(){return eQ},StepperStylesApi:function(){return e$.U},SwitchGroupStylesApi:function(){return e0._},SwitchStylesApi:function(){return e0.T},TableStylesApi:function(){return e5},TabsStylesApi:function(){return e1.Y},TagsInputStylesApi:function(){return e2.h},TextInputStylesApi:function(){return e7.G},TextStylesApi:function(){return p},TextareaStylesApi:function(){return e6.g},ThemeIconStylesApi:function(){return e3},TimeInputStylesApi:function(){return et},TimelineStylesApi:function(){return e4},TitleStylesApi:function(){return e9},TooltipStylesApi:function(){return e8},TypographyStylesProviderStylesApi:function(){return te},UnstyledButtonStylesApi:function(){return tt},YearLevelGroupStylesApi:function(){return H},YearPickerInputStylesApi:function(){return Z},YearPickerStylesApi:function(){return G}});var r=o(24246);o(27378);var a=o(57847),i=o(92442);let d={selectors:{root:"Root element",loader:"`Loader` component, rendered inside root element when `loading` prop is set"},vars:{root:{"--ai-bg":"Controls `background`","--ai-hover":"Controls `background` when hovered","--ai-bd":"Controls `border`","--ai-color":"Controls icon `color`","--ai-hover-color":"Controls icon `color` when hovered","--ai-radius":"Controls `border-radius`","--ai-size":"Controls `width`, `height`, `min-width` and `min-height` styles"}},modifiers:[{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-loading",selector:"root",condition:"`loading` prop is set"}]},s={selectors:{group:"Root element"},vars:{group:{"--ai-border-width":"Controls `border-width` of child ActionIcon components that are placed beside one another"}},modifiers:[{modifier:"data-orientation",selector:"group",value:"Value of `orientation` prop"}]},l={selectors:{root:"Root element"},vars:{root:{"--affix-z-index":"Controls `z-index` property","--affix-top":"Controls `top` property","--affix-bottom":"Controls `bottom` property","--affix-left":"Controls `left` property","--affix-right":"Controls `right` property"}}};var c=o(30345);let p={selectors:{root:"Root element"},vars:{root:{"--text-fz":"Controls `font-size` property","--text-lh":"Controls `line-height` property","--text-gradient":"Text fill gradient","--text-line-clamp":"Number of lines that should be visible"}},modifiers:[{modifier:"data-truncate",selector:"root",value:"Value of `truncate` prop",condition:"`truncate` prop is set"},{modifier:"data-line-clamp",selector:"root",condition:"`lineClamp` prop is a number"},{modifier:"data-inline",selector:"root",condition:"`inline` prop is set"},{modifier:"data-inherit",selector:"root",condition:"`inherit` prop is set"}]},u={...p,modifiers:[...p.modifiers,{modifier:"data-underline",selector:"root",value:"Value of `underline` prop"}]},m={selectors:{root:"Root element (`AppShell` component)",navbar:"`AppShell.Navbar` root element",header:"`AppShell.Header` root element",main:"`AppShell.Main` root element",aside:"`AppShell.Aside` root element",footer:"`AppShell.Footer` root element",section:"`AppShell.Section` root element"},vars:{root:{"--app-shell-transition-duration":"Controls transition duration of all children","--app-shell-transition-timing-function":"Controls transition timing function of all children"}},modifiers:[{modifier:"data-resizing",selector:"root",condition:"User is resizing the window"},{modifier:"data-layout",selector:"root",value:"Value of the `layout` prop"},{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-with-border",selector:["navbar","header","aside","footer"],condition:"`withBorder` prop is set either on the `AppShell` or on the associated component"},{modifier:"data-grow",selector:"section",condition:"`grow` prop is set on the `AppShell.Section`"}]},f={selectors:{root:"Root element"},vars:{root:{"--ar-ratio":"Aspect ratio"}}};var h=o(87961);let y={selectors:{root:"Root element",image:"`img` element",placeholder:"Avatar placeholder, displayed when the image cannot be loaded"},vars:{root:{"--avatar-bd":"Controls placeholder `border`","--avatar-bg":"Controls placeholder `background`","--avatar-color":"Controls placeholder text `color`","--avatar-size":"Controls `width`, `min-width` and `height`","--avatar-radius":"Controls `border-radius`"}}},b={selectors:{group:"Root element"},vars:{group:{"--ag-spacing":"Controls negative spacing between avatars"}}},v={selectors:{root:"Root element"},vars:{root:{"--bi-radius":"Controls `border-radius`"}}};var g=o(68738);let w={selectors:{root:"Root element",icon:"Icon element",cite:"Cite element"},vars:{root:{"--bq-bd":"Controls `border`","--bq-bg-dark":"Controls `background-color` in dark color scheme","--bq-bg-light":"Controls `background-color` in light color scheme","--bq-icon-size":"Controls `width` and `height` of the icon","--bq-radius":"Controls `border-radius`"}}},q={selectors:{root:"Root element",separator:"Separator between children",breadcrumb:"Breadcrumb item"},vars:{root:{"--bc-separator-margin":"Control left and right `margin` of separator"}}},S={selectors:{root:"Root element (button)",burger:"Inner element that contains burger lines"},vars:{root:{"--burger-color":"Controls background-color of lines","--burger-size":"Controls width and height of the button","--burger-transition-duration":"Controls transition-duration of lines","--burger-transition-timing-function":"Controls transition-timing-function of lines"}},modifiers:[{modifier:"data-opened",selector:"burger",condition:"opened prop is set"}]};var C=o(86140);let P={selectors:{root:"Root element",section:"`Card.Section` root element"},vars:{root:{"--card-padding":"Controls `padding` of the card, also used to control `Card.Section` spacing"}},modifiers:[{modifier:"data-first-section",selector:"section",condition:"`Card.Section` is the child of the `Card`"},{modifier:"data-last-section",selector:"section",condition:"`Card.Section` is the last child of the `Card`"},{modifier:"data-with-border",selector:"root",condition:"`withBorder` prop is set on `Card` component"},{modifier:"data-with-border",selector:"section",condition:"`withBorder` prop is set on `Card.Section` component"},{modifier:"data-inherit-padding",selector:"section",condition:"`inheritPadding` prop is set on `Card.Section` component"}]};var D=o(23570);let R={selectors:{root:"Root element"},vars:{}};var x=o(86423);let k={selectors:{root:"Root element",checkIcon:"Check icon, visible when checked prop is true",iconWrapper:"Wraps `checkIcon` for alignment",input:"Input element, hidden by default",label:"Input label, used as a chip body"},vars:{root:{"--chip-fz":"Controls `font-size`","--chip-size":"Controls `height`","--chip-icon-size":"Controls width and height of the icon","--chip-padding":"Controls horizontal padding when chip is not checked","--chip-checked-padding":"Controls horizontal padding when chip is checked","--chip-radius":"Controls `border-radius`","--chip-bg":"Controls `background-color` when chip is checked","--chip-hover":"Controls `background-color` when chip is checked and hovered","--chip-color":"Controls `color` when chip is checked","--chip-bd":"Controls border when chip is checked","--chip-spacing":"Controls spacing between check icon and label"}},modifiers:[{modifier:"data-checked",selector:"label",condition:"Chip is checked"},{modifier:"data-disabled",selector:"label",condition:"`disabled` prop is set"}]},z={selectors:{root:"Root element"},vars:{root:{"--cb-icon-size":"Controls `width` of the `X` icon","--cb-radius":"Controls `border-radius` of the button","--cb-size":"Controls `width` and `height` of the button"}}},I={selectors:{root:"Root element"},vars:{root:{"--code-bg":"Controls `background-color`"}},modifiers:[{modifier:"data-block",selector:"root",condition:"`block` prop is set"}]},M={selectors:{root:"Root element",pre:"Pre element, contains code element",codeWrapper:"Wrapper around code element, used for expand/collapse logic",code:"Code element, contains highlighted code",header:"Header element, contains copy button and files names",controls:"Controls container, contains control buttons (copy/collapse, etc.)",control:"Control button, copy/collapse, etc.",files:"Files names list",file:"File name",fileIcon:"File icon",showCodeButton:"Button that reveals full code when it is collapsed"},vars:{}},N={selectors:{code:"Root element"},vars:{}},L={selectors:{root:"Root element",pre:"Pre element, contains code element",code:"Code element",copy:"Copy button"},vars:{}};var O=o(27882),A=o(64954);let E={selectors:{root:"Root element",alphaOverlay:"Overlay with checkerboard pattern",shadowOverlay:"Overlay with inner box-shadow",colorOverlay:"Overlay with given color background",childrenOverlay:"Overlay with `children` inside"},vars:{root:{"--cs-radius":"Controls `border-radius` of all overlays and `root` element","--cs-size":"Controls `width`, `height`, `min-width` and `min-height` of the `root` element"}}};var T=o(92511);let F={selectors:{root:"Root element"},vars:{root:{"--container-size":"Controls container `max-width`"}}};var W=o(50352);let j={selectors:{...W.a.selectors,...W.X.selectors},vars:{}},Y={selectors:{monthThead:"thead element of month table",monthRow:"tr element of month table",monthTbody:"tbody element of month table",monthCell:"td element of month table",month:"Month table element",weekdaysRow:"Weekdays tr element",weekday:"Weekday th element",day:"Month day control"},vars:{},modifiers:[{modifier:"data-with-spacing",selector:"monthCell",condition:"`withCellSpacing` prop is set"},{modifier:"data-today",selector:"day",condition:"Date is the same as new Date()"},{modifier:"data-hidden",selector:"day",condition:"Day is outside of current month and `hideOutsideDates` is set"},{modifier:"data-disabled",selector:"day",condition:"Day disabled by one of the props (`excludeDate`, `getDayProps`, etc.)"},{modifier:"data-weekend",selector:"day",condition:"Day is weekend"},{modifier:"data-outside",selector:"day",condition:"Day is outside of the current month"},{modifier:"data-selected",selector:"day",condition:"Day is selected"},{modifier:"data-in-range",selector:"day",condition:"Day is in range selection"},{modifier:"data-first-in-range",selector:"day",condition:"Day is first in range selection"},{modifier:"data-last-in-range",selector:"day",condition:"Day is last in range selection"}]},B={selectors:{calendarHeader:"Calendar header root element",calendarHeaderControl:"Previous/next calendar header controls",calendarHeaderControlIcon:"Icon of previous/next calendar header controls",calendarHeaderLevel:"Level control (changes levels when clicked, month -> year -> decade)"},vars:{calendarHeader:{"--dch-control-size":"Controls size of the previous/next and level controls","--dch-fz":"Controls font-size of the previous/next and level controls"}},modifiers:[{modifier:"data-direction",selector:"calendarHeaderControl",value:'`"previous"` or `"next"` depending on the control type'},{modifier:"data-disabled",selector:"calendarHeaderControl",condition:"Control is disabled for any reason"}]},V={selectors:{...B.selectors,levelsGroup:"Group of decades levels",yearsList:"Years list table element",yearsListRow:"Years list row element",yearsListCell:"Years list cell element",yearsListControl:"Button used to pick months and years"},vars:{}},H={selectors:{...B.selectors,levelsGroup:"Group of decades levels",monthsList:"Years list table element",monthsListRow:"Years list row element",monthsListCell:"Years list cell element",monthsListControl:"Button used to pick months and years"},vars:{}},K={selectors:{...B.selectors,levelsGroup:"Group of decades levels",...Y.selectors},vars:{}},_={selectors:{...B.selectors,...V.selectors,...H.selectors,...K.selectors},vars:{},modifiers:[...B.modifiers,...Y.modifiers]},G={selectors:{...B.selectors,...V.selectors},vars:{},modifiers:B.modifiers},U={selectors:{...B.selectors,...V.selectors,...H.selectors},vars:{},modifiers:B.modifiers},X={selectors:{...B.selectors,...V.selectors,...H.selectors,...K.selectors},vars:{},modifiers:[...B.modifiers,...Y.modifiers]},Z={selectors:{...j.selectors,...G.selectors},vars:{},modifiers:G.modifiers},J={selectors:{...j.selectors,...U.selectors},vars:{},modifiers:U.modifiers},Q={selectors:{...j.selectors,...X.selectors},vars:{},modifiers:X.modifiers},$={selectors:{...j.selectors,...X.selectors},vars:{},modifiers:X.modifiers},ee={selectors:{...j.selectors,...X.selectors,timeWrapper:"Wrapper around time input and submit button",timeInput:"TimeInput",submitButton:"Submit button"},vars:{},modifiers:X.modifiers},et=j,eo={selectors:{root:"Root element",closeButton:"Close button"},vars:{root:{"--dialog-size":"Controls `width` of the dialog"}}},en={selectors:{root:"Root element",label:"Label element"},vars:{root:{"--divider-border-style":"Controls `border-style`","--divider-color":"Controls `border-color`","--divider-size":"Controls `border-width`"}},modifiers:[{modifier:"data-with-label",selector:"root",condition:"`label` prop is truthy"},{modifier:"data-orientation",selector:"root",value:"Value of `orientation` prop"},{modifier:"data-position",selector:"label",value:"Value of `labelPosition` prop"}]},er={selectors:{root:"Root element",inner:"Element used to center modal, has fixed position, takes entire screen",content:"`Drawer.Content` root element",header:"Contains title and close button",overlay:"Overlay displayed under the `Drawer.Content`",title:"Drawer title (h2 tag), displayed in the header",body:"Drawer body, displayed after header",close:"Close button"},vars:{root:{"--drawer-offset":"Controls `margin` of `Drawer.Content`","--drawer-size":"Controls `width` of `Drawer.Content`","--drawer-flex":"Controls `flex` property of `Drawer.Content`","--drawer-align":"Controls `align-items` property of `Drawer.Content`","--drawer-justify":"Controls `justify-content` property of `Drawer.Content`","--drawer-height":"Controls `height` property of `Drawer.Content`"}}},ea={selectors:{root:"Dropzone root element",inner:"Dropzone inner element (wraps children)"},vars:{root:{"--dropzone-accept-bg":"Controls `background-color` when file is accepted","--dropzone-reject-bg":"Controls `background-color` when file is rejected","--dropzone-accept-color":"Controls `color` when file is accepted","--dropzone-reject-color":"Controls `color` when file is rejected","--dropzone-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-accept",selector:"root",condition:"Files that are dragged over the dropzone are accepted"},{modifier:"data-reject",selector:"root",condition:"Files that are dragged over the dropzone are rejected"},{modifier:"data-idle",selector:"root",condition:"Dropzone is idle"},{modifier:"data-loading",selector:"root",condition:"`loading` prop is set"},{modifier:"data-activate-on-click",selector:"root",condition:"`activateOnClick` prop is `true`"}]},ei={selectors:{fullScreen:"Dropzone.Fullscreen root element",...ea.selectors},vars:{}},ed={selectors:{root:"Root element",legend:"Legend element"},vars:{root:{"--fieldset-radius":"Controls `border-radius`"}}};var es=o(29237);let el={selectors:{root:"Root element"},vars:{}},ec={selectors:{root:"Root element",inner:"Columns wrapper",col:"`Grid.Col` root element"},vars:{root:{"--grid-overflow":"Controls `overflow` property","--grid-align":"Controls `align-items` property","--grid-justify":"Controls `justify-content` property"}}},ep={selectors:{root:"Root element"},vars:{root:{"--group-align":"Controls `align-items` property","--group-justify":"Controls `justify-content` property","--group-gap":"Controls `gap` property","--group-wrap":"Controls `flex-wrap` property","--group-child-width":"Controls `max-width` of child elements, applied when grow prop is set and `preventGrowOverflow` is `true`"}},modifiers:[{modifier:"data-grow",selector:"root",condition:"`grow` prop is set"}]},eu={selectors:{root:"Root element"},vars:{}};var em=o(62623);let ef=em.T,eh={selectors:{root:"Root element"},vars:{root:{"--image-object-fit":"Controls `object-fit` property","--image-radius":"Controls `border-radius` property"}},modifiers:[{modifier:"data-fallback",selector:"root",condition:"Image failed to load"}]},ey={selectors:{root:"Root element",indicator:"Indicator element"},vars:{root:{"--indicator-bottom":"Controls `bottom` style","--indicator-left":"Controls `left` style","--indicator-right":"Controls `right` style","--indicator-top":"Controls `top` style","--indicator-radius":"Controls `border-radius`","--indicator-size":"Controls `min-width` and `height`","--indicator-translate-x":"Controls `translateX` style, used for positioning","--indicator-translate-y":"Controls `translateY` style, used for positioning","--indicator-z-index":"Controls `z-index` style","--indicator-color":"Controls `background-color`"}},modifiers:[{modifier:"data-inline",selector:"root",condition:"`inline` prop is set"},{modifier:"data-with-label",selector:"indicator",condition:"`label` prop is set"},{modifier:"data-with-border",selector:"indicator",condition:"`withBorder` prop is set"},{modifier:"data-processing",selector:"indicator",condition:"`processing` prop is set"}]};var eb=o(55838);let ev={selectors:{root:"Root element"},vars:{root:{"--kbd-fz":"Controls `font-size`","--kbd-padding":"Controls `padding`"}}},eg={selectors:{root:"Root element",item:"ListItem root element",itemIcon:"ListItem icon",itemLabel:"ListItem content",itemWrapper:"ListItem wrapper element, container, icon and content"},vars:{root:{"--list-fz":"Controls `font-size`","--list-lh":"Controls `line-height`","--list-spacing":"Controls spacing between items"}},modifiers:[{modifier:"data-with-padding",selector:"root",condition:"`withPadding` prop is set"},{modifier:"data-centered",selector:"item",condition:"`center` prop is set on List component"},{modifier:"data-with-icon",selector:"item",condition:"`icon` prop is set on ListItem component"}]},ew={selectors:{root:"Root element"},vars:{root:{"--loader-size":"Controls loader size (usually `width` and `height`, in some cases only `width`)","--loader-color":"Control loader color"}}},eq={selectors:{root:"Root element",overlay:"`Overlay` component",loader:"`Loader` component"},vars:{root:{"--lo-z-index":"Controls `z-index` of the overlay and loader"}}},eS={selectors:{root:"Root element"},vars:{root:{"--mark-bg-dark":"Controls `background-color` in dark color scheme","--mark-bg-light":"Controls `background-color` for light color scheme"}}};var eC=o(91516);let eP={selectors:{root:"Root element",inner:"Element used to center modal, has fixed position, takes entire screen",content:"`Modal.Content` root element",header:"Contains title and close button",overlay:"Overlay displayed under the `Modal.Content`",title:"Modal title (h2 tag), displayed in the header",body:"Modal body, displayed after header",close:"Close button"},vars:{root:{"--modal-radius":"Controls `border-radius` of `Modal.Content`","--modal-size":"Controls `width` of `Modal.Content`","--modal-x-offset":"Controls left and right `padding` of the inner element used to position `Modal.Content`","--modal-y-offset":"Controls top and bottom `padding` of the inner element used to position `Modal.Content`"}},modifiers:[{modifier:"data-full-screen",selector:"root",condition:"`fullScreen` prop is set"},{modifier:"data-centered",selector:"root",condition:"`centered` prop is set"}]};var eD=o(7634),eR=o(59325);let ex={selectors:{root:"Root element",body:"Contains label and description",section:"Left and right sections",label:"NavLink label",description:"Dimmed description displayed below the label",children:"Wrapper around nested links",chevron:"Default chevron icon"},vars:{root:{"--nl-bg":"Controls link `background-color`","--nl-color":"Controls link `color`","--nl-hover":"Controls link `background-color` when hovered"},children:{"--nl-offset":"Controls nested links offset"}},modifiers:[{modifier:"data-active",selector:"root",condition:"`active` prop is set"}]};var ek=o(37951),ez=o(68170);let eI={selectors:{root:"Notifications container, contains all notifications",notification:"Single notification"},vars:{root:{"--notifications-container-width":"Controls notifications container `max-width`","--notifications-left":"Controls notifications container `left`","--notifications-right":"Controls notifications container `right`","--notifications-top":"Controls notifications container `top`","--notifications-transform":"Controls notifications container `transform`","--notifications-z-index":"Controls notifications container `z-index`"}}},eM={selectors:{root:"Root element"},vars:{root:{"--overlay-bg":"Controls `background-color`","--overlay-filter":"Controls `backdrop-filter`","--overlay-radius":"Controls `border-radius`","--overlay-z-index":"Controls `z-index`"}},modifiers:[{modifier:"data-center",selector:"root",condition:"`center` prop is set"},{modifier:"data-fixed",selector:"root",condition:"`fixed` prop is set"}]};var eN=o(37731);let eL={selectors:{root:"Root element"},vars:{root:{"--paper-radius":"Controls `border-radius`","--paper-shadow":"Controls `box-shadow`"}},modifiers:[{modifier:"data-with-border",selector:"root",condition:"`withBorderProp` is set"}]};var eO=o(20827),eA=o(81581);let eE={selectors:{...W.a.selectors,...W.X.selectors},vars:{}},eT={selectors:{field:"Root element"},vars:{},modifiers:[{modifier:"data-type",selector:"field",value:"Value of `type` prop"},{modifier:"data-disabled",selector:"field",condition:"`disabled` prop is set"}]};var eF=o(34722),eW=o(35150),ej=o(97811);let eY={selectors:{root:"Root element",starSymbol:"Default star icon",input:"Item input, hidden by default",label:"Item label, used to display star icon",symbolBody:"Wrapper around star icon for centering",symbolGroup:"Group of symbols, used to display fractions"},vars:{root:{"--rating-color":"Controls filled star icon color","--rating-size":"Controls star icon width and height"}},modifiers:[{modifier:"data-read-only",selector:"label",condition:"`readOnly` prop is set"},{modifier:"data-active",selector:"input",condition:"Input value is the same as component value"},{modifier:"data-filled",selector:"starSymbol",condition:"Associated input value is less or equal to the component value"}]},eB={selectors:{root:"Root element",toolbar:"Toolbar element",content:"Content area",typographyStylesProvider:"TypographyStylesProvider component, wraps content",control:"RichTextEditor.Control root element, used as a base for all controls",controlsGroup:"RichTextEditor.ControlsGroup component root",linkEditor:"Link editor root element",linkEditorSave:"Link editor save button",linkEditorInput:"Link editor url input",linkEditorExternalControl:"Link editor external button",linkEditorDropdown:"Link editor popover dropdown element"},vars:{},modifiers:[{modifier:"data-active",selector:"control",condition:"Control is active"}]},eV={selectors:{root:"Root element",svg:"svg element",curve:"circle element",label:"Label element"},vars:{root:{"--rp-label-offset":"Label offset on the left and right sides of the ring","--rp-size":"Controls `height` and `width` of svg and root elements"}}},eH={selectors:{root:"Root element",viewport:"",scrollbar:"",thumb:"",corner:""},vars:{root:{"--scrollarea-scrollbar-size":"Scrollbar size"}},modifiers:[{modifier:"data-hidden",selector:["scrollbar","corner"],condition:'type="never"'},{modifier:"data-hovered",selector:"corner",condition:"One of the scrollbars is hovered"},{modifier:"data-orientation",selector:"scrollbar",value:'"horizontal" or "vertical" depending on scrollbar position'}]};var eK=o(67355),e_=o(61309);let eG={selectors:{root:"Root element"},vars:{}},eU={selectors:{root:"Root element"},vars:{root:{"--skeleton-height":"Controls skeleton `height`","--skeleton-width":"Controls skeleton `width`","--skeleton-radius":"Controls skeleton `border-radius`"}},modifiers:[{modifier:"data-visible",selector:"root",condition:"`visible` prop is set"},{modifier:"data-animate",selector:"root",condition:"`animate` prop is set"}]};var eX=o(66763);let eZ={selectors:{root:"Root element",content:"Wraps content to set max-height and transition",control:"Show/hide content control"},vars:{root:{"--spoiler-transition-duration":"Controls transition duration"}},modifiers:[{modifier:"data-has-spoiler",selector:"root",condition:"Whether the control button is shown or not"}]},eJ={selectors:{...eP.selectors,search:"Search input (`Spotlight.Search`)",actionsList:"Actions list (`Spotlight.ActionsList`)",empty:"Empty state (`Spotlight.Empty`)",footer:"Footer (`Spotlight.Footer`)",action:"Action (`Spotlight.Action`)",actionBody:"Body of the action, contains label and description",actionLabel:"`Spotlight.Action` label",actionDescription:"`Spotlight.Action` description",actionSection:"`Spotlight.Action` left and right sections",actionsGroup:"`Spotlight.ActionsGroup` root element"},vars:{},modifiers:[{modifier:"data-selected",selector:"action",condition:"Action is selected with up/down keys"},{modifier:"data-position",selector:"actionSection",value:"Section position: left or right"},{modifier:"data-dimmed",selector:"actionSection",condition:"`dimmedSections` prop is set on `Spotlight.Action` component"}]},eQ={selectors:{root:"Root element"},vars:{root:{"--stack-align":"Controls `align-items` property","--stack-justify":"Controls `justify-content` property","--stack-gap":"Controls `gap` property"}}};var e$=o(49717),e0=o(12379),e1=o(49235),e2=o(73811);let e5={selectors:{table:"Root `table` element (`Table` component)",thead:"`thead` element (`Table.Thead` component)",tbody:"`tbody` element (`Table.Tbody` component)",tfoot:"`tfoot` element (`Table.Tfoot` component)",tr:"`tr` element (`Table.Tr` component)",th:"`th` element (`Table.Th` component)",td:"`td` element (`Table.Td` component)",caption:"`caption` element (`Table.Caption` component)"},vars:{table:{"--table-border-color":"Controls `border-color` of all elements inside table","--table-layout":"Controls `table-layout` of the table element, auto by default","--table-caption-side":"Controls caption-side of the table element, `bottom` by default","--table-horizontal-spacing":"Controls p`adding-left` and p`adding-right` of `Table.Th` and `Table.Td` elements","--table-vertical-spacing":"Controls `padding-top` and `padding-bottom `of `Table.Td` and `Table.Th` elements","--table-striped-color":"Controls `background-color` of even/odd `Table.Tr` elements","--table-highlight-on-hover-color":"Controls `background-color` of `Table.Tr` elements when hovered","--table-sticky-header-offset":"Controls `top` offset of sticky header"}},modifiers:[{modifier:"data-with-table-border",selector:"table",condition:"`withTableBorder` prop is set on `Table` component"},{modifier:"data-with-column-border",selector:["th","td"],condition:"`withColumnsBorder` prop is set on `Table` component"},{modifier:"data-with-row-border",selector:"tr",condition:"`withRowsBorder` prop is set on `Table` component"},{modifier:"data-striped",selector:"tr",value:"odd | even",condition:"`striped` prop is set on `Table` component"},{modifier:"data-hover",selector:"tr",condition:"`highlightOnHover` prop is set on `Table` component"},{modifier:"data-size",selector:"tr",value:"value of `captionSize` prop on `Table` component"}]};var e6=o(76475),e7=o(52176);let e3={selectors:{root:"Root element"},vars:{root:{"--ti-bg":"Controls `background`","--ti-bd":"Controls `border`","--ti-color":"Controls icon `color`","--ti-radius":"Controls `border-radius`","--ti-size":"Controls `width`, `height`, `min-width` and `min-height` styles"}}},e4={selectors:{root:"Root element",item:"Item root element",itemBody:"Item body, wraps title and content",itemTitle:"Item title, controlled by title prop",itemContent:"Item content, controlled by children prop",itemBullet:"Item bullet"},vars:{root:{"--tl-bullet-size":"Controls bullet `width` and `height`","--tl-color":"Controls active bullet and line colors","--tl-line-width":"Controls width of the line between bullets","--tl-radius":"Controls bullet `border-radius`"}},modifiers:[{modifier:"data-active",selector:["item","itemBullet"],condition:"Item index is =< Timeline active prop"},{modifier:"data-line-active",selector:["item"],condition:"Item index is < Timeline active prop"}]},e9={selectors:{root:"Root element"},vars:{root:{"--title-fw":"Title `font-weight`, by default value from `theme.headings`","--title-fz":"Title `font-size`, by default value from `theme.headings`","--title-lh":"Title `line-heigh`t, by default value from `theme.headings`"}},modifiers:[{modifier:"data-order",selector:"root",value:"Value of the `order` prop"}]},e8={selectors:{tooltip:"Root element",arrow:"Tooltip arrow, rendered inside tooltip"},vars:{tooltip:{"--tooltip-bg":"Tooltip `background-color`","--tooltip-radius":"Tooltip `border-radius`","--tooltip-color":"Controls tooltip text color"}},modifiers:[{modifier:"data-multiline",selector:"tooltip",condition:"`multiline` prop is set"}]},te={selectors:{root:"Root element"},vars:{}},tt={selectors:{root:"Root element"},vars:{}};var to=o(60626),tn=o(77093),tr=o(28862),ta=o(89114),ti=o(61461);function td(e){let{data:t,component:o,fixedLayout:n=!0,...a}=e,i=Object.keys(t.selectors).map(e=>(0,r.jsxs)(tr.i.Tr,{children:[(0,r.jsx)(tr.i.Td,{children:e}),(0,r.jsx)(tr.i.Td,{children:(0,r.jsxs)(ti.e,{children:[".mantine-",o,"-",e]})}),(0,r.jsx)(tr.i.Td,{children:(0,r.jsx)(ta.O,{children:t.selectors[e]})})]},e));return(0,r.jsx)(tr.i.ScrollContainer,{minWidth:600,children:(0,r.jsxs)(tr.i,{layout:n?"fixed":void 0,...a,children:[(0,r.jsx)(tr.i.Thead,{children:(0,r.jsxs)(tr.i.Tr,{children:[(0,r.jsx)(tr.i.Th,{w:n?210:void 0,children:"Selector"}),(0,r.jsx)(tr.i.Th,{w:n?310:void 0,children:"Static selector"}),(0,r.jsx)(tr.i.Th,{children:"Description"})]})}),(0,r.jsx)(tr.i.Tbody,{children:i})]})})}function ts(e){let{data:t,fixedLayout:o=!0,...n}=e,a=Object.keys(t.vars).reduce((e,o)=>(Object.keys(t.vars[o]).forEach((n,a)=>{e.push((0,r.jsxs)(tr.i.Tr,{children:[0===a&&(0,r.jsx)(tr.i.Td,{rowSpan:Object.keys(t.vars[o]).length,children:o}),(0,r.jsx)(tr.i.Td,{children:(0,r.jsx)(ti.e,{children:n})}),(0,r.jsx)(tr.i.Td,{children:(0,r.jsx)(ta.O,{children:t.vars[o][n]})})]},"".concat(o,"-").concat(n)))}),e),[]);return(0,r.jsx)(tr.i.ScrollContainer,{minWidth:600,children:(0,r.jsxs)(tr.i,{layout:o?"fixed":void 0,...n,children:[(0,r.jsx)(tr.i.Thead,{children:(0,r.jsxs)(tr.i.Tr,{children:[(0,r.jsx)(tr.i.Th,{w:o?210:void 0,children:"Selector"}),(0,r.jsx)(tr.i.Th,{w:o?310:void 0,children:"Variable"}),(0,r.jsx)(tr.i.Th,{children:"Description"})]})}),(0,r.jsx)(tr.i.Tbody,{children:a})]})})}function tl(e){var t,o,n;let{data:a,fixedLayout:i=!0,...d}=e,s=null===(t=a.modifiers)||void 0===t?void 0:t.some(e=>!!e.condition),l=null===(o=a.modifiers)||void 0===o?void 0:o.some(e=>!!e.value),c=(null===(n=a.modifiers)||void 0===n?void 0:n.map((e,t)=>(0,r.jsxs)(tr.i.Tr,{children:[(0,r.jsx)(tr.i.Td,{children:Array.isArray(e.selector)?e.selector.join(", "):e.selector}),(0,r.jsx)(tr.i.Td,{children:(0,r.jsx)(ti.e,{children:e.modifier})}),s&&(0,r.jsx)(tr.i.Td,{children:(0,r.jsx)(ta.O,{children:e.condition||"–"})}),l&&(0,r.jsx)(tr.i.Td,{children:(0,r.jsx)(ta.O,{children:e.value||"–"})})]},t)))||[];return(0,r.jsx)(tr.i.ScrollContainer,{minWidth:600,children:(0,r.jsxs)(tr.i,{layout:i?"fixed":void 0,...d,children:[(0,r.jsx)(tr.i.Thead,{children:(0,r.jsxs)(tr.i.Tr,{children:[(0,r.jsx)(tr.i.Th,{w:i?210:void 0,children:"Selector"}),(0,r.jsx)(tr.i.Th,{w:i?310:void 0,children:"Attribute"}),s&&(0,r.jsx)(tr.i.Th,{children:"Condition"}),l&&(0,r.jsx)(tr.i.Th,{children:"Value"})]})}),(0,r.jsx)(tr.i.Tbody,{children:c})]})})}var tc=o(1374),tp=o.n(tc);function tu(e){let{component:t,componentPrefix:o}=e,i=n["".concat(t,"StylesApi")];if(!i)return(0,r.jsx)(to.z,{errorOf:"Styles API"});let d=(0,tn.iY)({component:t,componentPrefix:o});return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:tp().section,children:[(0,r.jsxs)(a.D,{order:2,className:tp().title,children:[d," selectors"]}),(0,r.jsx)(td,{component:t,data:i})]}),Object.keys(i.vars).length>0&&(0,r.jsxs)("div",{className:tp().section,children:[(0,r.jsxs)(a.D,{order:2,className:tp().title,children:[d," CSS variables"]}),(0,r.jsx)(ts,{data:i})]}),Array.isArray(i.modifiers)&&i.modifiers.length>0&&(0,r.jsxs)("div",{className:tp().section,children:[(0,r.jsxs)(a.D,{order:2,className:tp().title,children:[d," data attributes"]}),(0,r.jsx)(tl,{data:i})]})]})}var tm=o(94998),tf=o(37430);function th(e){let{components:t,componentPrefix:o}=e,n=t.map(e=>(0,r.jsx)("div",{className:tp().group,children:(0,r.jsx)(tu,{component:e,componentPrefix:o})},e));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{className:tp().groupsHeader,children:[(0,r.jsx)(tf.an,{style:{marginTop:0},children:"Styles API"}),(0,r.jsxs)(tf.NV,{style:{marginTop:0},children:[(0,r.jsx)(tm.E,{children:t[0]})," component supports"," ",(0,r.jsx)(tf.Ec,{href:"/styles/styles-api",children:"Styles API"}),". With Styles API, you can customize styles of any inner element. Follow"," ",(0,r.jsx)(tf.Ec,{href:"/styles/styles-api",children:"the documentation"})," to learn how to use CSS modules, CSS variables and inline styles to get full control over component styles."]})]}),n]})}},60626:function(e,t,o){"use strict";o.d(t,{z:function(){return a}});var n=o(24246);o(27378);var Text=o(26569),r=o(9136);function a(e){let{errorOf:t}=e;return(0,n.jsxs)(Text.x,{children:[(0,n.jsxs)(Text.x,{span:!0,c:"red",children:["Error loading component ",t," data."," "]}),"If you see this message please let us know by"," ",(0,n.jsx)(r.e,{href:"https://github.com/mantinedev/mantine/issues/new?assignees=&labels=&template=docs_report.yml",target:"_blank",children:"opening an issue on GitHub"}),"."]})}},61461:function(e,t,o){"use strict";o.d(t,{e:function(){return d}});var n=o(24246);o(27378);var r=o(40624),Text=o(26569),a=o(97977),i=o.n(a);function d(e){let{className:t,...o}=e;return(0,n.jsx)(Text.x,{component:"span",className:(0,r.Z)(i().code,t),...o})}},1535:function(e){e.exports={item:"HeaderItem_item__E_3UP",label:"HeaderItem_label__3TYI5"}},90576:function(e){e.exports={wrapper:"ImportStatement_wrapper__4lafM"}},85008:function(e){e.exports={wrapper:"LinkItem_wrapper__J_9Wi",link:"LinkItem_link__2mUFe",icon:"LinkItem_icon__gjSxi"}},11258:function(e){e.exports={wrapper:"MdxPageHeader_wrapper__vGpBZ",header:"MdxPageHeader_header__egn7g",title:"MdxPageHeader_title__bekaq",description:"MdxPageHeader_description__nEVpr"}},81026:function(e){e.exports={wrapper:"MdxRawContent_wrapper__8ZUWQ",container:"MdxRawContent_container__v_UMr",tableOfContents:"MdxRawContent_tableOfContents__voKU_"}},73279:function(e){e.exports={root:"MdxSiblings_root__aMIoJ",link:"MdxSiblings_link__6MlX4",body:"MdxSiblings_body___XWhI",title:"MdxSiblings_title__NDsNH",description:"MdxSiblings_description__V17yY",icon:"MdxSiblings_icon__VO6TY"}},69684:function(e){e.exports={tabsWrapper:"MdxTabs_tabsWrapper__14Znv",tabsList:"MdxTabs_tabsList__eXI1E",tab:"MdxTabs_tab__f36t5",tabContent:"MdxTabs_tabContent__h_eEw",main:"MdxTabs_main__qjckv",tableOfContents:"MdxTabs_tableOfContents__2RDWh"}},21400:function(e){e.exports={content:"PageBase_content__8Q6WJ"}},91333:function(e){e.exports={searchIcon:"PropsTablesList_searchIcon__qxntu",title:"PropsTablesList_title__T7Tjv",section:"PropsTablesList_section__ttBgr",search:"PropsTablesList_search__xAeEM"}},1374:function(e){e.exports={groupsHeader:"StylesApiTable_groupsHeader__GCT_t",group:"StylesApiTable_group__B6MgG",title:"StylesApiTable_title__G0_6E",section:"StylesApiTable_section__nd2cu"}},97977:function(e){e.exports={code:"TableInlineCode_code__0ptOS"}},19787:function(e){e.exports={wrapper:"TableOfContents_wrapper__jE57j",inner:"TableOfContents_inner__nZ9Yg",link:"TableOfContents_link__kwW92",header:"TableOfContents_header__4cbrI",title:"TableOfContents_title__sn9Ej",items:"TableOfContents_items__1KFWu"}},92442:function(e,t,o){"use strict";o.d(t,{x:function(){return n}});let n={selectors:{root:"Root element",item:"`Accordion.Item` root element",control:"`Accordion.Control` root element",chevron:"`Accordion.Control` chevron container element",label:"`Accordion.Control` label",icon:"`Accordion.Control` icon",itemTitle:"`Accordion.Control` title (h2-h6) tag",panel:"`Accordion.Panel` root element",content:"Wrapper element of `Accordion.Panel` `children`"},vars:{root:{"--accordion-chevron-size":"Controls chevron container element `width` and `min-width`","--accordion-radius":"Controls `border-radius` in various elements, depending on variant","--accordion-transition-duration":"Controls all animations `transition-duration`"}},modifiers:[{modifier:"data-active",selector:["item","control"],condition:"Item is active (opened)"},{modifier:"data-chevron-position",selector:"control",value:"Value of `chevronPosition` prop on `Accordion`"}]}},30345:function(e,t,o){"use strict";o.d(t,{g:function(){return n}});let n={selectors:{root:"Root element",wrapper:"Wrapper around `body` and `icon`",body:"Body element, contains `title` and `message`",title:"Title element, contains `label` and `icon`",label:"Title label",message:"Alert message",icon:"Icon element",closeButton:"Close button"},vars:{root:{"--alert-bd":"Controls `border`","--alert-bg":"Controls `background`","--alert-color":"Controls `color`","--alert-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-with-close-button",selector:"title",condition:"`withCloseButton` prop is set"}]}},87961:function(e,t,o){"use strict";o.d(t,{I:function(){return a}});var n=o(50352),r=o(92511);let a={selectors:{...n.a.selectors,...n.X.selectors,...r.d},vars:{}}},68738:function(e,t,o){"use strict";o.d(t,{o:function(){return n}});let n={selectors:{root:"Root element",section:"Left and right sections",label:"Badge children"},vars:{root:{"--badge-bd":"Controls `border`","--badge-bg":"Controls `background`","--badge-color":"Controls text `color`","--badge-dot-color":'Controls dot `color`, only applicable when `variant="dot"`',"--badge-fz":"Controls `font-size`","--badge-height":"Controls `height`","--badge-padding-x":"Controls horizontal `padding`","--badge-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-block",selector:"root",condition:"`fullWidth` prop is set"},{modifier:"data-position",selector:"section",value:"Section position: left or right"}]}},86140:function(e,t,o){"use strict";o.d(t,{B:function(){return n},R:function(){return r}});let n={selectors:{root:"Root element",loader:"Loader component, displayed only when `loading` prop is set",inner:"Contains all other elements, child of the `root` element",section:"Left and right sections of the button",label:"Button children"},vars:{root:{"--button-bg":"Controls `background`","--button-bd":"Control `border`","--button-hover":"Controls `background` when hovered","--button-color":"Control text `color`","--button-hover-color":"Control text `color` when hovered","--button-radius":"Controls `border-radius`","--button-height":"Controls `height` of the button","--button-padding-x":"Controls horizontal `padding` of the button","--button-fz":"Controls `font-size` of the button","--button-justify":"Controls `justify-content` of `inner` element"}},modifiers:[{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"},{modifier:"data-loading",selector:["root","label"],condition:"`loading` prop is set"},{modifier:"data-block",selector:"root",condition:"`fullWidth` prop is set"},{modifier:"data-with-left-section",selector:"root",condition:"`leftSection` is set"},{modifier:"data-with-right-section",selector:"root",condition:"`rightSection` is set"},{modifier:"data-position",selector:"section",value:"Section position: left or right"}]},r={selectors:{group:"Root element"},vars:{group:{"--button-border-width":"`border-width` of child `Button` components"}},modifiers:[{modifier:"data-orientation",selector:"group",value:"Value of `orientation` prop"}]}},23570:function(e,t,o){"use strict";o.d(t,{J:function(){return n}});let n={selectors:{root:"Root element",slide:"`Carousel.Slide` root element",container:"Slides container",viewport:"Main element, contains slides container and all controls",controls:"Next/previous controls container",control:"Next/previous control",indicators:"Indicators container",indicator:"Indicator button"},vars:{root:{"--carousel-control-size":"Controls `width` and `height` of the next/previous buttons","--carousel-controls-offset":"Controls offsets of the next/previous buttons","--carousel-height":"Controls height of the carousel"}},modifiers:[{modifier:"data-orientation",selector:"root",value:"Value of `orientation` prop"},{modifier:"data-include-gap-in-size",selector:"root",condition:"`includeGapInSize` prop is set"},{modifier:"data-inactive",selector:"control",condition:"No previous/next slides are available"},{modifier:"data-active",selector:"indicator",condition:"Associated slide is active"}]}},86423:function(e,t,o){"use strict";o.d(t,{B:function(){return r},I:function(){return a}});var n=o(50352);let r={selectors:{root:"Root element",input:'Input element (`input[type="checkbox"]`)',icon:"Checkbox icon, used to display checkmark and indeterminate state icon",inner:"Wrapper for `icon` and `input`",body:"Input body, contains all other elements",labelWrapper:"Contains `label`, `description` and `error`",label:"Label element",description:"Description displayed below the label",error:"Error message displayed below the label"},vars:{root:{"--checkbox-color":"Controls checked checkbox `background-color`","--checkbox-radius":"Controls checkbox `border-radius`","--checkbox-size":"Controls checkbox `width` and `height`","--checkbox-icon-color":"Controls checkbox icon `color`"}},modifiers:[{modifier:"data-checked",selector:"root",condition:"`checked` prop is set"},{modifier:"data-error",selector:"input",condition:"`error` prop is set"},{modifier:"data-indeterminate",selector:"input",condition:"`indeterminate` prop is set"},{modifier:"data-label-position",selector:"inner",value:"Value of `labelPosition` prop"}]},a={selectors:{...n.X.selectors},vars:{}}},27882:function(e,t,o){"use strict";o.d(t,{B:function(){return a}});var n=o(50352),r=o(64954);let a={selectors:{...n.a.selectors,...n.X.selectors,...r.L.selectors,dropdown:"Popover dropdown",colorPreview:"Color swatch preview in input left section",eyeDropperButton:"Eye dropper button",eyeDropperIcon:"Default eye dropper icon"},vars:{colorPreview:{"--ci-preview-size":"Controls `width` and `height` of color preview"},eyeDropperIcon:{"--ci-eye-dropper-icon-size":"Controls width and height of the eye dropper icon"}}}},64954:function(e,t,o){"use strict";o.d(t,{L:function(){return n}});let n={selectors:{wrapper:"Root element",preview:"Color preview, displayed only when `format` supports alpha channel",body:"Contains alpha/hue sliders and color preview",slider:"Alpha and hue sliders root",sliderOverlay:"Element used to display various overlays over hue and alpha sliders",saturation:"Saturation picker",saturationOverlay:"Element used to display various overlays over saturation picker",sliders:"Contains alpha and hue sliders",thumb:"Thumb of all sliders",swatch:"Color swatch",swatches:"Color swatches list"},vars:{wrapper:{"--cp-body-spacing":"Controls spacing between sliders and saturation","--cp-preview-size":"Controls size of the preview swatch","--cp-width":"Controls `width` of the root element","--cp-swatch-size":"Controls swatch `width` and `height`","--cp-thumb-size":"Controls thumb `width` and `height` in all sliders and saturation picker","--cp-saturation-height":"Controls `height` of the saturation picker"}}}},92511:function(e,t,o){"use strict";o.d(t,{$:function(){return n},d:function(){return r}});let n={selectors:{options:"`Combobox.Options` component",dropdown:"`Combobox.Dropdown` component",option:"`Combobox.Option` component",search:"`Combobox.Search` input",empty:"`Combobox.Empty` component",header:"`Combobox.Header` component",footer:"`Combobox.Footer` component",group:"`Combobox.Group` component",groupLabel:"Label of `Combobox.Group` component"},vars:{dropdown:{"--combobox-option-fz":"Controls option `font-size`","--combobox-option-padding":"Controls option `padding`","--combobox-padding":"Controls dropdown `padding`"},options:{"--combobox-option-fz":"Controls option `font-size`","--combobox-option-padding":"Controls option `padding`"}},modifiers:[{modifier:"data-combobox-selected",selector:"option",condition:"Option is selected"},{modifier:"data-combobox-active",selector:"option",condition:"`active` prop is set"},{modifier:"data-combobox-disabled",selector:"option",condition:"`disabled` prop is set"},{modifier:"data-hidden",selector:"dropdown",condition:"`hidden` prop is set"}]},r={dropdown:"Dropdown root element",options:"Options wrapper",option:"Option",empty:"Nothing found message",group:"Options group wrapper",groupLabel:"Options group label"}},29237:function(e,t,o){"use strict";o.d(t,{T:function(){return r}});var n=o(50352);let r={selectors:{...n.a.selectors,...n.X.selectors},vars:{}}},50352:function(e,t,o){"use strict";o.d(t,{X:function(){return r},a:function(){return n}});let n={selectors:{wrapper:"Root element of the Input",input:"Input element",section:"Left and right sections"},vars:{wrapper:{"--input-fz":"`font-size` of the input element","--input-height":"`height` or `min-height` of the input element (depends on `multiline` prop)","--input-left-section-width":"`width` of the left section","--input-right-section-width":"`width` of the right section","--input-margin-bottom":"`margin-bottom` of the input element, usually controlled by `Input.Wrapper`","--input-margin-top":"`margin-top` of the input element, usually controlled by `Input.Wrapper`","--input-padding-y":"`padding-top` and `padding-bottom` of the input element","--input-radius":"`border-radius` of the input element","--input-left-section-pointer-events":"Controls `pointer-events` of the left section","--input-right-section-pointer-events":"Controls `pointer-events` of the right section"}},modifiers:[{modifier:"data-error",selector:["wrapper","input"],condition:"`error` prop is set"},{modifier:"data-disabled",selector:"input",condition:"`disabled` prop is set"},{modifier:"data-with-right-section",selector:"wrapper",condition:"`rightSection` prop is set"},{modifier:"data-with-left-section",selector:"wrapper",condition:"`leftSection` prop is set"},{modifier:"data-multiline",selector:"wrapper",condition:"`multiline` prop is set"},{modifier:"data-pointer",selector:"wrapper",condition:"`pointer` prop is set"},{modifier:"data-position",selector:"section",value:"Section position: left or right"}]},r={selectors:{root:"Root element",label:"Label element",required:"Required asterisk element, rendered inside label",description:"Description element",error:"Error element"},vars:{label:{"--input-label-size":"Controls label `font-size`","--input-asterisk-color":"Controls label asterisk text `color`"},error:{"--input-error-size":"Controls error `font-size`"},description:{"--input-description-size":"Controls description `font-size`"}}}},55838:function(e,t,o){"use strict";o.d(t,{P:function(){return r}});var n=o(50352);let r={selectors:{...n.a.selectors,...n.X.selectors},vars:{}}},91516:function(e,t,o){"use strict";o.d(t,{k:function(){return r}});var n=o(62623);let r={selectors:{...n.T.selectors,divider:"`Menu.Divider` root element",label:"`Menu.Label` root element",item:"`Menu.Item` root element",itemLabel:"Label of `Menu.Item`",itemSection:"Left and right sections of `Menu.Item`"},vars:{},modifiers:[{modifier:"data-disabled",selector:"item",condition:"`disabled` prop is set on `Menu.Item`"},{modifier:"data-hovered",selector:"item",condition:"`Menu.Item` is hovered or selected with keyboard"}]}},7634:function(e,t,o){"use strict";o.d(t,{L:function(){return a}});var n=o(50352),r=o(92511);let a={selectors:{...n.a.selectors,...n.X.selectors,...r.d,pill:"Value pill",inputField:"Input field",pillsList:"List of pills, also contains input field"},vars:{}}},59325:function(e,t,o){"use strict";o.d(t,{c:function(){return r}});var n=o(50352);let r={selectors:{...n.X.selectors,...n.a.selectors},vars:{}}},37951:function(e,t,o){"use strict";o.d(t,{$:function(){return n}});let n={selectors:{root:"Root element",loader:"Loader component, displayed only when `loading` prop is set",icon:"Icon component, displayed only when `icon` prop is set",body:"Notification body, contains all other elements",title:"Title element, displayed only when `title` prop is set",description:"Description displayed below the title",closeButton:"Close button element"},vars:{root:{"--notification-radius":"Controls `border-radius`","--notification-color":"Controls icon color or notification line color"}},modifiers:[{modifier:"data-with-icon",selector:"root",condition:"`icon` prop is set"},{modifier:"data-with-border",selector:"root",condition:"`withBorder` prop is set"},{modifier:"data-with-title",selector:"description",condition:"`title` prop is set"}]}},68170:function(e,t,o){"use strict";o.d(t,{L:function(){return r}});var n=o(50352);let r={selectors:{...n.a.selectors,...n.X.selectors,controls:"Increment and decrement buttons wrapper",control:"Increment and decrement buttons"},vars:{controls:{"--ni-chevron-size":"Controls `width` and `height` of the default chevron icon"}},modifiers:[{modifier:"data-direction",selector:"control",value:"`up` or `down` depending on the control"}]}},37731:function(e,t,o){"use strict";o.d(t,{E:function(){return n}});let n={selectors:{root:"Root element",control:"Control element: items, next/previous, first/last buttons",dots:"Dots icon wrapper"},vars:{root:{"--pagination-active-bg":"Active control `background-color`","--pagination-control-fz":"Controls control `font-size`","--pagination-control-radius":"Controls control `border-radius`","--pagination-control-size":"Controls control `min-width` and `height`"}},modifiers:[{modifier:"data-active",selector:"control",condition:"Control is active"},{modifier:"data-disabled",selector:"control",condition:"Control is disabled"}]}},20827:function(e,t,o){"use strict";o.d(t,{m:function(){return r}});var n=o(50352);let r={selectors:{...n.a.selectors,...n.X.selectors,innerInput:"Actual input element",visibilityToggle:"Visibility toggle button"},vars:{root:{"--psi-button-size":"Controls visibility toggle button `width` and `height`","--psi-icon-size":"Controls visibility toggle icon `width` and `height`"}}}},81581:function(e,t,o){"use strict";o.d(t,{K:function(){return n},h:function(){return r}});let n={selectors:{root:"Root element",label:"Pill label (children)",remove:"Remove button"},vars:{root:{"--pill-height":"Controls `height` of the pill","--pill-fz":"Controls `font-size`","--pill-radius":"Controls `border-radius`"}},modifiers:[{modifier:"data-with-remove",selector:"root",condition:"`withRemoveButton` prop is set"},{modifier:"data-disabled",selector:"root",condition:"`disabled` prop is set"}]},r={selectors:{group:"Root element"},vars:{group:{"--pg-gap":"Controls `gap` between pills"}}}},34722:function(e,t,o){"use strict";o.d(t,{l:function(){return n}});let n={selectors:{root:"Root element",pinInput:"Input item wrapper",input:"Input element"},vars:{root:{"--pin-input-size":"Controls input `width` and `height`"}},modifiers:[]}},62623:function(e,t,o){"use strict";o.d(t,{T:function(){return n}});let n={selectors:{dropdown:"Dropdown element",arrow:"Dropdown arrow"},vars:{dropdown:{"--popover-radius":"Controls dropdown border-radius","--popover-shadow":"Controls dropdown box-shadow"}},modifiers:[{modifier:"data-position",selector:"dropdown",value:"Value of floating ui dropdown position"}]}},35150:function(e,t,o){"use strict";o.d(t,{S:function(){return n}});let n={selectors:{root:"Root element",section:"`Progress.Section` root element",label:"`Progress.Label` root element"},vars:{root:{"--progress-radius":"Controls `border-radius` of track and sections","--progress-size":"Controls height of progress bar"}},modifiers:[{modifier:"data-striped",selector:"section",condition:"`striped` or `animated` props are set"},{modifier:"data-animated",selector:"section",condition:"`animated` prop is set"}]}},97811:function(e,t,o){"use strict";o.d(t,{P:function(){return r},T:function(){return a}});var n=o(50352);let r={selectors:{root:"Root element",radio:'Input element (`input[type="radio"]`)',icon:"Radio icon, used to display checked icon",inner:"Wrapper for `icon` and `input`",body:"Input body, contains all other elements",labelWrapper:"Contains `label`, `description` and `error`",label:"Label element",description:"Description displayed below the label",error:"Error message displayed below the label"},vars:{root:{"--radio-color":"Controls checked radio `background-color`","--radio-radius":"Controls radio `border-radius`","--radio-size":"Controls radio `width` and `height`","--radio-icon-color":"Controls radio icon `color`","--radio-icon-size":"Controls radio icon `width` and `height`"}},modifiers:[{modifier:"data-error",selector:"radio",condition:"`error` prop is set"},{modifier:"data-label-position",selector:"inner",value:"Value of `labelPosition` prop"}]},a={selectors:{...n.X.selectors},vars:{}}},67355:function(e,t,o){"use strict";o.d(t,{o:function(){return n}});let n={selectors:{root:"Root element",control:"Wrapper element for input and label",input:'Input element (`input[type="radio"]`), hidden by default',label:"Label element associated with input",indicator:"Floating indicator that moves between items"},vars:{root:{"--sc-color":"Control `background-color` of `indicator`","--sc-font-size":"Controls `font-size` of labels","--sc-padding":"Controls `padding` of control","--sc-radius":"Controls `border-radius` of `indicator` and `root` elements","--sc-shadow":"Controls `box-shadow` of indicator","--sc-transition-duration":"Controls `transition-duration` of various elements that have animations","--sc-transition-timing-function":"Controls `transition-timing-function` of various elements that have animations"}},modifiers:[{modifier:"data-full-width",selector:"root",condition:"`fullWidth` prop is set"},{modifier:"data-orientation",selector:"control",value:"Value of `orientation` prop"},{modifier:"data-active",selector:["label","control"],condition:"Associated input is checked"},{modifier:"data-disabled",selector:"label",condition:"Associated input is disabled"}]}},61309:function(e,t,o){"use strict";o.d(t,{i:function(){return a}});var n=o(50352),r=o(92511);let a={selectors:{...n.a.selectors,...n.X.selectors,...r.d},vars:{}}},49717:function(e,t,o){"use strict";o.d(t,{U:function(){return n}});let n={selectors:{root:"Root element",steps:"Steps controls wrapper",separator:"Separator line between step controls",verticalSeparator:"Vertical separator line between step controls",content:"Current step content wrapper",stepWrapper:"Wrapper for the step icon and separator",step:"Step control button",stepIcon:"Step icon wrapper",stepCompletedIcon:"Completed step icon, rendered within stepIcon",stepBody:"Contains stepLabel and stepDescription",stepLabel:"Step label",stepDescription:"Step description",stepLoader:"Step loader"},vars:{root:{"--stepper-color":"Controls color of the active step and separator","--stepper-icon-size":"Controls `width` and `height` of the icons","--stepper-content-padding":"Controls `padding-top` of the content","--stepper-radius":"Controls `border-radius` of the step icon","--stepper-fz":"Controls `font-size` of various elements","--stepper-spacing":"Controls various spacings"}},modifiers:[{modifier:"data-progress",selector:"stepIcon",condition:"Step is current"},{modifier:"data-completed",selector:"stepIcon",condition:"Step is completed"}]}},12379:function(e,t,o){"use strict";o.d(t,{T:function(){return r},_:function(){return a}});var n=o(50352);let r={selectors:{root:"Root element",track:"Switch track, contains `thumb` and `trackLabel`",trackLabel:"Label displayed inside `track`",thumb:"Thumb displayed inside `track`",input:'Input element (`input[type="checkbox"]`), hidden by default',body:"Input body, contains all other elements",labelWrapper:"Contains `label`, `description` and `error`",label:"Label element",description:"Description displayed below the label",error:"Error message displayed below the label"},vars:{root:{"--switch-radius":"Controls `border-radius` of `track` and `thumb`","--switch-height":"Controls height of `track`","--switch-width":"Controls min-width of `track`","--switch-thumb-size":"Controls width and height of `thumb`","--switch-label-font-size":"Controls `font-size` of `trackLabel`","--switch-track-label-padding":"Controls `trackLabel` offset","--switch-color":"Controls track `background-color` when input is checked"}},modifiers:[{modifier:"data-error",selector:"track",condition:"`error` prop is set"},{modifier:"data-label-position",selector:["track","root"],value:"value of `labelPosition` prop"},{modifier:"data-disabled",selector:"label",condition:"`disabled` prop is set"}]},a={selectors:{...n.X.selectors},vars:{}}},49235:function(e,t,o){"use strict";o.d(t,{Y:function(){return n}});let n={selectors:{root:"Root element (`Tabs` component)",list:"List of tabs (`Tabs.List` component)",panel:"Panel with tab content (`Tabs.Panel` component)",tab:"Tab button (`Tabs.Tab` component)",tabLabel:"Label of `Tabs.Tab`",tabSection:"Left and right sections of `Tabs.Tab`"},vars:{root:{"--tabs-color":"Controls colors of `Tabs.Tab`, only applicable when variant is `pills` or `default`","--tabs-radius":"Controls `Tabs.Tab` `border-radius`"}},modifiers:[{modifier:"data-orientation",selector:["root","tab","list","panel"],value:"Value of `orientation` prop"},{modifier:"data-placement",selector:["root","tab","list"],value:"Value of placement prop",condition:'Value of `orientation` prop is "vertical" on `Tabs` component'},{modifier:"data-inverted",selector:["tab","list"],condition:"`inverted` prop is set on `Tabs` component"},{modifier:"data-grow",selector:["list"],condition:"`grow` prop is set on `Tabs.List` component"},{modifier:"data-position",selector:["tabSection"],value:"Position of the section, left or right"}]}},73811:function(e,t,o){"use strict";o.d(t,{h:function(){return a}});var n=o(50352),r=o(92511);let a={selectors:{...n.a.selectors,...n.X.selectors,...r.d,pill:"Value pill",inputField:"Input field",pillsList:"List of pills, also contains input field"},vars:{}}},52176:function(e,t,o){"use strict";o.d(t,{G:function(){return r}});var n=o(50352);let r={selectors:{...n.a.selectors,...n.X.selectors},vars:{}}},76475:function(e,t,o){"use strict";o.d(t,{g:function(){return r}});var n=o(50352);let r={selectors:{...n.a.selectors,...n.X.selectors},vars:{}}},42595:function(e,t,o){"use strict";o.d(t,{Z:function(){return n}});var n={code:"m-5caae6d3",pre:"m-2c47c4fd",header:"m-e58679f3",controls:"m-be7e9c9c",copy:"m-5caae85b",control:"m-d498bab7",file:"m-5cac2e62",files:"m-38d99e51",codeWrapper:"m-9f507240",showCodeButton:"m-c9378bc2",root:"m-5cb1b9c8",fileIcon:"m-b46cddfb"}},17441:function(e,t,o){"use strict";o.d(t,{Z:function(){return n}});var n={theme:"m-1f5e827e"}},37127:function(e,t,o){"use strict";o.d(t,{_:function(){return f}});var n=o(27378),r=o(40624),a=o(20410),i=o(96739),d=o(6231),s=o(56589),l=o(2688),c=o(42595),p=o(17441);let u={...c.Z,code:(0,r.Z)(c.Z.code,p.Z.theme)},m={language:"tsx"},f=(0,a.d)((e,t)=>{let o=(0,i.w)("InlineCodeHighlight",m,e),{classNames:r,className:a,style:c,styles:p,unstyled:f,vars:h,code:y,language:b,...v}=o,g=(0,d.y)({name:"InlineCodeHighlight",props:o,classes:u,className:a,style:c,classNames:r,styles:p,unstyled:f,rootSelector:"code"}),w=l.Z.highlight(y.trim(),{language:b}).value;return n.createElement(s.x,{...g("code"),component:"code",ref:t,...v,dangerouslySetInnerHTML:{__html:w}})});f.displayName="@mantine/core/InlineCodeHighlight"}}]);